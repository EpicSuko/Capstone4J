// Generated by jextract

package com.suko.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cs_aarch64_op {
 *     int vector_index;
 *     AArch64Layout_VectorLayout vas;
 *     struct {
 *         aarch64_shifter type;
 *         unsigned int value;
 *     } shift;
 *     aarch64_extender ext;
 *     aarch64_op_type type;
 *     bool is_vreg;
 *     union {
 *         aarch64_reg reg;
 *         int64_t imm;
 *         aarch64_imm_range imm_range;
 *         double fp;
 *         aarch64_op_mem mem;
 *         aarch64_op_sme sme;
 *         aarch64_op_pred pred;
 *     };
 *     aarch64_sysop sysop;
 *     uint8_t access;
 *     bool is_list_member;
 * }
 * }
 */
public class cs_aarch64_op {

    cs_aarch64_op() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        capstone_h.C_INT.withName("vector_index"),
        capstone_h.C_INT.withName("vas"),
        cs_aarch64_op.shift.layout().withName("shift"),
        capstone_h.C_INT.withName("ext"),
        capstone_h.C_INT.withName("type"),
        capstone_h.C_BOOL.withName("is_vreg"),
        MemoryLayout.paddingLayout(7),
        MemoryLayout.unionLayout(
            capstone_h.C_INT.withName("reg"),
            capstone_h.C_LONG_LONG.withName("imm"),
            aarch64_imm_range.layout().withName("imm_range"),
            capstone_h.C_DOUBLE.withName("fp"),
            aarch64_op_mem.layout().withName("mem"),
            aarch64_op_sme.layout().withName("sme"),
            aarch64_op_pred.layout().withName("pred")
        ).withName("$anon$2833:3"),
        aarch64_sysop.layout().withName("sysop"),
        capstone_h.C_CHAR.withName("access"),
        capstone_h.C_BOOL.withName("is_list_member"),
        MemoryLayout.paddingLayout(6)
    ).withName("cs_aarch64_op");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt vector_index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vector_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int vector_index
     * }
     */
    public static final OfInt vector_index$layout() {
        return vector_index$LAYOUT;
    }

    private static final long vector_index$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int vector_index
     * }
     */
    public static final long vector_index$offset() {
        return vector_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int vector_index
     * }
     */
    public static int vector_index(MemorySegment struct) {
        return struct.get(vector_index$LAYOUT, vector_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int vector_index
     * }
     */
    public static void vector_index(MemorySegment struct, int fieldValue) {
        struct.set(vector_index$LAYOUT, vector_index$OFFSET, fieldValue);
    }

    private static final OfInt vas$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vas"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AArch64Layout_VectorLayout vas
     * }
     */
    public static final OfInt vas$layout() {
        return vas$LAYOUT;
    }

    private static final long vas$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AArch64Layout_VectorLayout vas
     * }
     */
    public static final long vas$offset() {
        return vas$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AArch64Layout_VectorLayout vas
     * }
     */
    public static int vas(MemorySegment struct) {
        return struct.get(vas$LAYOUT, vas$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AArch64Layout_VectorLayout vas
     * }
     */
    public static void vas(MemorySegment struct, int fieldValue) {
        struct.set(vas$LAYOUT, vas$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     aarch64_shifter type;
     *     unsigned int value;
     * }
     * }
     */
    public static class shift {

        shift() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            capstone_h.C_INT.withName("type"),
            capstone_h.C_INT.withName("value")
        ).withName("$anon$2821:3");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * aarch64_shifter type
         * }
         */
        public static final OfInt type$layout() {
            return type$LAYOUT;
        }

        private static final long type$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * aarch64_shifter type
         * }
         */
        public static final long type$offset() {
            return type$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * aarch64_shifter type
         * }
         */
        public static int type(MemorySegment struct) {
            return struct.get(type$LAYOUT, type$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * aarch64_shifter type
         * }
         */
        public static void type(MemorySegment struct, int fieldValue) {
            struct.set(type$LAYOUT, type$OFFSET, fieldValue);
        }

        private static final OfInt value$LAYOUT = (OfInt)$LAYOUT.select(groupElement("value"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * unsigned int value
         * }
         */
        public static final OfInt value$layout() {
            return value$LAYOUT;
        }

        private static final long value$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * unsigned int value
         * }
         */
        public static final long value$offset() {
            return value$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * unsigned int value
         * }
         */
        public static int value(MemorySegment struct) {
            return struct.get(value$LAYOUT, value$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * unsigned int value
         * }
         */
        public static void value(MemorySegment struct, int fieldValue) {
            struct.set(value$LAYOUT, value$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout shift$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("shift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     aarch64_shifter type;
     *     unsigned int value;
     * } shift
     * }
     */
    public static final GroupLayout shift$layout() {
        return shift$LAYOUT;
    }

    private static final long shift$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     aarch64_shifter type;
     *     unsigned int value;
     * } shift
     * }
     */
    public static final long shift$offset() {
        return shift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     aarch64_shifter type;
     *     unsigned int value;
     * } shift
     * }
     */
    public static MemorySegment shift(MemorySegment struct) {
        return struct.asSlice(shift$OFFSET, shift$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     aarch64_shifter type;
     *     unsigned int value;
     * } shift
     * }
     */
    public static void shift(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, shift$OFFSET, shift$LAYOUT.byteSize());
    }

    private static final OfInt ext$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_extender ext
     * }
     */
    public static final OfInt ext$layout() {
        return ext$LAYOUT;
    }

    private static final long ext$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_extender ext
     * }
     */
    public static final long ext$offset() {
        return ext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_extender ext
     * }
     */
    public static int ext(MemorySegment struct) {
        return struct.get(ext$LAYOUT, ext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_extender ext
     * }
     */
    public static void ext(MemorySegment struct, int fieldValue) {
        struct.set(ext$LAYOUT, ext$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_op_type type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_op_type type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_op_type type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_op_type type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfBoolean is_vreg$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_vreg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_vreg
     * }
     */
    public static final OfBoolean is_vreg$layout() {
        return is_vreg$LAYOUT;
    }

    private static final long is_vreg$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_vreg
     * }
     */
    public static final long is_vreg$offset() {
        return is_vreg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_vreg
     * }
     */
    public static boolean is_vreg(MemorySegment struct) {
        return struct.get(is_vreg$LAYOUT, is_vreg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_vreg
     * }
     */
    public static void is_vreg(MemorySegment struct, boolean fieldValue) {
        struct.set(is_vreg$LAYOUT, is_vreg$OFFSET, fieldValue);
    }

    private static final OfInt reg$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$2833:3"), groupElement("reg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_reg reg
     * }
     */
    public static final OfInt reg$layout() {
        return reg$LAYOUT;
    }

    private static final long reg$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_reg reg
     * }
     */
    public static final long reg$offset() {
        return reg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_reg reg
     * }
     */
    public static int reg(MemorySegment struct) {
        return struct.get(reg$LAYOUT, reg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_reg reg
     * }
     */
    public static void reg(MemorySegment struct, int fieldValue) {
        struct.set(reg$LAYOUT, reg$OFFSET, fieldValue);
    }

    private static final OfLong imm$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$2833:3"), groupElement("imm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t imm
     * }
     */
    public static final OfLong imm$layout() {
        return imm$LAYOUT;
    }

    private static final long imm$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t imm
     * }
     */
    public static final long imm$offset() {
        return imm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t imm
     * }
     */
    public static long imm(MemorySegment struct) {
        return struct.get(imm$LAYOUT, imm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t imm
     * }
     */
    public static void imm(MemorySegment struct, long fieldValue) {
        struct.set(imm$LAYOUT, imm$OFFSET, fieldValue);
    }

    private static final GroupLayout imm_range$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$2833:3"), groupElement("imm_range"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_imm_range imm_range
     * }
     */
    public static final GroupLayout imm_range$layout() {
        return imm_range$LAYOUT;
    }

    private static final long imm_range$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_imm_range imm_range
     * }
     */
    public static final long imm_range$offset() {
        return imm_range$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_imm_range imm_range
     * }
     */
    public static MemorySegment imm_range(MemorySegment struct) {
        return struct.asSlice(imm_range$OFFSET, imm_range$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_imm_range imm_range
     * }
     */
    public static void imm_range(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, imm_range$OFFSET, imm_range$LAYOUT.byteSize());
    }

    private static final OfDouble fp$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("$anon$2833:3"), groupElement("fp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double fp
     * }
     */
    public static final OfDouble fp$layout() {
        return fp$LAYOUT;
    }

    private static final long fp$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double fp
     * }
     */
    public static final long fp$offset() {
        return fp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double fp
     * }
     */
    public static double fp(MemorySegment struct) {
        return struct.get(fp$LAYOUT, fp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double fp
     * }
     */
    public static void fp(MemorySegment struct, double fieldValue) {
        struct.set(fp$LAYOUT, fp$OFFSET, fieldValue);
    }

    private static final GroupLayout mem$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$2833:3"), groupElement("mem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_op_mem mem
     * }
     */
    public static final GroupLayout mem$layout() {
        return mem$LAYOUT;
    }

    private static final long mem$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_op_mem mem
     * }
     */
    public static final long mem$offset() {
        return mem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_op_mem mem
     * }
     */
    public static MemorySegment mem(MemorySegment struct) {
        return struct.asSlice(mem$OFFSET, mem$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_op_mem mem
     * }
     */
    public static void mem(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mem$OFFSET, mem$LAYOUT.byteSize());
    }

    private static final GroupLayout sme$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$2833:3"), groupElement("sme"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_op_sme sme
     * }
     */
    public static final GroupLayout sme$layout() {
        return sme$LAYOUT;
    }

    private static final long sme$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_op_sme sme
     * }
     */
    public static final long sme$offset() {
        return sme$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_op_sme sme
     * }
     */
    public static MemorySegment sme(MemorySegment struct) {
        return struct.asSlice(sme$OFFSET, sme$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_op_sme sme
     * }
     */
    public static void sme(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sme$OFFSET, sme$LAYOUT.byteSize());
    }

    private static final GroupLayout pred$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$2833:3"), groupElement("pred"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_op_pred pred
     * }
     */
    public static final GroupLayout pred$layout() {
        return pred$LAYOUT;
    }

    private static final long pred$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_op_pred pred
     * }
     */
    public static final long pred$offset() {
        return pred$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_op_pred pred
     * }
     */
    public static MemorySegment pred(MemorySegment struct) {
        return struct.asSlice(pred$OFFSET, pred$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_op_pred pred
     * }
     */
    public static void pred(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pred$OFFSET, pred$LAYOUT.byteSize());
    }

    private static final GroupLayout sysop$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sysop"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_sysop sysop
     * }
     */
    public static final GroupLayout sysop$layout() {
        return sysop$LAYOUT;
    }

    private static final long sysop$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_sysop sysop
     * }
     */
    public static final long sysop$offset() {
        return sysop$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_sysop sysop
     * }
     */
    public static MemorySegment sysop(MemorySegment struct) {
        return struct.asSlice(sysop$OFFSET, sysop$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_sysop sysop
     * }
     */
    public static void sysop(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sysop$OFFSET, sysop$LAYOUT.byteSize());
    }

    private static final OfByte access$LAYOUT = (OfByte)$LAYOUT.select(groupElement("access"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t access
     * }
     */
    public static final OfByte access$layout() {
        return access$LAYOUT;
    }

    private static final long access$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t access
     * }
     */
    public static final long access$offset() {
        return access$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t access
     * }
     */
    public static byte access(MemorySegment struct) {
        return struct.get(access$LAYOUT, access$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t access
     * }
     */
    public static void access(MemorySegment struct, byte fieldValue) {
        struct.set(access$LAYOUT, access$OFFSET, fieldValue);
    }

    private static final OfBoolean is_list_member$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_list_member"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_list_member
     * }
     */
    public static final OfBoolean is_list_member$layout() {
        return is_list_member$LAYOUT;
    }

    private static final long is_list_member$OFFSET = 65;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_list_member
     * }
     */
    public static final long is_list_member$offset() {
        return is_list_member$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_list_member
     * }
     */
    public static boolean is_list_member(MemorySegment struct) {
        return struct.get(is_list_member$LAYOUT, is_list_member$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_list_member
     * }
     */
    public static void is_list_member(MemorySegment struct, boolean fieldValue) {
        struct.set(is_list_member$LAYOUT, is_list_member$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

