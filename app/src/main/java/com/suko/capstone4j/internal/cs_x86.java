// Generated by jextract

package com.suko.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cs_x86 {
 *     uint8_t prefix[4];
 *     uint8_t opcode[4];
 *     uint8_t rex;
 *     uint8_t addr_size;
 *     uint8_t modrm;
 *     uint8_t sib;
 *     int64_t disp;
 *     x86_reg sib_index;
 *     int8_t sib_scale;
 *     x86_reg sib_base;
 *     x86_xop_cc xop_cc;
 *     x86_sse_cc sse_cc;
 *     x86_avx_cc avx_cc;
 *     bool avx_sae;
 *     x86_avx_rm avx_rm;
 *     union {
 *         uint64_t eflags;
 *         uint64_t fpu_flags;
 *     };
 *     uint8_t op_count;
 *     cs_x86_op operands[8];
 *     cs_x86_encoding encoding;
 * }
 * }
 */
public class cs_x86 {

    cs_x86() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, capstone_h.C_CHAR).withName("prefix"),
        MemoryLayout.sequenceLayout(4, capstone_h.C_CHAR).withName("opcode"),
        capstone_h.C_CHAR.withName("rex"),
        capstone_h.C_CHAR.withName("addr_size"),
        capstone_h.C_CHAR.withName("modrm"),
        capstone_h.C_CHAR.withName("sib"),
        MemoryLayout.paddingLayout(4),
        capstone_h.C_LONG_LONG.withName("disp"),
        capstone_h.C_INT.withName("sib_index"),
        capstone_h.C_CHAR.withName("sib_scale"),
        MemoryLayout.paddingLayout(3),
        capstone_h.C_INT.withName("sib_base"),
        capstone_h.C_INT.withName("xop_cc"),
        capstone_h.C_INT.withName("sse_cc"),
        capstone_h.C_INT.withName("avx_cc"),
        capstone_h.C_BOOL.withName("avx_sae"),
        MemoryLayout.paddingLayout(3),
        capstone_h.C_INT.withName("avx_rm"),
        MemoryLayout.unionLayout(
            capstone_h.C_LONG_LONG.withName("eflags"),
            capstone_h.C_LONG_LONG.withName("fpu_flags")
        ).withName("$anon$368:2"),
        capstone_h.C_CHAR.withName("op_count"),
        MemoryLayout.paddingLayout(7),
        MemoryLayout.sequenceLayout(8, cs_x86_op.layout()).withName("operands"),
        cs_x86_encoding.layout().withName("encoding"),
        MemoryLayout.paddingLayout(3)
    ).withName("cs_x86");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout prefix$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("prefix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t prefix[4]
     * }
     */
    public static final SequenceLayout prefix$layout() {
        return prefix$LAYOUT;
    }

    private static final long prefix$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t prefix[4]
     * }
     */
    public static final long prefix$offset() {
        return prefix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t prefix[4]
     * }
     */
    public static MemorySegment prefix(MemorySegment struct) {
        return struct.asSlice(prefix$OFFSET, prefix$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t prefix[4]
     * }
     */
    public static void prefix(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, prefix$OFFSET, prefix$LAYOUT.byteSize());
    }

    private static long[] prefix$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t prefix[4]
     * }
     */
    public static long[] prefix$dimensions() {
        return prefix$DIMS;
    }
    private static final VarHandle prefix$ELEM_HANDLE = prefix$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t prefix[4]
     * }
     */
    public static byte prefix(MemorySegment struct, long index0) {
        return (byte)prefix$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t prefix[4]
     * }
     */
    public static void prefix(MemorySegment struct, long index0, byte fieldValue) {
        prefix$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout opcode$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("opcode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t opcode[4]
     * }
     */
    public static final SequenceLayout opcode$layout() {
        return opcode$LAYOUT;
    }

    private static final long opcode$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t opcode[4]
     * }
     */
    public static final long opcode$offset() {
        return opcode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t opcode[4]
     * }
     */
    public static MemorySegment opcode(MemorySegment struct) {
        return struct.asSlice(opcode$OFFSET, opcode$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t opcode[4]
     * }
     */
    public static void opcode(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, opcode$OFFSET, opcode$LAYOUT.byteSize());
    }

    private static long[] opcode$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t opcode[4]
     * }
     */
    public static long[] opcode$dimensions() {
        return opcode$DIMS;
    }
    private static final VarHandle opcode$ELEM_HANDLE = opcode$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t opcode[4]
     * }
     */
    public static byte opcode(MemorySegment struct, long index0) {
        return (byte)opcode$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t opcode[4]
     * }
     */
    public static void opcode(MemorySegment struct, long index0, byte fieldValue) {
        opcode$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfByte rex$LAYOUT = (OfByte)$LAYOUT.select(groupElement("rex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t rex
     * }
     */
    public static final OfByte rex$layout() {
        return rex$LAYOUT;
    }

    private static final long rex$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t rex
     * }
     */
    public static final long rex$offset() {
        return rex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t rex
     * }
     */
    public static byte rex(MemorySegment struct) {
        return struct.get(rex$LAYOUT, rex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t rex
     * }
     */
    public static void rex(MemorySegment struct, byte fieldValue) {
        struct.set(rex$LAYOUT, rex$OFFSET, fieldValue);
    }

    private static final OfByte addr_size$LAYOUT = (OfByte)$LAYOUT.select(groupElement("addr_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t addr_size
     * }
     */
    public static final OfByte addr_size$layout() {
        return addr_size$LAYOUT;
    }

    private static final long addr_size$OFFSET = 9;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t addr_size
     * }
     */
    public static final long addr_size$offset() {
        return addr_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t addr_size
     * }
     */
    public static byte addr_size(MemorySegment struct) {
        return struct.get(addr_size$LAYOUT, addr_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t addr_size
     * }
     */
    public static void addr_size(MemorySegment struct, byte fieldValue) {
        struct.set(addr_size$LAYOUT, addr_size$OFFSET, fieldValue);
    }

    private static final OfByte modrm$LAYOUT = (OfByte)$LAYOUT.select(groupElement("modrm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t modrm
     * }
     */
    public static final OfByte modrm$layout() {
        return modrm$LAYOUT;
    }

    private static final long modrm$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t modrm
     * }
     */
    public static final long modrm$offset() {
        return modrm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t modrm
     * }
     */
    public static byte modrm(MemorySegment struct) {
        return struct.get(modrm$LAYOUT, modrm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t modrm
     * }
     */
    public static void modrm(MemorySegment struct, byte fieldValue) {
        struct.set(modrm$LAYOUT, modrm$OFFSET, fieldValue);
    }

    private static final OfByte sib$LAYOUT = (OfByte)$LAYOUT.select(groupElement("sib"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t sib
     * }
     */
    public static final OfByte sib$layout() {
        return sib$LAYOUT;
    }

    private static final long sib$OFFSET = 11;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t sib
     * }
     */
    public static final long sib$offset() {
        return sib$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t sib
     * }
     */
    public static byte sib(MemorySegment struct) {
        return struct.get(sib$LAYOUT, sib$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t sib
     * }
     */
    public static void sib(MemorySegment struct, byte fieldValue) {
        struct.set(sib$LAYOUT, sib$OFFSET, fieldValue);
    }

    private static final OfLong disp$LAYOUT = (OfLong)$LAYOUT.select(groupElement("disp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t disp
     * }
     */
    public static final OfLong disp$layout() {
        return disp$LAYOUT;
    }

    private static final long disp$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t disp
     * }
     */
    public static final long disp$offset() {
        return disp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t disp
     * }
     */
    public static long disp(MemorySegment struct) {
        return struct.get(disp$LAYOUT, disp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t disp
     * }
     */
    public static void disp(MemorySegment struct, long fieldValue) {
        struct.set(disp$LAYOUT, disp$OFFSET, fieldValue);
    }

    private static final OfInt sib_index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sib_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * x86_reg sib_index
     * }
     */
    public static final OfInt sib_index$layout() {
        return sib_index$LAYOUT;
    }

    private static final long sib_index$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * x86_reg sib_index
     * }
     */
    public static final long sib_index$offset() {
        return sib_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * x86_reg sib_index
     * }
     */
    public static int sib_index(MemorySegment struct) {
        return struct.get(sib_index$LAYOUT, sib_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * x86_reg sib_index
     * }
     */
    public static void sib_index(MemorySegment struct, int fieldValue) {
        struct.set(sib_index$LAYOUT, sib_index$OFFSET, fieldValue);
    }

    private static final OfByte sib_scale$LAYOUT = (OfByte)$LAYOUT.select(groupElement("sib_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t sib_scale
     * }
     */
    public static final OfByte sib_scale$layout() {
        return sib_scale$LAYOUT;
    }

    private static final long sib_scale$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t sib_scale
     * }
     */
    public static final long sib_scale$offset() {
        return sib_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t sib_scale
     * }
     */
    public static byte sib_scale(MemorySegment struct) {
        return struct.get(sib_scale$LAYOUT, sib_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t sib_scale
     * }
     */
    public static void sib_scale(MemorySegment struct, byte fieldValue) {
        struct.set(sib_scale$LAYOUT, sib_scale$OFFSET, fieldValue);
    }

    private static final OfInt sib_base$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sib_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * x86_reg sib_base
     * }
     */
    public static final OfInt sib_base$layout() {
        return sib_base$LAYOUT;
    }

    private static final long sib_base$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * x86_reg sib_base
     * }
     */
    public static final long sib_base$offset() {
        return sib_base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * x86_reg sib_base
     * }
     */
    public static int sib_base(MemorySegment struct) {
        return struct.get(sib_base$LAYOUT, sib_base$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * x86_reg sib_base
     * }
     */
    public static void sib_base(MemorySegment struct, int fieldValue) {
        struct.set(sib_base$LAYOUT, sib_base$OFFSET, fieldValue);
    }

    private static final OfInt xop_cc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("xop_cc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * x86_xop_cc xop_cc
     * }
     */
    public static final OfInt xop_cc$layout() {
        return xop_cc$LAYOUT;
    }

    private static final long xop_cc$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * x86_xop_cc xop_cc
     * }
     */
    public static final long xop_cc$offset() {
        return xop_cc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * x86_xop_cc xop_cc
     * }
     */
    public static int xop_cc(MemorySegment struct) {
        return struct.get(xop_cc$LAYOUT, xop_cc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * x86_xop_cc xop_cc
     * }
     */
    public static void xop_cc(MemorySegment struct, int fieldValue) {
        struct.set(xop_cc$LAYOUT, xop_cc$OFFSET, fieldValue);
    }

    private static final OfInt sse_cc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sse_cc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * x86_sse_cc sse_cc
     * }
     */
    public static final OfInt sse_cc$layout() {
        return sse_cc$LAYOUT;
    }

    private static final long sse_cc$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * x86_sse_cc sse_cc
     * }
     */
    public static final long sse_cc$offset() {
        return sse_cc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * x86_sse_cc sse_cc
     * }
     */
    public static int sse_cc(MemorySegment struct) {
        return struct.get(sse_cc$LAYOUT, sse_cc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * x86_sse_cc sse_cc
     * }
     */
    public static void sse_cc(MemorySegment struct, int fieldValue) {
        struct.set(sse_cc$LAYOUT, sse_cc$OFFSET, fieldValue);
    }

    private static final OfInt avx_cc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("avx_cc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * x86_avx_cc avx_cc
     * }
     */
    public static final OfInt avx_cc$layout() {
        return avx_cc$LAYOUT;
    }

    private static final long avx_cc$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * x86_avx_cc avx_cc
     * }
     */
    public static final long avx_cc$offset() {
        return avx_cc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * x86_avx_cc avx_cc
     * }
     */
    public static int avx_cc(MemorySegment struct) {
        return struct.get(avx_cc$LAYOUT, avx_cc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * x86_avx_cc avx_cc
     * }
     */
    public static void avx_cc(MemorySegment struct, int fieldValue) {
        struct.set(avx_cc$LAYOUT, avx_cc$OFFSET, fieldValue);
    }

    private static final OfBoolean avx_sae$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("avx_sae"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool avx_sae
     * }
     */
    public static final OfBoolean avx_sae$layout() {
        return avx_sae$LAYOUT;
    }

    private static final long avx_sae$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool avx_sae
     * }
     */
    public static final long avx_sae$offset() {
        return avx_sae$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool avx_sae
     * }
     */
    public static boolean avx_sae(MemorySegment struct) {
        return struct.get(avx_sae$LAYOUT, avx_sae$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool avx_sae
     * }
     */
    public static void avx_sae(MemorySegment struct, boolean fieldValue) {
        struct.set(avx_sae$LAYOUT, avx_sae$OFFSET, fieldValue);
    }

    private static final OfInt avx_rm$LAYOUT = (OfInt)$LAYOUT.select(groupElement("avx_rm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * x86_avx_rm avx_rm
     * }
     */
    public static final OfInt avx_rm$layout() {
        return avx_rm$LAYOUT;
    }

    private static final long avx_rm$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * x86_avx_rm avx_rm
     * }
     */
    public static final long avx_rm$offset() {
        return avx_rm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * x86_avx_rm avx_rm
     * }
     */
    public static int avx_rm(MemorySegment struct) {
        return struct.get(avx_rm$LAYOUT, avx_rm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * x86_avx_rm avx_rm
     * }
     */
    public static void avx_rm(MemorySegment struct, int fieldValue) {
        struct.set(avx_rm$LAYOUT, avx_rm$OFFSET, fieldValue);
    }

    private static final OfLong eflags$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$368:2"), groupElement("eflags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t eflags
     * }
     */
    public static final OfLong eflags$layout() {
        return eflags$LAYOUT;
    }

    private static final long eflags$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t eflags
     * }
     */
    public static final long eflags$offset() {
        return eflags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t eflags
     * }
     */
    public static long eflags(MemorySegment struct) {
        return struct.get(eflags$LAYOUT, eflags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t eflags
     * }
     */
    public static void eflags(MemorySegment struct, long fieldValue) {
        struct.set(eflags$LAYOUT, eflags$OFFSET, fieldValue);
    }

    private static final OfLong fpu_flags$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$368:2"), groupElement("fpu_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t fpu_flags
     * }
     */
    public static final OfLong fpu_flags$layout() {
        return fpu_flags$LAYOUT;
    }

    private static final long fpu_flags$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t fpu_flags
     * }
     */
    public static final long fpu_flags$offset() {
        return fpu_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t fpu_flags
     * }
     */
    public static long fpu_flags(MemorySegment struct) {
        return struct.get(fpu_flags$LAYOUT, fpu_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t fpu_flags
     * }
     */
    public static void fpu_flags(MemorySegment struct, long fieldValue) {
        struct.set(fpu_flags$LAYOUT, fpu_flags$OFFSET, fieldValue);
    }

    private static final OfByte op_count$LAYOUT = (OfByte)$LAYOUT.select(groupElement("op_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t op_count
     * }
     */
    public static final OfByte op_count$layout() {
        return op_count$LAYOUT;
    }

    private static final long op_count$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t op_count
     * }
     */
    public static final long op_count$offset() {
        return op_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t op_count
     * }
     */
    public static byte op_count(MemorySegment struct) {
        return struct.get(op_count$LAYOUT, op_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t op_count
     * }
     */
    public static void op_count(MemorySegment struct, byte fieldValue) {
        struct.set(op_count$LAYOUT, op_count$OFFSET, fieldValue);
    }

    private static final SequenceLayout operands$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("operands"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_x86_op operands[8]
     * }
     */
    public static final SequenceLayout operands$layout() {
        return operands$LAYOUT;
    }

    private static final long operands$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_x86_op operands[8]
     * }
     */
    public static final long operands$offset() {
        return operands$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_x86_op operands[8]
     * }
     */
    public static MemorySegment operands(MemorySegment struct) {
        return struct.asSlice(operands$OFFSET, operands$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_x86_op operands[8]
     * }
     */
    public static void operands(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, operands$OFFSET, operands$LAYOUT.byteSize());
    }

    private static long[] operands$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * cs_x86_op operands[8]
     * }
     */
    public static long[] operands$dimensions() {
        return operands$DIMS;
    }
    private static final MethodHandle operands$ELEM_HANDLE = operands$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * cs_x86_op operands[8]
     * }
     */
    public static MemorySegment operands(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)operands$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * cs_x86_op operands[8]
     * }
     */
    public static void operands(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, operands(struct, index0), 0L, cs_x86_op.layout().byteSize());
    }

    private static final GroupLayout encoding$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("encoding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_x86_encoding encoding
     * }
     */
    public static final GroupLayout encoding$layout() {
        return encoding$LAYOUT;
    }

    private static final long encoding$OFFSET = 456;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_x86_encoding encoding
     * }
     */
    public static final long encoding$offset() {
        return encoding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_x86_encoding encoding
     * }
     */
    public static MemorySegment encoding(MemorySegment struct) {
        return struct.asSlice(encoding$OFFSET, encoding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_x86_encoding encoding
     * }
     */
    public static void encoding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, encoding$OFFSET, encoding$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

