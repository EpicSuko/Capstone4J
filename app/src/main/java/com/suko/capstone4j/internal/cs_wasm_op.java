// Generated by jextract

package com.suko.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cs_wasm_op {
 *     wasm_op_type type;
 *     uint32_t size;
 *     union {
 *         int8_t int7;
 *         uint32_t varuint32;
 *         uint64_t varuint64;
 *         uint32_t uint32;
 *         uint64_t uint64;
 *         uint32_t immediate[2];
 *         cs_wasm_brtable brtable;
 *     };
 * }
 * }
 */
public class cs_wasm_op {

    cs_wasm_op() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        capstone_h.C_INT.withName("type"),
        capstone_h.C_INT.withName("size"),
        MemoryLayout.unionLayout(
            capstone_h.C_CHAR.withName("int7"),
            capstone_h.C_INT.withName("varuint32"),
            capstone_h.C_LONG_LONG.withName("varuint64"),
            capstone_h.C_INT.withName("uint32"),
            capstone_h.C_LONG_LONG.withName("uint64"),
            MemoryLayout.sequenceLayout(2, capstone_h.C_INT).withName("immediate"),
            cs_wasm_brtable.layout().withName("brtable")
        ).withName("$anon$39:2")
    ).withName("cs_wasm_op");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wasm_op_type type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wasm_op_type type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wasm_op_type type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wasm_op_type type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static final OfInt size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static int size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t size
     * }
     */
    public static void size(MemorySegment struct, int fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final OfByte int7$LAYOUT = (OfByte)$LAYOUT.select(groupElement("$anon$39:2"), groupElement("int7"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t int7
     * }
     */
    public static final OfByte int7$layout() {
        return int7$LAYOUT;
    }

    private static final long int7$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t int7
     * }
     */
    public static final long int7$offset() {
        return int7$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t int7
     * }
     */
    public static byte int7(MemorySegment struct) {
        return struct.get(int7$LAYOUT, int7$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t int7
     * }
     */
    public static void int7(MemorySegment struct, byte fieldValue) {
        struct.set(int7$LAYOUT, int7$OFFSET, fieldValue);
    }

    private static final OfInt varuint32$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$39:2"), groupElement("varuint32"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t varuint32
     * }
     */
    public static final OfInt varuint32$layout() {
        return varuint32$LAYOUT;
    }

    private static final long varuint32$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t varuint32
     * }
     */
    public static final long varuint32$offset() {
        return varuint32$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t varuint32
     * }
     */
    public static int varuint32(MemorySegment struct) {
        return struct.get(varuint32$LAYOUT, varuint32$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t varuint32
     * }
     */
    public static void varuint32(MemorySegment struct, int fieldValue) {
        struct.set(varuint32$LAYOUT, varuint32$OFFSET, fieldValue);
    }

    private static final OfLong varuint64$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$39:2"), groupElement("varuint64"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t varuint64
     * }
     */
    public static final OfLong varuint64$layout() {
        return varuint64$LAYOUT;
    }

    private static final long varuint64$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t varuint64
     * }
     */
    public static final long varuint64$offset() {
        return varuint64$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t varuint64
     * }
     */
    public static long varuint64(MemorySegment struct) {
        return struct.get(varuint64$LAYOUT, varuint64$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t varuint64
     * }
     */
    public static void varuint64(MemorySegment struct, long fieldValue) {
        struct.set(varuint64$LAYOUT, varuint64$OFFSET, fieldValue);
    }

    private static final OfInt uint32$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$39:2"), groupElement("uint32"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t uint32
     * }
     */
    public static final OfInt uint32$layout() {
        return uint32$LAYOUT;
    }

    private static final long uint32$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t uint32
     * }
     */
    public static final long uint32$offset() {
        return uint32$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t uint32
     * }
     */
    public static int uint32(MemorySegment struct) {
        return struct.get(uint32$LAYOUT, uint32$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t uint32
     * }
     */
    public static void uint32(MemorySegment struct, int fieldValue) {
        struct.set(uint32$LAYOUT, uint32$OFFSET, fieldValue);
    }

    private static final OfLong uint64$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$39:2"), groupElement("uint64"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t uint64
     * }
     */
    public static final OfLong uint64$layout() {
        return uint64$LAYOUT;
    }

    private static final long uint64$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t uint64
     * }
     */
    public static final long uint64$offset() {
        return uint64$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t uint64
     * }
     */
    public static long uint64(MemorySegment struct) {
        return struct.get(uint64$LAYOUT, uint64$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t uint64
     * }
     */
    public static void uint64(MemorySegment struct, long fieldValue) {
        struct.set(uint64$LAYOUT, uint64$OFFSET, fieldValue);
    }

    private static final SequenceLayout immediate$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("$anon$39:2"), groupElement("immediate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t immediate[2]
     * }
     */
    public static final SequenceLayout immediate$layout() {
        return immediate$LAYOUT;
    }

    private static final long immediate$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t immediate[2]
     * }
     */
    public static final long immediate$offset() {
        return immediate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t immediate[2]
     * }
     */
    public static MemorySegment immediate(MemorySegment struct) {
        return struct.asSlice(immediate$OFFSET, immediate$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t immediate[2]
     * }
     */
    public static void immediate(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, immediate$OFFSET, immediate$LAYOUT.byteSize());
    }

    private static long[] immediate$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t immediate[2]
     * }
     */
    public static long[] immediate$dimensions() {
        return immediate$DIMS;
    }
    private static final VarHandle immediate$ELEM_HANDLE = immediate$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t immediate[2]
     * }
     */
    public static int immediate(MemorySegment struct, long index0) {
        return (int)immediate$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t immediate[2]
     * }
     */
    public static void immediate(MemorySegment struct, long index0, int fieldValue) {
        immediate$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout brtable$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$39:2"), groupElement("brtable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_wasm_brtable brtable
     * }
     */
    public static final GroupLayout brtable$layout() {
        return brtable$LAYOUT;
    }

    private static final long brtable$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_wasm_brtable brtable
     * }
     */
    public static final long brtable$offset() {
        return brtable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_wasm_brtable brtable
     * }
     */
    public static MemorySegment brtable(MemorySegment struct) {
        return struct.asSlice(brtable$OFFSET, brtable$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_wasm_brtable brtable
     * }
     */
    public static void brtable(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, brtable$OFFSET, brtable$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

