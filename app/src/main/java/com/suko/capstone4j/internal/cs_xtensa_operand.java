// Generated by jextract

package com.suko.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cs_xtensa_operand {
 *     uint8_t type;
 *     uint8_t access;
 *     union {
 *         uint8_t reg;
 *         int32_t imm;
 *         cs_xtensa_op_mem mem;
 *     };
 * }
 * }
 */
public class cs_xtensa_operand {

    cs_xtensa_operand() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        capstone_h.C_CHAR.withName("type"),
        capstone_h.C_CHAR.withName("access"),
        MemoryLayout.paddingLayout(2),
        MemoryLayout.unionLayout(
            capstone_h.C_CHAR.withName("reg"),
            capstone_h.C_INT.withName("imm"),
            cs_xtensa_op_mem.layout().withName("mem")
        ).withName("$anon$1708:2")
    ).withName("cs_xtensa_operand");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte type$LAYOUT = (OfByte)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t type
     * }
     */
    public static final OfByte type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t type
     * }
     */
    public static byte type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t type
     * }
     */
    public static void type(MemorySegment struct, byte fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfByte access$LAYOUT = (OfByte)$LAYOUT.select(groupElement("access"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t access
     * }
     */
    public static final OfByte access$layout() {
        return access$LAYOUT;
    }

    private static final long access$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t access
     * }
     */
    public static final long access$offset() {
        return access$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t access
     * }
     */
    public static byte access(MemorySegment struct) {
        return struct.get(access$LAYOUT, access$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t access
     * }
     */
    public static void access(MemorySegment struct, byte fieldValue) {
        struct.set(access$LAYOUT, access$OFFSET, fieldValue);
    }

    private static final OfByte reg$LAYOUT = (OfByte)$LAYOUT.select(groupElement("$anon$1708:2"), groupElement("reg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reg
     * }
     */
    public static final OfByte reg$layout() {
        return reg$LAYOUT;
    }

    private static final long reg$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reg
     * }
     */
    public static final long reg$offset() {
        return reg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reg
     * }
     */
    public static byte reg(MemorySegment struct) {
        return struct.get(reg$LAYOUT, reg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reg
     * }
     */
    public static void reg(MemorySegment struct, byte fieldValue) {
        struct.set(reg$LAYOUT, reg$OFFSET, fieldValue);
    }

    private static final OfInt imm$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$1708:2"), groupElement("imm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t imm
     * }
     */
    public static final OfInt imm$layout() {
        return imm$LAYOUT;
    }

    private static final long imm$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t imm
     * }
     */
    public static final long imm$offset() {
        return imm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t imm
     * }
     */
    public static int imm(MemorySegment struct) {
        return struct.get(imm$LAYOUT, imm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t imm
     * }
     */
    public static void imm(MemorySegment struct, int fieldValue) {
        struct.set(imm$LAYOUT, imm$OFFSET, fieldValue);
    }

    private static final GroupLayout mem$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$1708:2"), groupElement("mem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_xtensa_op_mem mem
     * }
     */
    public static final GroupLayout mem$layout() {
        return mem$LAYOUT;
    }

    private static final long mem$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_xtensa_op_mem mem
     * }
     */
    public static final long mem$offset() {
        return mem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_xtensa_op_mem mem
     * }
     */
    public static MemorySegment mem(MemorySegment struct) {
        return struct.asSlice(mem$OFFSET, mem$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_xtensa_op_mem mem
     * }
     */
    public static void mem(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mem$OFFSET, mem$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

