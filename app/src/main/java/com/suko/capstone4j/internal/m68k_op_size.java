// Generated by jextract

package com.suko.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct m68k_op_size {
 *     m68k_size_type type;
 *     union {
 *         m68k_cpu_size cpu_size;
 *         m68k_fpu_size fpu_size;
 *     };
 * }
 * }
 */
public class m68k_op_size {

    m68k_op_size() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        capstone_h.C_INT.withName("type"),
        MemoryLayout.unionLayout(
            capstone_h.C_INT.withName("cpu_size"),
            capstone_h.C_INT.withName("fpu_size")
        ).withName("$anon$204:2")
    ).withName("m68k_op_size");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * m68k_size_type type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * m68k_size_type type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * m68k_size_type type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * m68k_size_type type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt cpu_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$204:2"), groupElement("cpu_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * m68k_cpu_size cpu_size
     * }
     */
    public static final OfInt cpu_size$layout() {
        return cpu_size$LAYOUT;
    }

    private static final long cpu_size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * m68k_cpu_size cpu_size
     * }
     */
    public static final long cpu_size$offset() {
        return cpu_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * m68k_cpu_size cpu_size
     * }
     */
    public static int cpu_size(MemorySegment struct) {
        return struct.get(cpu_size$LAYOUT, cpu_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * m68k_cpu_size cpu_size
     * }
     */
    public static void cpu_size(MemorySegment struct, int fieldValue) {
        struct.set(cpu_size$LAYOUT, cpu_size$OFFSET, fieldValue);
    }

    private static final OfInt fpu_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$204:2"), groupElement("fpu_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * m68k_fpu_size fpu_size
     * }
     */
    public static final OfInt fpu_size$layout() {
        return fpu_size$LAYOUT;
    }

    private static final long fpu_size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * m68k_fpu_size fpu_size
     * }
     */
    public static final long fpu_size$offset() {
        return fpu_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * m68k_fpu_size fpu_size
     * }
     */
    public static int fpu_size(MemorySegment struct) {
        return struct.get(fpu_size$LAYOUT, fpu_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * m68k_fpu_size fpu_size
     * }
     */
    public static void fpu_size(MemorySegment struct, int fieldValue) {
        struct.set(fpu_size$LAYOUT, fpu_size$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

