// Generated by jextract

package com.suko.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cs_mips_op {
 *     mips_op_type type;
 *     union {
 *         mips_reg reg;
 *         int64_t imm;
 *         uint64_t uimm;
 *         mips_op_mem mem;
 *     };
 *     bool is_reglist;
 *     bool is_unsigned;
 *     uint8_t access;
 * }
 * }
 */
public class cs_mips_op {

    cs_mips_op() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        capstone_h.C_INT.withName("type"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.unionLayout(
            capstone_h.C_INT.withName("reg"),
            capstone_h.C_LONG_LONG.withName("imm"),
            capstone_h.C_LONG_LONG.withName("uimm"),
            mips_op_mem.layout().withName("mem")
        ).withName("$anon$686:2"),
        capstone_h.C_BOOL.withName("is_reglist"),
        capstone_h.C_BOOL.withName("is_unsigned"),
        capstone_h.C_CHAR.withName("access"),
        MemoryLayout.paddingLayout(5)
    ).withName("cs_mips_op");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mips_op_type type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mips_op_type type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mips_op_type type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mips_op_type type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt reg$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$686:2"), groupElement("reg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mips_reg reg
     * }
     */
    public static final OfInt reg$layout() {
        return reg$LAYOUT;
    }

    private static final long reg$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mips_reg reg
     * }
     */
    public static final long reg$offset() {
        return reg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mips_reg reg
     * }
     */
    public static int reg(MemorySegment struct) {
        return struct.get(reg$LAYOUT, reg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mips_reg reg
     * }
     */
    public static void reg(MemorySegment struct, int fieldValue) {
        struct.set(reg$LAYOUT, reg$OFFSET, fieldValue);
    }

    private static final OfLong imm$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$686:2"), groupElement("imm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t imm
     * }
     */
    public static final OfLong imm$layout() {
        return imm$LAYOUT;
    }

    private static final long imm$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t imm
     * }
     */
    public static final long imm$offset() {
        return imm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t imm
     * }
     */
    public static long imm(MemorySegment struct) {
        return struct.get(imm$LAYOUT, imm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t imm
     * }
     */
    public static void imm(MemorySegment struct, long fieldValue) {
        struct.set(imm$LAYOUT, imm$OFFSET, fieldValue);
    }

    private static final OfLong uimm$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$686:2"), groupElement("uimm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t uimm
     * }
     */
    public static final OfLong uimm$layout() {
        return uimm$LAYOUT;
    }

    private static final long uimm$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t uimm
     * }
     */
    public static final long uimm$offset() {
        return uimm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t uimm
     * }
     */
    public static long uimm(MemorySegment struct) {
        return struct.get(uimm$LAYOUT, uimm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t uimm
     * }
     */
    public static void uimm(MemorySegment struct, long fieldValue) {
        struct.set(uimm$LAYOUT, uimm$OFFSET, fieldValue);
    }

    private static final GroupLayout mem$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$686:2"), groupElement("mem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mips_op_mem mem
     * }
     */
    public static final GroupLayout mem$layout() {
        return mem$LAYOUT;
    }

    private static final long mem$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mips_op_mem mem
     * }
     */
    public static final long mem$offset() {
        return mem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mips_op_mem mem
     * }
     */
    public static MemorySegment mem(MemorySegment struct) {
        return struct.asSlice(mem$OFFSET, mem$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mips_op_mem mem
     * }
     */
    public static void mem(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mem$OFFSET, mem$LAYOUT.byteSize());
    }

    private static final OfBoolean is_reglist$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_reglist"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_reglist
     * }
     */
    public static final OfBoolean is_reglist$layout() {
        return is_reglist$LAYOUT;
    }

    private static final long is_reglist$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_reglist
     * }
     */
    public static final long is_reglist$offset() {
        return is_reglist$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_reglist
     * }
     */
    public static boolean is_reglist(MemorySegment struct) {
        return struct.get(is_reglist$LAYOUT, is_reglist$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_reglist
     * }
     */
    public static void is_reglist(MemorySegment struct, boolean fieldValue) {
        struct.set(is_reglist$LAYOUT, is_reglist$OFFSET, fieldValue);
    }

    private static final OfBoolean is_unsigned$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_unsigned"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_unsigned
     * }
     */
    public static final OfBoolean is_unsigned$layout() {
        return is_unsigned$LAYOUT;
    }

    private static final long is_unsigned$OFFSET = 25;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_unsigned
     * }
     */
    public static final long is_unsigned$offset() {
        return is_unsigned$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_unsigned
     * }
     */
    public static boolean is_unsigned(MemorySegment struct) {
        return struct.get(is_unsigned$LAYOUT, is_unsigned$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_unsigned
     * }
     */
    public static void is_unsigned(MemorySegment struct, boolean fieldValue) {
        struct.set(is_unsigned$LAYOUT, is_unsigned$OFFSET, fieldValue);
    }

    private static final OfByte access$LAYOUT = (OfByte)$LAYOUT.select(groupElement("access"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t access
     * }
     */
    public static final OfByte access$layout() {
        return access$LAYOUT;
    }

    private static final long access$OFFSET = 26;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t access
     * }
     */
    public static final long access$offset() {
        return access$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t access
     * }
     */
    public static byte access(MemorySegment struct) {
        return struct.get(access$LAYOUT, access$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t access
     * }
     */
    public static void access(MemorySegment struct, byte fieldValue) {
        struct.set(access$LAYOUT, access$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

