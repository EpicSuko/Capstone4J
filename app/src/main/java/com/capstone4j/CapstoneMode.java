package com.capstone4j;

import static com.capstone4j.internal.capstone_h.*;

public enum CapstoneMode {

    LITTLE_ENDIAN(CS_MODE_LITTLE_ENDIAN()),
    ARM(CS_MODE_ARM()),
	X86_16(CS_MODE_16()),
	X86_32(CS_MODE_32()),
	X86_64(CS_MODE_64()),
	PPC_64(CS_MODE_64()),
	THUMB(CS_MODE_THUMB()),
	MCLASS(CS_MODE_MCLASS()),
	V8(CS_MODE_V8()),
	V9(CS_MODE_V9()),
	QPX(CS_MODE_QPX()),
	SPE(CS_MODE_SPE()),
	BOOKE(CS_MODE_BOOKE()),
	PS(CS_MODE_PS()),
	AIX_OS(CS_MODE_AIX_OS()),
	PWR7(CS_MODE_PWR7()),
	PWR8(CS_MODE_PWR8()),
	PWR9(CS_MODE_PWR9()),
	PWR10(CS_MODE_PWR10()),
	PPC_ISA_FUTURE(CS_MODE_PPC_ISA_FUTURE()),
	MODERN_AIX_AS(CS_MODE_MODERN_AIX_AS()),
	MSYNC(CS_MODE_MSYNC()),
	M68K_000(CS_MODE_M68K_000()),
	M68K_010(CS_MODE_M68K_010()),
	M68K_020(CS_MODE_M68K_020()),
	M68K_030(CS_MODE_M68K_030()),
	M68K_040(CS_MODE_M68K_040()),
	M68K_060(CS_MODE_M68K_060()),
	BIG_ENDIAN(CS_MODE_BIG_ENDIAN()),
	MIPS16(CS_MODE_MIPS16()),
	MIPS32(CS_MODE_MIPS32()),
	MIPS64(CS_MODE_MIPS64()),
	MICRO(CS_MODE_MICRO()),
	MIPS1(CS_MODE_MIPS1()),
	MIPS2(CS_MODE_MIPS2()),
	MIPS32R2(CS_MODE_MIPS32R2()),
	MIPS32R3(CS_MODE_MIPS32R3()),
	MIPS32R5(CS_MODE_MIPS32R5()),
	MIPS32R6(CS_MODE_MIPS32R6()),
	MIPS3(CS_MODE_MIPS3()),
	MIPS4(CS_MODE_MIPS4()),
	MIPS5(CS_MODE_MIPS5()),
	MIPS64R2(CS_MODE_MIPS64R2()),
	MIPS64R3(CS_MODE_MIPS64R3()),
	MIPS64R5(CS_MODE_MIPS64R5()),
	MIPS64R6(CS_MODE_MIPS64R6()),
	OCTEON(CS_MODE_OCTEON()),
	OCTEONP(CS_MODE_OCTEONP()),
	NANOMIPS(CS_MODE_NANOMIPS()),
	NMS1(CS_MODE_NMS1()),
	I7200(CS_MODE_I7200()),
	MIPS_NOFLOAT(CS_MODE_MIPS_NOFLOAT()),
	MIPS_PTR64(CS_MODE_MIPS_PTR64()),
	MICRO32R3(CS_MODE_MICRO32R3()),
	MICRO32R6(CS_MODE_MICRO32R6()),
	M680X_6301(CS_MODE_M680X_6301()),
	M680X_6309(CS_MODE_M680X_6309()),
	M680X_6800(CS_MODE_M680X_6800()),
	M680X_6801(CS_MODE_M680X_6801()),
	M680X_6805(CS_MODE_M680X_6805()),
	M680X_6808(CS_MODE_M680X_6808()),
	M680X_6809(CS_MODE_M680X_6809()),
	M680X_6811(CS_MODE_M680X_6811()),
	M680X_CPU12(CS_MODE_M680X_CPU12()),
	M680X_HCS08(CS_MODE_M680X_HCS08()),
	BPF_CLASSIC(CS_MODE_BPF_CLASSIC()),
	BPF_EXTENDED(CS_MODE_BPF_EXTENDED()),
	RISCV32(CS_MODE_RISCV32()),
	RISCV64(CS_MODE_RISCV64()),
	RISCVC(CS_MODE_RISCVC()),
	MOS65XX_6502(CS_MODE_MOS65XX_6502()),
	MOS65XX_65C02(CS_MODE_MOS65XX_65C02()),
	MOS65XX_W65C02(CS_MODE_MOS65XX_W65C02()),
	MOS65XX_65816(CS_MODE_MOS65XX_65816()),
	MOS65XX_65816_LONG_M(CS_MODE_MOS65XX_65816_LONG_M()),
	MOS65XX_65816_LONG_X(CS_MODE_MOS65XX_65816_LONG_X()),
	MOS65XX_65816_LONG_MX(CS_MODE_MOS65XX_65816_LONG_MX()),
	SH2(CS_MODE_SH2()),
	SH2A(CS_MODE_SH2A()),
	SH3(CS_MODE_SH3()),
	SH4(CS_MODE_SH4()),
	SH4A(CS_MODE_SH4A()),
	SHFPU(CS_MODE_SHFPU()),
	SHDSP(CS_MODE_SHDSP()), 
	TRICORE_110(CS_MODE_TRICORE_110()),
	TRICORE_120(CS_MODE_TRICORE_120()),
	TRICORE_130(CS_MODE_TRICORE_130()),
	TRICORE_131(CS_MODE_TRICORE_131()),
	TRICORE_160(CS_MODE_TRICORE_160()),
	TRICORE_161(CS_MODE_TRICORE_161()),
	TRICORE_162(CS_MODE_TRICORE_162()),
	TRICORE_180(CS_MODE_TRICORE_180()),
	HPPA_11(CS_MODE_HPPA_11()),
	HPPA_20(CS_MODE_HPPA_20()),
	HPPA_20W(CS_MODE_HPPA_20W()),
	LOONGARCH32(CS_MODE_LOONGARCH32()),
	LOONGARCH64(CS_MODE_LOONGARCH64()),
	SYSTEMZ_ARCH8(CS_MODE_SYSTEMZ_ARCH8()),
	SYSTEMZ_ARCH9(CS_MODE_SYSTEMZ_ARCH9()),
	SYSTEMZ_ARCH10(CS_MODE_SYSTEMZ_ARCH10()),
	SYSTEMZ_ARCH11(CS_MODE_SYSTEMZ_ARCH11()),
	SYSTEMZ_ARCH12(CS_MODE_SYSTEMZ_ARCH12()),
	SYSTEMZ_ARCH13(CS_MODE_SYSTEMZ_ARCH13()),
	SYSTEMZ_ARCH14(CS_MODE_SYSTEMZ_ARCH14()),
	SYSTEMZ_Z10(CS_MODE_SYSTEMZ_Z10()),
	SYSTEMZ_Z196(CS_MODE_SYSTEMZ_Z196()),
	SYSTEMZ_ZEC12(CS_MODE_SYSTEMZ_ZEC12()),
	SYSTEMZ_Z13(CS_MODE_SYSTEMZ_Z13()),
	SYSTEMZ_Z14(CS_MODE_SYSTEMZ_Z14()),
	SYSTEMZ_Z15(CS_MODE_SYSTEMZ_Z15()),
	SYSTEMZ_Z16(CS_MODE_SYSTEMZ_Z16()),
	SYSTEMZ_GENERIC(CS_MODE_SYSTEMZ_GENERIC()),
	XTENSA_ESP32(CS_MODE_XTENSA_ESP32()),
	XTENSA_ESP32S2(CS_MODE_XTENSA_ESP32S2()),
	XTENSA_ESP8266(CS_MODE_XTENSA_ESP8266());

    private final int value;

    CapstoneMode(int value) { 
        this.value = value;
    }

    public int getValue() {
        return value;
    }

	public static int toValue(CapstoneMode[] modes) {
		int value = 0;
		for (CapstoneMode mode : modes) {
			value |= mode.getValue();
		}
		return value;
	}
}