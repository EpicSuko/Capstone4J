// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct m680x_op_idx {
 *     m680x_reg base_reg;
 *     m680x_reg offset_reg;
 *     int16_t offset;
 *     uint16_t offset_addr;
 *     uint8_t offset_bits;
 *     int8_t inc_dec;
 *     uint8_t flags;
 * }
 * }
 */
public class m680x_op_idx {

    m680x_op_idx() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        capstone_h.C_INT.withName("base_reg"),
        capstone_h.C_INT.withName("offset_reg"),
        capstone_h.C_SHORT.withName("offset"),
        capstone_h.C_SHORT.withName("offset_addr"),
        capstone_h.C_CHAR.withName("offset_bits"),
        capstone_h.C_CHAR.withName("inc_dec"),
        capstone_h.C_CHAR.withName("flags"),
        MemoryLayout.paddingLayout(1)
    ).withName("m680x_op_idx");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt base_reg$LAYOUT = (OfInt)$LAYOUT.select(groupElement("base_reg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * m680x_reg base_reg
     * }
     */
    public static final OfInt base_reg$layout() {
        return base_reg$LAYOUT;
    }

    private static final long base_reg$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * m680x_reg base_reg
     * }
     */
    public static final long base_reg$offset() {
        return base_reg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * m680x_reg base_reg
     * }
     */
    public static int base_reg(MemorySegment struct) {
        return struct.get(base_reg$LAYOUT, base_reg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * m680x_reg base_reg
     * }
     */
    public static void base_reg(MemorySegment struct, int fieldValue) {
        struct.set(base_reg$LAYOUT, base_reg$OFFSET, fieldValue);
    }

    private static final OfInt offset_reg$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offset_reg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * m680x_reg offset_reg
     * }
     */
    public static final OfInt offset_reg$layout() {
        return offset_reg$LAYOUT;
    }

    private static final long offset_reg$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * m680x_reg offset_reg
     * }
     */
    public static final long offset_reg$offset() {
        return offset_reg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * m680x_reg offset_reg
     * }
     */
    public static int offset_reg(MemorySegment struct) {
        return struct.get(offset_reg$LAYOUT, offset_reg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * m680x_reg offset_reg
     * }
     */
    public static void offset_reg(MemorySegment struct, int fieldValue) {
        struct.set(offset_reg$LAYOUT, offset_reg$OFFSET, fieldValue);
    }

    private static final OfShort offset$LAYOUT = (OfShort)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t offset
     * }
     */
    public static final OfShort offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t offset
     * }
     */
    public static short offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t offset
     * }
     */
    public static void offset(MemorySegment struct, short fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfShort offset_addr$LAYOUT = (OfShort)$LAYOUT.select(groupElement("offset_addr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t offset_addr
     * }
     */
    public static final OfShort offset_addr$layout() {
        return offset_addr$LAYOUT;
    }

    private static final long offset_addr$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t offset_addr
     * }
     */
    public static final long offset_addr$offset() {
        return offset_addr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t offset_addr
     * }
     */
    public static short offset_addr(MemorySegment struct) {
        return struct.get(offset_addr$LAYOUT, offset_addr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t offset_addr
     * }
     */
    public static void offset_addr(MemorySegment struct, short fieldValue) {
        struct.set(offset_addr$LAYOUT, offset_addr$OFFSET, fieldValue);
    }

    private static final OfByte offset_bits$LAYOUT = (OfByte)$LAYOUT.select(groupElement("offset_bits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t offset_bits
     * }
     */
    public static final OfByte offset_bits$layout() {
        return offset_bits$LAYOUT;
    }

    private static final long offset_bits$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t offset_bits
     * }
     */
    public static final long offset_bits$offset() {
        return offset_bits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t offset_bits
     * }
     */
    public static byte offset_bits(MemorySegment struct) {
        return struct.get(offset_bits$LAYOUT, offset_bits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t offset_bits
     * }
     */
    public static void offset_bits(MemorySegment struct, byte fieldValue) {
        struct.set(offset_bits$LAYOUT, offset_bits$OFFSET, fieldValue);
    }

    private static final OfByte inc_dec$LAYOUT = (OfByte)$LAYOUT.select(groupElement("inc_dec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t inc_dec
     * }
     */
    public static final OfByte inc_dec$layout() {
        return inc_dec$LAYOUT;
    }

    private static final long inc_dec$OFFSET = 13;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t inc_dec
     * }
     */
    public static final long inc_dec$offset() {
        return inc_dec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t inc_dec
     * }
     */
    public static byte inc_dec(MemorySegment struct) {
        return struct.get(inc_dec$LAYOUT, inc_dec$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t inc_dec
     * }
     */
    public static void inc_dec(MemorySegment struct, byte fieldValue) {
        struct.set(inc_dec$LAYOUT, inc_dec$OFFSET, fieldValue);
    }

    private static final OfByte flags$LAYOUT = (OfByte)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t flags
     * }
     */
    public static final OfByte flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t flags
     * }
     */
    public static byte flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t flags
     * }
     */
    public static void flags(MemorySegment struct, byte fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

