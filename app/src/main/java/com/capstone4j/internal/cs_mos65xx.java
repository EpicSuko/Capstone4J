// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cs_mos65xx {
 *     mos65xx_address_mode am;
 *     bool modifies_flags;
 *     uint8_t op_count;
 *     cs_mos65xx_op operands[3];
 * }
 * }
 */
public class cs_mos65xx {

    cs_mos65xx() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        capstone_h.C_INT.withName("am"),
        capstone_h.C_BOOL.withName("modifies_flags"),
        capstone_h.C_CHAR.withName("op_count"),
        MemoryLayout.paddingLayout(2),
        MemoryLayout.sequenceLayout(3, cs_mos65xx_op.layout()).withName("operands")
    ).withName("cs_mos65xx");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt am$LAYOUT = (OfInt)$LAYOUT.select(groupElement("am"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mos65xx_address_mode am
     * }
     */
    public static final OfInt am$layout() {
        return am$LAYOUT;
    }

    private static final long am$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mos65xx_address_mode am
     * }
     */
    public static final long am$offset() {
        return am$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mos65xx_address_mode am
     * }
     */
    public static int am(MemorySegment struct) {
        return struct.get(am$LAYOUT, am$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mos65xx_address_mode am
     * }
     */
    public static void am(MemorySegment struct, int fieldValue) {
        struct.set(am$LAYOUT, am$OFFSET, fieldValue);
    }

    private static final OfBoolean modifies_flags$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("modifies_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool modifies_flags
     * }
     */
    public static final OfBoolean modifies_flags$layout() {
        return modifies_flags$LAYOUT;
    }

    private static final long modifies_flags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool modifies_flags
     * }
     */
    public static final long modifies_flags$offset() {
        return modifies_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool modifies_flags
     * }
     */
    public static boolean modifies_flags(MemorySegment struct) {
        return struct.get(modifies_flags$LAYOUT, modifies_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool modifies_flags
     * }
     */
    public static void modifies_flags(MemorySegment struct, boolean fieldValue) {
        struct.set(modifies_flags$LAYOUT, modifies_flags$OFFSET, fieldValue);
    }

    private static final OfByte op_count$LAYOUT = (OfByte)$LAYOUT.select(groupElement("op_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t op_count
     * }
     */
    public static final OfByte op_count$layout() {
        return op_count$LAYOUT;
    }

    private static final long op_count$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t op_count
     * }
     */
    public static final long op_count$offset() {
        return op_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t op_count
     * }
     */
    public static byte op_count(MemorySegment struct) {
        return struct.get(op_count$LAYOUT, op_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t op_count
     * }
     */
    public static void op_count(MemorySegment struct, byte fieldValue) {
        struct.set(op_count$LAYOUT, op_count$OFFSET, fieldValue);
    }

    private static final SequenceLayout operands$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("operands"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_mos65xx_op operands[3]
     * }
     */
    public static final SequenceLayout operands$layout() {
        return operands$LAYOUT;
    }

    private static final long operands$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_mos65xx_op operands[3]
     * }
     */
    public static final long operands$offset() {
        return operands$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_mos65xx_op operands[3]
     * }
     */
    public static MemorySegment operands(MemorySegment struct) {
        return struct.asSlice(operands$OFFSET, operands$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_mos65xx_op operands[3]
     * }
     */
    public static void operands(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, operands$OFFSET, operands$LAYOUT.byteSize());
    }

    private static long[] operands$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * cs_mos65xx_op operands[3]
     * }
     */
    public static long[] operands$dimensions() {
        return operands$DIMS;
    }
    private static final MethodHandle operands$ELEM_HANDLE = operands$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * cs_mos65xx_op operands[3]
     * }
     */
    public static MemorySegment operands(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)operands$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * cs_mos65xx_op operands[3]
     * }
     */
    public static void operands(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, operands(struct, index0), 0L, cs_mos65xx_op.layout().byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

