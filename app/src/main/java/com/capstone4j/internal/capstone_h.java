// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class capstone_h extends capstone_h_1 {

    capstone_h() {
        // Should not be called directly
    }
    private static final int XTENSA_INS_EE_VMULAS_U8_QACC_LD_IP = (int)1066L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VMULAS_U8_QACC_LD_IP = 1066
     * }
     */
    public static int XTENSA_INS_EE_VMULAS_U8_QACC_LD_IP() {
        return XTENSA_INS_EE_VMULAS_U8_QACC_LD_IP;
    }
    private static final int XTENSA_INS_EE_VMULAS_U8_QACC_LD_IP_QUP = (int)1067L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VMULAS_U8_QACC_LD_IP_QUP = 1067
     * }
     */
    public static int XTENSA_INS_EE_VMULAS_U8_QACC_LD_IP_QUP() {
        return XTENSA_INS_EE_VMULAS_U8_QACC_LD_IP_QUP;
    }
    private static final int XTENSA_INS_EE_VMULAS_U8_QACC_LD_XP = (int)1068L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VMULAS_U8_QACC_LD_XP = 1068
     * }
     */
    public static int XTENSA_INS_EE_VMULAS_U8_QACC_LD_XP() {
        return XTENSA_INS_EE_VMULAS_U8_QACC_LD_XP;
    }
    private static final int XTENSA_INS_EE_VMULAS_U8_QACC_LD_XP_QUP = (int)1069L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VMULAS_U8_QACC_LD_XP_QUP = 1069
     * }
     */
    public static int XTENSA_INS_EE_VMULAS_U8_QACC_LD_XP_QUP() {
        return XTENSA_INS_EE_VMULAS_U8_QACC_LD_XP_QUP;
    }
    private static final int XTENSA_INS_EE_VMUL_S16 = (int)1070L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VMUL_S16 = 1070
     * }
     */
    public static int XTENSA_INS_EE_VMUL_S16() {
        return XTENSA_INS_EE_VMUL_S16;
    }
    private static final int XTENSA_INS_EE_VMUL_S16_LD_INCP = (int)1071L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VMUL_S16_LD_INCP = 1071
     * }
     */
    public static int XTENSA_INS_EE_VMUL_S16_LD_INCP() {
        return XTENSA_INS_EE_VMUL_S16_LD_INCP;
    }
    private static final int XTENSA_INS_EE_VMUL_S16_ST_INCP = (int)1072L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VMUL_S16_ST_INCP = 1072
     * }
     */
    public static int XTENSA_INS_EE_VMUL_S16_ST_INCP() {
        return XTENSA_INS_EE_VMUL_S16_ST_INCP;
    }
    private static final int XTENSA_INS_EE_VMUL_S8 = (int)1073L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VMUL_S8 = 1073
     * }
     */
    public static int XTENSA_INS_EE_VMUL_S8() {
        return XTENSA_INS_EE_VMUL_S8;
    }
    private static final int XTENSA_INS_EE_VMUL_S8_LD_INCP = (int)1074L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VMUL_S8_LD_INCP = 1074
     * }
     */
    public static int XTENSA_INS_EE_VMUL_S8_LD_INCP() {
        return XTENSA_INS_EE_VMUL_S8_LD_INCP;
    }
    private static final int XTENSA_INS_EE_VMUL_S8_ST_INCP = (int)1075L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VMUL_S8_ST_INCP = 1075
     * }
     */
    public static int XTENSA_INS_EE_VMUL_S8_ST_INCP() {
        return XTENSA_INS_EE_VMUL_S8_ST_INCP;
    }
    private static final int XTENSA_INS_EE_VMUL_U16 = (int)1076L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VMUL_U16 = 1076
     * }
     */
    public static int XTENSA_INS_EE_VMUL_U16() {
        return XTENSA_INS_EE_VMUL_U16;
    }
    private static final int XTENSA_INS_EE_VMUL_U16_LD_INCP = (int)1077L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VMUL_U16_LD_INCP = 1077
     * }
     */
    public static int XTENSA_INS_EE_VMUL_U16_LD_INCP() {
        return XTENSA_INS_EE_VMUL_U16_LD_INCP;
    }
    private static final int XTENSA_INS_EE_VMUL_U16_ST_INCP = (int)1078L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VMUL_U16_ST_INCP = 1078
     * }
     */
    public static int XTENSA_INS_EE_VMUL_U16_ST_INCP() {
        return XTENSA_INS_EE_VMUL_U16_ST_INCP;
    }
    private static final int XTENSA_INS_EE_VMUL_U8 = (int)1079L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VMUL_U8 = 1079
     * }
     */
    public static int XTENSA_INS_EE_VMUL_U8() {
        return XTENSA_INS_EE_VMUL_U8;
    }
    private static final int XTENSA_INS_EE_VMUL_U8_LD_INCP = (int)1080L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VMUL_U8_LD_INCP = 1080
     * }
     */
    public static int XTENSA_INS_EE_VMUL_U8_LD_INCP() {
        return XTENSA_INS_EE_VMUL_U8_LD_INCP;
    }
    private static final int XTENSA_INS_EE_VMUL_U8_ST_INCP = (int)1081L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VMUL_U8_ST_INCP = 1081
     * }
     */
    public static int XTENSA_INS_EE_VMUL_U8_ST_INCP() {
        return XTENSA_INS_EE_VMUL_U8_ST_INCP;
    }
    private static final int XTENSA_INS_EE_VPRELU_S16 = (int)1082L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VPRELU_S16 = 1082
     * }
     */
    public static int XTENSA_INS_EE_VPRELU_S16() {
        return XTENSA_INS_EE_VPRELU_S16;
    }
    private static final int XTENSA_INS_EE_VPRELU_S8 = (int)1083L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VPRELU_S8 = 1083
     * }
     */
    public static int XTENSA_INS_EE_VPRELU_S8() {
        return XTENSA_INS_EE_VPRELU_S8;
    }
    private static final int XTENSA_INS_EE_VRELU_S16 = (int)1084L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VRELU_S16 = 1084
     * }
     */
    public static int XTENSA_INS_EE_VRELU_S16() {
        return XTENSA_INS_EE_VRELU_S16;
    }
    private static final int XTENSA_INS_EE_VRELU_S8 = (int)1085L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VRELU_S8 = 1085
     * }
     */
    public static int XTENSA_INS_EE_VRELU_S8() {
        return XTENSA_INS_EE_VRELU_S8;
    }
    private static final int XTENSA_INS_EE_VSL_32 = (int)1086L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VSL_32 = 1086
     * }
     */
    public static int XTENSA_INS_EE_VSL_32() {
        return XTENSA_INS_EE_VSL_32;
    }
    private static final int XTENSA_INS_EE_VSMULAS_S16_QACC = (int)1087L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VSMULAS_S16_QACC = 1087
     * }
     */
    public static int XTENSA_INS_EE_VSMULAS_S16_QACC() {
        return XTENSA_INS_EE_VSMULAS_S16_QACC;
    }
    private static final int XTENSA_INS_EE_VSMULAS_S16_QACC_LD_INCP = (int)1088L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VSMULAS_S16_QACC_LD_INCP = 1088
     * }
     */
    public static int XTENSA_INS_EE_VSMULAS_S16_QACC_LD_INCP() {
        return XTENSA_INS_EE_VSMULAS_S16_QACC_LD_INCP;
    }
    private static final int XTENSA_INS_EE_VSMULAS_S8_QACC = (int)1089L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VSMULAS_S8_QACC = 1089
     * }
     */
    public static int XTENSA_INS_EE_VSMULAS_S8_QACC() {
        return XTENSA_INS_EE_VSMULAS_S8_QACC;
    }
    private static final int XTENSA_INS_EE_VSMULAS_S8_QACC_LD_INCP = (int)1090L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VSMULAS_S8_QACC_LD_INCP = 1090
     * }
     */
    public static int XTENSA_INS_EE_VSMULAS_S8_QACC_LD_INCP() {
        return XTENSA_INS_EE_VSMULAS_S8_QACC_LD_INCP;
    }
    private static final int XTENSA_INS_EE_VSR_32 = (int)1091L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VSR_32 = 1091
     * }
     */
    public static int XTENSA_INS_EE_VSR_32() {
        return XTENSA_INS_EE_VSR_32;
    }
    private static final int XTENSA_INS_EE_VST_128_IP = (int)1092L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VST_128_IP = 1092
     * }
     */
    public static int XTENSA_INS_EE_VST_128_IP() {
        return XTENSA_INS_EE_VST_128_IP;
    }
    private static final int XTENSA_INS_EE_VST_128_XP = (int)1093L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VST_128_XP = 1093
     * }
     */
    public static int XTENSA_INS_EE_VST_128_XP() {
        return XTENSA_INS_EE_VST_128_XP;
    }
    private static final int XTENSA_INS_EE_VST_H_64_IP = (int)1094L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VST_H_64_IP = 1094
     * }
     */
    public static int XTENSA_INS_EE_VST_H_64_IP() {
        return XTENSA_INS_EE_VST_H_64_IP;
    }
    private static final int XTENSA_INS_EE_VST_H_64_XP = (int)1095L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VST_H_64_XP = 1095
     * }
     */
    public static int XTENSA_INS_EE_VST_H_64_XP() {
        return XTENSA_INS_EE_VST_H_64_XP;
    }
    private static final int XTENSA_INS_EE_VST_L_64_IP = (int)1096L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VST_L_64_IP = 1096
     * }
     */
    public static int XTENSA_INS_EE_VST_L_64_IP() {
        return XTENSA_INS_EE_VST_L_64_IP;
    }
    private static final int XTENSA_INS_EE_VST_L_64_XP = (int)1097L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VST_L_64_XP = 1097
     * }
     */
    public static int XTENSA_INS_EE_VST_L_64_XP() {
        return XTENSA_INS_EE_VST_L_64_XP;
    }
    private static final int XTENSA_INS_EE_VSUBS_S16 = (int)1098L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VSUBS_S16 = 1098
     * }
     */
    public static int XTENSA_INS_EE_VSUBS_S16() {
        return XTENSA_INS_EE_VSUBS_S16;
    }
    private static final int XTENSA_INS_EE_VSUBS_S16_LD_INCP = (int)1099L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VSUBS_S16_LD_INCP = 1099
     * }
     */
    public static int XTENSA_INS_EE_VSUBS_S16_LD_INCP() {
        return XTENSA_INS_EE_VSUBS_S16_LD_INCP;
    }
    private static final int XTENSA_INS_EE_VSUBS_S16_ST_INCP = (int)1100L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VSUBS_S16_ST_INCP = 1100
     * }
     */
    public static int XTENSA_INS_EE_VSUBS_S16_ST_INCP() {
        return XTENSA_INS_EE_VSUBS_S16_ST_INCP;
    }
    private static final int XTENSA_INS_EE_VSUBS_S32 = (int)1101L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VSUBS_S32 = 1101
     * }
     */
    public static int XTENSA_INS_EE_VSUBS_S32() {
        return XTENSA_INS_EE_VSUBS_S32;
    }
    private static final int XTENSA_INS_EE_VSUBS_S32_LD_INCP = (int)1102L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VSUBS_S32_LD_INCP = 1102
     * }
     */
    public static int XTENSA_INS_EE_VSUBS_S32_LD_INCP() {
        return XTENSA_INS_EE_VSUBS_S32_LD_INCP;
    }
    private static final int XTENSA_INS_EE_VSUBS_S32_ST_INCP = (int)1103L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VSUBS_S32_ST_INCP = 1103
     * }
     */
    public static int XTENSA_INS_EE_VSUBS_S32_ST_INCP() {
        return XTENSA_INS_EE_VSUBS_S32_ST_INCP;
    }
    private static final int XTENSA_INS_EE_VSUBS_S8 = (int)1104L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VSUBS_S8 = 1104
     * }
     */
    public static int XTENSA_INS_EE_VSUBS_S8() {
        return XTENSA_INS_EE_VSUBS_S8;
    }
    private static final int XTENSA_INS_EE_VSUBS_S8_LD_INCP = (int)1105L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VSUBS_S8_LD_INCP = 1105
     * }
     */
    public static int XTENSA_INS_EE_VSUBS_S8_LD_INCP() {
        return XTENSA_INS_EE_VSUBS_S8_LD_INCP;
    }
    private static final int XTENSA_INS_EE_VSUBS_S8_ST_INCP = (int)1106L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VSUBS_S8_ST_INCP = 1106
     * }
     */
    public static int XTENSA_INS_EE_VSUBS_S8_ST_INCP() {
        return XTENSA_INS_EE_VSUBS_S8_ST_INCP;
    }
    private static final int XTENSA_INS_EE_VUNZIP_16 = (int)1107L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VUNZIP_16 = 1107
     * }
     */
    public static int XTENSA_INS_EE_VUNZIP_16() {
        return XTENSA_INS_EE_VUNZIP_16;
    }
    private static final int XTENSA_INS_EE_VUNZIP_32 = (int)1108L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VUNZIP_32 = 1108
     * }
     */
    public static int XTENSA_INS_EE_VUNZIP_32() {
        return XTENSA_INS_EE_VUNZIP_32;
    }
    private static final int XTENSA_INS_EE_VUNZIP_8 = (int)1109L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VUNZIP_8 = 1109
     * }
     */
    public static int XTENSA_INS_EE_VUNZIP_8() {
        return XTENSA_INS_EE_VUNZIP_8;
    }
    private static final int XTENSA_INS_EE_VZIP_16 = (int)1110L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VZIP_16 = 1110
     * }
     */
    public static int XTENSA_INS_EE_VZIP_16() {
        return XTENSA_INS_EE_VZIP_16;
    }
    private static final int XTENSA_INS_EE_VZIP_32 = (int)1111L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VZIP_32 = 1111
     * }
     */
    public static int XTENSA_INS_EE_VZIP_32() {
        return XTENSA_INS_EE_VZIP_32;
    }
    private static final int XTENSA_INS_EE_VZIP_8 = (int)1112L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_VZIP_8 = 1112
     * }
     */
    public static int XTENSA_INS_EE_VZIP_8() {
        return XTENSA_INS_EE_VZIP_8;
    }
    private static final int XTENSA_INS_EE_WR_MASK_GPIO_OUT = (int)1113L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_WR_MASK_GPIO_OUT = 1113
     * }
     */
    public static int XTENSA_INS_EE_WR_MASK_GPIO_OUT() {
        return XTENSA_INS_EE_WR_MASK_GPIO_OUT;
    }
    private static final int XTENSA_INS_EE_XORQ = (int)1114L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_XORQ = 1114
     * }
     */
    public static int XTENSA_INS_EE_XORQ() {
        return XTENSA_INS_EE_XORQ;
    }
    private static final int XTENSA_INS_EE_ZERO_ACCX = (int)1115L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_ZERO_ACCX = 1115
     * }
     */
    public static int XTENSA_INS_EE_ZERO_ACCX() {
        return XTENSA_INS_EE_ZERO_ACCX;
    }
    private static final int XTENSA_INS_EE_ZERO_Q = (int)1116L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_ZERO_Q = 1116
     * }
     */
    public static int XTENSA_INS_EE_ZERO_Q() {
        return XTENSA_INS_EE_ZERO_Q;
    }
    private static final int XTENSA_INS_EE_ZERO_QACC = (int)1117L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EE_ZERO_QACC = 1117
     * }
     */
    public static int XTENSA_INS_EE_ZERO_QACC() {
        return XTENSA_INS_EE_ZERO_QACC;
    }
    private static final int XTENSA_INS_ENTRY = (int)1118L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_ENTRY = 1118
     * }
     */
    public static int XTENSA_INS_ENTRY() {
        return XTENSA_INS_ENTRY;
    }
    private static final int XTENSA_INS_ESYNC = (int)1119L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_ESYNC = 1119
     * }
     */
    public static int XTENSA_INS_ESYNC() {
        return XTENSA_INS_ESYNC;
    }
    private static final int XTENSA_INS_EXCW = (int)1120L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EXCW = 1120
     * }
     */
    public static int XTENSA_INS_EXCW() {
        return XTENSA_INS_EXCW;
    }
    private static final int XTENSA_INS_EXTUI = (int)1121L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EXTUI = 1121
     * }
     */
    public static int XTENSA_INS_EXTUI() {
        return XTENSA_INS_EXTUI;
    }
    private static final int XTENSA_INS_EXTW = (int)1122L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_EXTW = 1122
     * }
     */
    public static int XTENSA_INS_EXTW() {
        return XTENSA_INS_EXTW;
    }
    private static final int XTENSA_INS_FLOAT_S = (int)1123L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_FLOAT_S = 1123
     * }
     */
    public static int XTENSA_INS_FLOAT_S() {
        return XTENSA_INS_FLOAT_S;
    }
    private static final int XTENSA_INS_FLOOR_S = (int)1124L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_FLOOR_S = 1124
     * }
     */
    public static int XTENSA_INS_FLOOR_S() {
        return XTENSA_INS_FLOOR_S;
    }
    private static final int XTENSA_INS_GET_GPIO_IN = (int)1125L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_GET_GPIO_IN = 1125
     * }
     */
    public static int XTENSA_INS_GET_GPIO_IN() {
        return XTENSA_INS_GET_GPIO_IN;
    }
    private static final int XTENSA_INS_ILL = (int)1126L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_ILL = 1126
     * }
     */
    public static int XTENSA_INS_ILL() {
        return XTENSA_INS_ILL;
    }
    private static final int XTENSA_INS_ILL_N = (int)1127L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_ILL_N = 1127
     * }
     */
    public static int XTENSA_INS_ILL_N() {
        return XTENSA_INS_ILL_N;
    }
    private static final int XTENSA_INS_ISYNC = (int)1128L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_ISYNC = 1128
     * }
     */
    public static int XTENSA_INS_ISYNC() {
        return XTENSA_INS_ISYNC;
    }
    private static final int XTENSA_INS_J = (int)1129L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_J = 1129
     * }
     */
    public static int XTENSA_INS_J() {
        return XTENSA_INS_J;
    }
    private static final int XTENSA_INS_JX = (int)1130L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_JX = 1130
     * }
     */
    public static int XTENSA_INS_JX() {
        return XTENSA_INS_JX;
    }
    private static final int XTENSA_INS_L16SI = (int)1131L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_L16SI = 1131
     * }
     */
    public static int XTENSA_INS_L16SI() {
        return XTENSA_INS_L16SI;
    }
    private static final int XTENSA_INS_L16UI = (int)1132L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_L16UI = 1132
     * }
     */
    public static int XTENSA_INS_L16UI() {
        return XTENSA_INS_L16UI;
    }
    private static final int XTENSA_INS_L32E = (int)1133L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_L32E = 1133
     * }
     */
    public static int XTENSA_INS_L32E() {
        return XTENSA_INS_L32E;
    }
    private static final int XTENSA_INS_L32I = (int)1134L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_L32I = 1134
     * }
     */
    public static int XTENSA_INS_L32I() {
        return XTENSA_INS_L32I;
    }
    private static final int XTENSA_INS_L32I_N = (int)1135L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_L32I_N = 1135
     * }
     */
    public static int XTENSA_INS_L32I_N() {
        return XTENSA_INS_L32I_N;
    }
    private static final int XTENSA_INS_L32R = (int)1136L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_L32R = 1136
     * }
     */
    public static int XTENSA_INS_L32R() {
        return XTENSA_INS_L32R;
    }
    private static final int XTENSA_INS_L8UI = (int)1137L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_L8UI = 1137
     * }
     */
    public static int XTENSA_INS_L8UI() {
        return XTENSA_INS_L8UI;
    }
    private static final int XTENSA_INS_LDDEC = (int)1138L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_LDDEC = 1138
     * }
     */
    public static int XTENSA_INS_LDDEC() {
        return XTENSA_INS_LDDEC;
    }
    private static final int XTENSA_INS_LDINC = (int)1139L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_LDINC = 1139
     * }
     */
    public static int XTENSA_INS_LDINC() {
        return XTENSA_INS_LDINC;
    }
    private static final int XTENSA_INS_LOOP = (int)1140L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_LOOP = 1140
     * }
     */
    public static int XTENSA_INS_LOOP() {
        return XTENSA_INS_LOOP;
    }
    private static final int XTENSA_INS_LOOPGTZ = (int)1141L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_LOOPGTZ = 1141
     * }
     */
    public static int XTENSA_INS_LOOPGTZ() {
        return XTENSA_INS_LOOPGTZ;
    }
    private static final int XTENSA_INS_LOOPNEZ = (int)1142L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_LOOPNEZ = 1142
     * }
     */
    public static int XTENSA_INS_LOOPNEZ() {
        return XTENSA_INS_LOOPNEZ;
    }
    private static final int XTENSA_INS_LSI = (int)1143L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_LSI = 1143
     * }
     */
    public static int XTENSA_INS_LSI() {
        return XTENSA_INS_LSI;
    }
    private static final int XTENSA_INS_LSIP = (int)1144L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_LSIP = 1144
     * }
     */
    public static int XTENSA_INS_LSIP() {
        return XTENSA_INS_LSIP;
    }
    private static final int XTENSA_INS_LSX = (int)1145L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_LSX = 1145
     * }
     */
    public static int XTENSA_INS_LSX() {
        return XTENSA_INS_LSX;
    }
    private static final int XTENSA_INS_LSXP = (int)1146L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_LSXP = 1146
     * }
     */
    public static int XTENSA_INS_LSXP() {
        return XTENSA_INS_LSXP;
    }
    private static final int XTENSA_INS_MADDN_S = (int)1147L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MADDN_S = 1147
     * }
     */
    public static int XTENSA_INS_MADDN_S() {
        return XTENSA_INS_MADDN_S;
    }
    private static final int XTENSA_INS_MADD_S = (int)1148L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MADD_S = 1148
     * }
     */
    public static int XTENSA_INS_MADD_S() {
        return XTENSA_INS_MADD_S;
    }
    private static final int XTENSA_INS_MAX = (int)1149L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MAX = 1149
     * }
     */
    public static int XTENSA_INS_MAX() {
        return XTENSA_INS_MAX;
    }
    private static final int XTENSA_INS_MAXU = (int)1150L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MAXU = 1150
     * }
     */
    public static int XTENSA_INS_MAXU() {
        return XTENSA_INS_MAXU;
    }
    private static final int XTENSA_INS_MEMW = (int)1151L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MEMW = 1151
     * }
     */
    public static int XTENSA_INS_MEMW() {
        return XTENSA_INS_MEMW;
    }
    private static final int XTENSA_INS_MIN = (int)1152L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MIN = 1152
     * }
     */
    public static int XTENSA_INS_MIN() {
        return XTENSA_INS_MIN;
    }
    private static final int XTENSA_INS_MINU = (int)1153L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MINU = 1153
     * }
     */
    public static int XTENSA_INS_MINU() {
        return XTENSA_INS_MINU;
    }
    private static final int XTENSA_INS_MKDADJ_S = (int)1154L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MKDADJ_S = 1154
     * }
     */
    public static int XTENSA_INS_MKDADJ_S() {
        return XTENSA_INS_MKDADJ_S;
    }
    private static final int XTENSA_INS_MKSADJ_S = (int)1155L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MKSADJ_S = 1155
     * }
     */
    public static int XTENSA_INS_MKSADJ_S() {
        return XTENSA_INS_MKSADJ_S;
    }
    private static final int XTENSA_INS_MOVEQZ = (int)1156L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MOVEQZ = 1156
     * }
     */
    public static int XTENSA_INS_MOVEQZ() {
        return XTENSA_INS_MOVEQZ;
    }
    private static final int XTENSA_INS_MOVEQZ_S = (int)1157L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MOVEQZ_S = 1157
     * }
     */
    public static int XTENSA_INS_MOVEQZ_S() {
        return XTENSA_INS_MOVEQZ_S;
    }
    private static final int XTENSA_INS_MOVF = (int)1158L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MOVF = 1158
     * }
     */
    public static int XTENSA_INS_MOVF() {
        return XTENSA_INS_MOVF;
    }
    private static final int XTENSA_INS_MOVF_S = (int)1159L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MOVF_S = 1159
     * }
     */
    public static int XTENSA_INS_MOVF_S() {
        return XTENSA_INS_MOVF_S;
    }
    private static final int XTENSA_INS_MOVGEZ = (int)1160L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MOVGEZ = 1160
     * }
     */
    public static int XTENSA_INS_MOVGEZ() {
        return XTENSA_INS_MOVGEZ;
    }
    private static final int XTENSA_INS_MOVGEZ_S = (int)1161L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MOVGEZ_S = 1161
     * }
     */
    public static int XTENSA_INS_MOVGEZ_S() {
        return XTENSA_INS_MOVGEZ_S;
    }
    private static final int XTENSA_INS_MOVI = (int)1162L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MOVI = 1162
     * }
     */
    public static int XTENSA_INS_MOVI() {
        return XTENSA_INS_MOVI;
    }
    private static final int XTENSA_INS_MOVI_N = (int)1163L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MOVI_N = 1163
     * }
     */
    public static int XTENSA_INS_MOVI_N() {
        return XTENSA_INS_MOVI_N;
    }
    private static final int XTENSA_INS_MOVLTZ = (int)1164L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MOVLTZ = 1164
     * }
     */
    public static int XTENSA_INS_MOVLTZ() {
        return XTENSA_INS_MOVLTZ;
    }
    private static final int XTENSA_INS_MOVLTZ_S = (int)1165L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MOVLTZ_S = 1165
     * }
     */
    public static int XTENSA_INS_MOVLTZ_S() {
        return XTENSA_INS_MOVLTZ_S;
    }
    private static final int XTENSA_INS_MOVNEZ = (int)1166L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MOVNEZ = 1166
     * }
     */
    public static int XTENSA_INS_MOVNEZ() {
        return XTENSA_INS_MOVNEZ;
    }
    private static final int XTENSA_INS_MOVNEZ_S = (int)1167L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MOVNEZ_S = 1167
     * }
     */
    public static int XTENSA_INS_MOVNEZ_S() {
        return XTENSA_INS_MOVNEZ_S;
    }
    private static final int XTENSA_INS_MOVSP = (int)1168L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MOVSP = 1168
     * }
     */
    public static int XTENSA_INS_MOVSP() {
        return XTENSA_INS_MOVSP;
    }
    private static final int XTENSA_INS_MOVT = (int)1169L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MOVT = 1169
     * }
     */
    public static int XTENSA_INS_MOVT() {
        return XTENSA_INS_MOVT;
    }
    private static final int XTENSA_INS_MOVT_S = (int)1170L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MOVT_S = 1170
     * }
     */
    public static int XTENSA_INS_MOVT_S() {
        return XTENSA_INS_MOVT_S;
    }
    private static final int XTENSA_INS_MOV_N = (int)1171L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MOV_N = 1171
     * }
     */
    public static int XTENSA_INS_MOV_N() {
        return XTENSA_INS_MOV_N;
    }
    private static final int XTENSA_INS_MOV_S = (int)1172L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MOV_S = 1172
     * }
     */
    public static int XTENSA_INS_MOV_S() {
        return XTENSA_INS_MOV_S;
    }
    private static final int XTENSA_INS_MSUB_S = (int)1173L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MSUB_S = 1173
     * }
     */
    public static int XTENSA_INS_MSUB_S() {
        return XTENSA_INS_MSUB_S;
    }
    private static final int XTENSA_INS_MUL16S = (int)1174L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL16S = 1174
     * }
     */
    public static int XTENSA_INS_MUL16S() {
        return XTENSA_INS_MUL16S;
    }
    private static final int XTENSA_INS_MUL16U = (int)1175L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL16U = 1175
     * }
     */
    public static int XTENSA_INS_MUL16U() {
        return XTENSA_INS_MUL16U;
    }
    private static final int XTENSA_INS_MULA_AA_HH = (int)1176L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_AA_HH = 1176
     * }
     */
    public static int XTENSA_INS_MULA_AA_HH() {
        return XTENSA_INS_MULA_AA_HH;
    }
    private static final int XTENSA_INS_MULA_AA_HL = (int)1177L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_AA_HL = 1177
     * }
     */
    public static int XTENSA_INS_MULA_AA_HL() {
        return XTENSA_INS_MULA_AA_HL;
    }
    private static final int XTENSA_INS_MULA_AA_LH = (int)1178L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_AA_LH = 1178
     * }
     */
    public static int XTENSA_INS_MULA_AA_LH() {
        return XTENSA_INS_MULA_AA_LH;
    }
    private static final int XTENSA_INS_MULA_AA_LL = (int)1179L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_AA_LL = 1179
     * }
     */
    public static int XTENSA_INS_MULA_AA_LL() {
        return XTENSA_INS_MULA_AA_LL;
    }
    private static final int XTENSA_INS_MULA_AD_HH = (int)1180L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_AD_HH = 1180
     * }
     */
    public static int XTENSA_INS_MULA_AD_HH() {
        return XTENSA_INS_MULA_AD_HH;
    }
    private static final int XTENSA_INS_MULA_AD_HL = (int)1181L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_AD_HL = 1181
     * }
     */
    public static int XTENSA_INS_MULA_AD_HL() {
        return XTENSA_INS_MULA_AD_HL;
    }
    private static final int XTENSA_INS_MULA_AD_LH = (int)1182L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_AD_LH = 1182
     * }
     */
    public static int XTENSA_INS_MULA_AD_LH() {
        return XTENSA_INS_MULA_AD_LH;
    }
    private static final int XTENSA_INS_MULA_AD_LL = (int)1183L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_AD_LL = 1183
     * }
     */
    public static int XTENSA_INS_MULA_AD_LL() {
        return XTENSA_INS_MULA_AD_LL;
    }
    private static final int XTENSA_INS_MULA_DA_HH = (int)1184L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DA_HH = 1184
     * }
     */
    public static int XTENSA_INS_MULA_DA_HH() {
        return XTENSA_INS_MULA_DA_HH;
    }
    private static final int XTENSA_INS_MULA_DA_HH_LDDEC = (int)1185L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DA_HH_LDDEC = 1185
     * }
     */
    public static int XTENSA_INS_MULA_DA_HH_LDDEC() {
        return XTENSA_INS_MULA_DA_HH_LDDEC;
    }
    private static final int XTENSA_INS_MULA_DA_HH_LDINC = (int)1186L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DA_HH_LDINC = 1186
     * }
     */
    public static int XTENSA_INS_MULA_DA_HH_LDINC() {
        return XTENSA_INS_MULA_DA_HH_LDINC;
    }
    private static final int XTENSA_INS_MULA_DA_HL = (int)1187L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DA_HL = 1187
     * }
     */
    public static int XTENSA_INS_MULA_DA_HL() {
        return XTENSA_INS_MULA_DA_HL;
    }
    private static final int XTENSA_INS_MULA_DA_HL_LDDEC = (int)1188L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DA_HL_LDDEC = 1188
     * }
     */
    public static int XTENSA_INS_MULA_DA_HL_LDDEC() {
        return XTENSA_INS_MULA_DA_HL_LDDEC;
    }
    private static final int XTENSA_INS_MULA_DA_HL_LDINC = (int)1189L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DA_HL_LDINC = 1189
     * }
     */
    public static int XTENSA_INS_MULA_DA_HL_LDINC() {
        return XTENSA_INS_MULA_DA_HL_LDINC;
    }
    private static final int XTENSA_INS_MULA_DA_LH = (int)1190L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DA_LH = 1190
     * }
     */
    public static int XTENSA_INS_MULA_DA_LH() {
        return XTENSA_INS_MULA_DA_LH;
    }
    private static final int XTENSA_INS_MULA_DA_LH_LDDEC = (int)1191L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DA_LH_LDDEC = 1191
     * }
     */
    public static int XTENSA_INS_MULA_DA_LH_LDDEC() {
        return XTENSA_INS_MULA_DA_LH_LDDEC;
    }
    private static final int XTENSA_INS_MULA_DA_LH_LDINC = (int)1192L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DA_LH_LDINC = 1192
     * }
     */
    public static int XTENSA_INS_MULA_DA_LH_LDINC() {
        return XTENSA_INS_MULA_DA_LH_LDINC;
    }
    private static final int XTENSA_INS_MULA_DA_LL = (int)1193L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DA_LL = 1193
     * }
     */
    public static int XTENSA_INS_MULA_DA_LL() {
        return XTENSA_INS_MULA_DA_LL;
    }
    private static final int XTENSA_INS_MULA_DA_LL_LDDEC = (int)1194L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DA_LL_LDDEC = 1194
     * }
     */
    public static int XTENSA_INS_MULA_DA_LL_LDDEC() {
        return XTENSA_INS_MULA_DA_LL_LDDEC;
    }
    private static final int XTENSA_INS_MULA_DA_LL_LDINC = (int)1195L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DA_LL_LDINC = 1195
     * }
     */
    public static int XTENSA_INS_MULA_DA_LL_LDINC() {
        return XTENSA_INS_MULA_DA_LL_LDINC;
    }
    private static final int XTENSA_INS_MULA_DD_HH = (int)1196L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DD_HH = 1196
     * }
     */
    public static int XTENSA_INS_MULA_DD_HH() {
        return XTENSA_INS_MULA_DD_HH;
    }
    private static final int XTENSA_INS_MULA_DD_HH_LDDEC = (int)1197L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DD_HH_LDDEC = 1197
     * }
     */
    public static int XTENSA_INS_MULA_DD_HH_LDDEC() {
        return XTENSA_INS_MULA_DD_HH_LDDEC;
    }
    private static final int XTENSA_INS_MULA_DD_HH_LDINC = (int)1198L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DD_HH_LDINC = 1198
     * }
     */
    public static int XTENSA_INS_MULA_DD_HH_LDINC() {
        return XTENSA_INS_MULA_DD_HH_LDINC;
    }
    private static final int XTENSA_INS_MULA_DD_HL = (int)1199L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DD_HL = 1199
     * }
     */
    public static int XTENSA_INS_MULA_DD_HL() {
        return XTENSA_INS_MULA_DD_HL;
    }
    private static final int XTENSA_INS_MULA_DD_HL_LDDEC = (int)1200L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DD_HL_LDDEC = 1200
     * }
     */
    public static int XTENSA_INS_MULA_DD_HL_LDDEC() {
        return XTENSA_INS_MULA_DD_HL_LDDEC;
    }
    private static final int XTENSA_INS_MULA_DD_HL_LDINC = (int)1201L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DD_HL_LDINC = 1201
     * }
     */
    public static int XTENSA_INS_MULA_DD_HL_LDINC() {
        return XTENSA_INS_MULA_DD_HL_LDINC;
    }
    private static final int XTENSA_INS_MULA_DD_LH = (int)1202L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DD_LH = 1202
     * }
     */
    public static int XTENSA_INS_MULA_DD_LH() {
        return XTENSA_INS_MULA_DD_LH;
    }
    private static final int XTENSA_INS_MULA_DD_LH_LDDEC = (int)1203L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DD_LH_LDDEC = 1203
     * }
     */
    public static int XTENSA_INS_MULA_DD_LH_LDDEC() {
        return XTENSA_INS_MULA_DD_LH_LDDEC;
    }
    private static final int XTENSA_INS_MULA_DD_LH_LDINC = (int)1204L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DD_LH_LDINC = 1204
     * }
     */
    public static int XTENSA_INS_MULA_DD_LH_LDINC() {
        return XTENSA_INS_MULA_DD_LH_LDINC;
    }
    private static final int XTENSA_INS_MULA_DD_LL = (int)1205L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DD_LL = 1205
     * }
     */
    public static int XTENSA_INS_MULA_DD_LL() {
        return XTENSA_INS_MULA_DD_LL;
    }
    private static final int XTENSA_INS_MULA_DD_LL_LDDEC = (int)1206L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DD_LL_LDDEC = 1206
     * }
     */
    public static int XTENSA_INS_MULA_DD_LL_LDDEC() {
        return XTENSA_INS_MULA_DD_LL_LDDEC;
    }
    private static final int XTENSA_INS_MULA_DD_LL_LDINC = (int)1207L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULA_DD_LL_LDINC = 1207
     * }
     */
    public static int XTENSA_INS_MULA_DD_LL_LDINC() {
        return XTENSA_INS_MULA_DD_LL_LDINC;
    }
    private static final int XTENSA_INS_MULL = (int)1208L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULL = 1208
     * }
     */
    public static int XTENSA_INS_MULL() {
        return XTENSA_INS_MULL;
    }
    private static final int XTENSA_INS_MULSH = (int)1209L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULSH = 1209
     * }
     */
    public static int XTENSA_INS_MULSH() {
        return XTENSA_INS_MULSH;
    }
    private static final int XTENSA_INS_MULS_AA_HH = (int)1210L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULS_AA_HH = 1210
     * }
     */
    public static int XTENSA_INS_MULS_AA_HH() {
        return XTENSA_INS_MULS_AA_HH;
    }
    private static final int XTENSA_INS_MULS_AA_HL = (int)1211L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULS_AA_HL = 1211
     * }
     */
    public static int XTENSA_INS_MULS_AA_HL() {
        return XTENSA_INS_MULS_AA_HL;
    }
    private static final int XTENSA_INS_MULS_AA_LH = (int)1212L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULS_AA_LH = 1212
     * }
     */
    public static int XTENSA_INS_MULS_AA_LH() {
        return XTENSA_INS_MULS_AA_LH;
    }
    private static final int XTENSA_INS_MULS_AA_LL = (int)1213L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULS_AA_LL = 1213
     * }
     */
    public static int XTENSA_INS_MULS_AA_LL() {
        return XTENSA_INS_MULS_AA_LL;
    }
    private static final int XTENSA_INS_MULS_AD_HH = (int)1214L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULS_AD_HH = 1214
     * }
     */
    public static int XTENSA_INS_MULS_AD_HH() {
        return XTENSA_INS_MULS_AD_HH;
    }
    private static final int XTENSA_INS_MULS_AD_HL = (int)1215L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULS_AD_HL = 1215
     * }
     */
    public static int XTENSA_INS_MULS_AD_HL() {
        return XTENSA_INS_MULS_AD_HL;
    }
    private static final int XTENSA_INS_MULS_AD_LH = (int)1216L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULS_AD_LH = 1216
     * }
     */
    public static int XTENSA_INS_MULS_AD_LH() {
        return XTENSA_INS_MULS_AD_LH;
    }
    private static final int XTENSA_INS_MULS_AD_LL = (int)1217L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULS_AD_LL = 1217
     * }
     */
    public static int XTENSA_INS_MULS_AD_LL() {
        return XTENSA_INS_MULS_AD_LL;
    }
    private static final int XTENSA_INS_MULS_DA_HH = (int)1218L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULS_DA_HH = 1218
     * }
     */
    public static int XTENSA_INS_MULS_DA_HH() {
        return XTENSA_INS_MULS_DA_HH;
    }
    private static final int XTENSA_INS_MULS_DA_HL = (int)1219L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULS_DA_HL = 1219
     * }
     */
    public static int XTENSA_INS_MULS_DA_HL() {
        return XTENSA_INS_MULS_DA_HL;
    }
    private static final int XTENSA_INS_MULS_DA_LH = (int)1220L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULS_DA_LH = 1220
     * }
     */
    public static int XTENSA_INS_MULS_DA_LH() {
        return XTENSA_INS_MULS_DA_LH;
    }
    private static final int XTENSA_INS_MULS_DA_LL = (int)1221L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULS_DA_LL = 1221
     * }
     */
    public static int XTENSA_INS_MULS_DA_LL() {
        return XTENSA_INS_MULS_DA_LL;
    }
    private static final int XTENSA_INS_MULS_DD_HH = (int)1222L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULS_DD_HH = 1222
     * }
     */
    public static int XTENSA_INS_MULS_DD_HH() {
        return XTENSA_INS_MULS_DD_HH;
    }
    private static final int XTENSA_INS_MULS_DD_HL = (int)1223L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULS_DD_HL = 1223
     * }
     */
    public static int XTENSA_INS_MULS_DD_HL() {
        return XTENSA_INS_MULS_DD_HL;
    }
    private static final int XTENSA_INS_MULS_DD_LH = (int)1224L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULS_DD_LH = 1224
     * }
     */
    public static int XTENSA_INS_MULS_DD_LH() {
        return XTENSA_INS_MULS_DD_LH;
    }
    private static final int XTENSA_INS_MULS_DD_LL = (int)1225L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULS_DD_LL = 1225
     * }
     */
    public static int XTENSA_INS_MULS_DD_LL() {
        return XTENSA_INS_MULS_DD_LL;
    }
    private static final int XTENSA_INS_MULUH = (int)1226L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MULUH = 1226
     * }
     */
    public static int XTENSA_INS_MULUH() {
        return XTENSA_INS_MULUH;
    }
    private static final int XTENSA_INS_MUL_AA_HH = (int)1227L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL_AA_HH = 1227
     * }
     */
    public static int XTENSA_INS_MUL_AA_HH() {
        return XTENSA_INS_MUL_AA_HH;
    }
    private static final int XTENSA_INS_MUL_AA_HL = (int)1228L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL_AA_HL = 1228
     * }
     */
    public static int XTENSA_INS_MUL_AA_HL() {
        return XTENSA_INS_MUL_AA_HL;
    }
    private static final int XTENSA_INS_MUL_AA_LH = (int)1229L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL_AA_LH = 1229
     * }
     */
    public static int XTENSA_INS_MUL_AA_LH() {
        return XTENSA_INS_MUL_AA_LH;
    }
    private static final int XTENSA_INS_MUL_AA_LL = (int)1230L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL_AA_LL = 1230
     * }
     */
    public static int XTENSA_INS_MUL_AA_LL() {
        return XTENSA_INS_MUL_AA_LL;
    }
    private static final int XTENSA_INS_MUL_AD_HH = (int)1231L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL_AD_HH = 1231
     * }
     */
    public static int XTENSA_INS_MUL_AD_HH() {
        return XTENSA_INS_MUL_AD_HH;
    }
    private static final int XTENSA_INS_MUL_AD_HL = (int)1232L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL_AD_HL = 1232
     * }
     */
    public static int XTENSA_INS_MUL_AD_HL() {
        return XTENSA_INS_MUL_AD_HL;
    }
    private static final int XTENSA_INS_MUL_AD_LH = (int)1233L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL_AD_LH = 1233
     * }
     */
    public static int XTENSA_INS_MUL_AD_LH() {
        return XTENSA_INS_MUL_AD_LH;
    }
    private static final int XTENSA_INS_MUL_AD_LL = (int)1234L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL_AD_LL = 1234
     * }
     */
    public static int XTENSA_INS_MUL_AD_LL() {
        return XTENSA_INS_MUL_AD_LL;
    }
    private static final int XTENSA_INS_MUL_DA_HH = (int)1235L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL_DA_HH = 1235
     * }
     */
    public static int XTENSA_INS_MUL_DA_HH() {
        return XTENSA_INS_MUL_DA_HH;
    }
    private static final int XTENSA_INS_MUL_DA_HL = (int)1236L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL_DA_HL = 1236
     * }
     */
    public static int XTENSA_INS_MUL_DA_HL() {
        return XTENSA_INS_MUL_DA_HL;
    }
    private static final int XTENSA_INS_MUL_DA_LH = (int)1237L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL_DA_LH = 1237
     * }
     */
    public static int XTENSA_INS_MUL_DA_LH() {
        return XTENSA_INS_MUL_DA_LH;
    }
    private static final int XTENSA_INS_MUL_DA_LL = (int)1238L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL_DA_LL = 1238
     * }
     */
    public static int XTENSA_INS_MUL_DA_LL() {
        return XTENSA_INS_MUL_DA_LL;
    }
    private static final int XTENSA_INS_MUL_DD_HH = (int)1239L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL_DD_HH = 1239
     * }
     */
    public static int XTENSA_INS_MUL_DD_HH() {
        return XTENSA_INS_MUL_DD_HH;
    }
    private static final int XTENSA_INS_MUL_DD_HL = (int)1240L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL_DD_HL = 1240
     * }
     */
    public static int XTENSA_INS_MUL_DD_HL() {
        return XTENSA_INS_MUL_DD_HL;
    }
    private static final int XTENSA_INS_MUL_DD_LH = (int)1241L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL_DD_LH = 1241
     * }
     */
    public static int XTENSA_INS_MUL_DD_LH() {
        return XTENSA_INS_MUL_DD_LH;
    }
    private static final int XTENSA_INS_MUL_DD_LL = (int)1242L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL_DD_LL = 1242
     * }
     */
    public static int XTENSA_INS_MUL_DD_LL() {
        return XTENSA_INS_MUL_DD_LL;
    }
    private static final int XTENSA_INS_MUL_S = (int)1243L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MUL_S = 1243
     * }
     */
    public static int XTENSA_INS_MUL_S() {
        return XTENSA_INS_MUL_S;
    }
    private static final int XTENSA_INS_NEG = (int)1244L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_NEG = 1244
     * }
     */
    public static int XTENSA_INS_NEG() {
        return XTENSA_INS_NEG;
    }
    private static final int XTENSA_INS_NEG_S = (int)1245L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_NEG_S = 1245
     * }
     */
    public static int XTENSA_INS_NEG_S() {
        return XTENSA_INS_NEG_S;
    }
    private static final int XTENSA_INS_NEXP01_S = (int)1246L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_NEXP01_S = 1246
     * }
     */
    public static int XTENSA_INS_NEXP01_S() {
        return XTENSA_INS_NEXP01_S;
    }
    private static final int XTENSA_INS_NOP = (int)1247L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_NOP = 1247
     * }
     */
    public static int XTENSA_INS_NOP() {
        return XTENSA_INS_NOP;
    }
    private static final int XTENSA_INS_NSA = (int)1248L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_NSA = 1248
     * }
     */
    public static int XTENSA_INS_NSA() {
        return XTENSA_INS_NSA;
    }
    private static final int XTENSA_INS_NSAU = (int)1249L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_NSAU = 1249
     * }
     */
    public static int XTENSA_INS_NSAU() {
        return XTENSA_INS_NSAU;
    }
    private static final int XTENSA_INS_OEQ_S = (int)1250L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_OEQ_S = 1250
     * }
     */
    public static int XTENSA_INS_OEQ_S() {
        return XTENSA_INS_OEQ_S;
    }
    private static final int XTENSA_INS_OLE_S = (int)1251L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_OLE_S = 1251
     * }
     */
    public static int XTENSA_INS_OLE_S() {
        return XTENSA_INS_OLE_S;
    }
    private static final int XTENSA_INS_OLT_S = (int)1252L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_OLT_S = 1252
     * }
     */
    public static int XTENSA_INS_OLT_S() {
        return XTENSA_INS_OLT_S;
    }
    private static final int XTENSA_INS_OR = (int)1253L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_OR = 1253
     * }
     */
    public static int XTENSA_INS_OR() {
        return XTENSA_INS_OR;
    }
    private static final int XTENSA_INS_ORB = (int)1254L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_ORB = 1254
     * }
     */
    public static int XTENSA_INS_ORB() {
        return XTENSA_INS_ORB;
    }
    private static final int XTENSA_INS_ORBC = (int)1255L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_ORBC = 1255
     * }
     */
    public static int XTENSA_INS_ORBC() {
        return XTENSA_INS_ORBC;
    }
    private static final int XTENSA_INS_QUOS = (int)1256L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_QUOS = 1256
     * }
     */
    public static int XTENSA_INS_QUOS() {
        return XTENSA_INS_QUOS;
    }
    private static final int XTENSA_INS_QUOU = (int)1257L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_QUOU = 1257
     * }
     */
    public static int XTENSA_INS_QUOU() {
        return XTENSA_INS_QUOU;
    }
    private static final int XTENSA_INS_RECIP0_S = (int)1258L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RECIP0_S = 1258
     * }
     */
    public static int XTENSA_INS_RECIP0_S() {
        return XTENSA_INS_RECIP0_S;
    }
    private static final int XTENSA_INS_REMS = (int)1259L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_REMS = 1259
     * }
     */
    public static int XTENSA_INS_REMS() {
        return XTENSA_INS_REMS;
    }
    private static final int XTENSA_INS_REMU = (int)1260L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_REMU = 1260
     * }
     */
    public static int XTENSA_INS_REMU() {
        return XTENSA_INS_REMU;
    }
    private static final int XTENSA_INS_RER = (int)1261L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RER = 1261
     * }
     */
    public static int XTENSA_INS_RER() {
        return XTENSA_INS_RER;
    }
    private static final int XTENSA_INS_RET = (int)1262L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RET = 1262
     * }
     */
    public static int XTENSA_INS_RET() {
        return XTENSA_INS_RET;
    }
    private static final int XTENSA_INS_RETW = (int)1263L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RETW = 1263
     * }
     */
    public static int XTENSA_INS_RETW() {
        return XTENSA_INS_RETW;
    }
    private static final int XTENSA_INS_RETW_N = (int)1264L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RETW_N = 1264
     * }
     */
    public static int XTENSA_INS_RETW_N() {
        return XTENSA_INS_RETW_N;
    }
    private static final int XTENSA_INS_RET_N = (int)1265L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RET_N = 1265
     * }
     */
    public static int XTENSA_INS_RET_N() {
        return XTENSA_INS_RET_N;
    }
    private static final int XTENSA_INS_RFDE = (int)1266L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RFDE = 1266
     * }
     */
    public static int XTENSA_INS_RFDE() {
        return XTENSA_INS_RFDE;
    }
    private static final int XTENSA_INS_RFE = (int)1267L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RFE = 1267
     * }
     */
    public static int XTENSA_INS_RFE() {
        return XTENSA_INS_RFE;
    }
    private static final int XTENSA_INS_RFI = (int)1268L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RFI = 1268
     * }
     */
    public static int XTENSA_INS_RFI() {
        return XTENSA_INS_RFI;
    }
    private static final int XTENSA_INS_RFR = (int)1269L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RFR = 1269
     * }
     */
    public static int XTENSA_INS_RFR() {
        return XTENSA_INS_RFR;
    }
    private static final int XTENSA_INS_RFWO = (int)1270L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RFWO = 1270
     * }
     */
    public static int XTENSA_INS_RFWO() {
        return XTENSA_INS_RFWO;
    }
    private static final int XTENSA_INS_RFWU = (int)1271L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RFWU = 1271
     * }
     */
    public static int XTENSA_INS_RFWU() {
        return XTENSA_INS_RFWU;
    }
    private static final int XTENSA_INS_ROTW = (int)1272L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_ROTW = 1272
     * }
     */
    public static int XTENSA_INS_ROTW() {
        return XTENSA_INS_ROTW;
    }
    private static final int XTENSA_INS_ROUND_S = (int)1273L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_ROUND_S = 1273
     * }
     */
    public static int XTENSA_INS_ROUND_S() {
        return XTENSA_INS_ROUND_S;
    }
    private static final int XTENSA_INS_RSIL = (int)1274L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RSIL = 1274
     * }
     */
    public static int XTENSA_INS_RSIL() {
        return XTENSA_INS_RSIL;
    }
    private static final int XTENSA_INS_RSQRT0_S = (int)1275L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RSQRT0_S = 1275
     * }
     */
    public static int XTENSA_INS_RSQRT0_S() {
        return XTENSA_INS_RSQRT0_S;
    }
    private static final int XTENSA_INS_RSR = (int)1276L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RSR = 1276
     * }
     */
    public static int XTENSA_INS_RSR() {
        return XTENSA_INS_RSR;
    }
    private static final int XTENSA_INS_RSYNC = (int)1277L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RSYNC = 1277
     * }
     */
    public static int XTENSA_INS_RSYNC() {
        return XTENSA_INS_RSYNC;
    }
    private static final int XTENSA_INS_RUR = (int)1278L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR = 1278
     * }
     */
    public static int XTENSA_INS_RUR() {
        return XTENSA_INS_RUR;
    }
    private static final int XTENSA_INS_RUR_ACCX_0 = (int)1279L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_ACCX_0 = 1279
     * }
     */
    public static int XTENSA_INS_RUR_ACCX_0() {
        return XTENSA_INS_RUR_ACCX_0;
    }
    private static final int XTENSA_INS_RUR_ACCX_1 = (int)1280L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_ACCX_1 = 1280
     * }
     */
    public static int XTENSA_INS_RUR_ACCX_1() {
        return XTENSA_INS_RUR_ACCX_1;
    }
    private static final int XTENSA_INS_RUR_AE_BITHEAD = (int)1281L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_AE_BITHEAD = 1281
     * }
     */
    public static int XTENSA_INS_RUR_AE_BITHEAD() {
        return XTENSA_INS_RUR_AE_BITHEAD;
    }
    private static final int XTENSA_INS_RUR_AE_BITPTR = (int)1282L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_AE_BITPTR = 1282
     * }
     */
    public static int XTENSA_INS_RUR_AE_BITPTR() {
        return XTENSA_INS_RUR_AE_BITPTR;
    }
    private static final int XTENSA_INS_RUR_AE_BITSUSED = (int)1283L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_AE_BITSUSED = 1283
     * }
     */
    public static int XTENSA_INS_RUR_AE_BITSUSED() {
        return XTENSA_INS_RUR_AE_BITSUSED;
    }
    private static final int XTENSA_INS_RUR_AE_CBEGIN0 = (int)1284L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_AE_CBEGIN0 = 1284
     * }
     */
    public static int XTENSA_INS_RUR_AE_CBEGIN0() {
        return XTENSA_INS_RUR_AE_CBEGIN0;
    }
    private static final int XTENSA_INS_RUR_AE_CEND0 = (int)1285L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_AE_CEND0 = 1285
     * }
     */
    public static int XTENSA_INS_RUR_AE_CEND0() {
        return XTENSA_INS_RUR_AE_CEND0;
    }
    private static final int XTENSA_INS_RUR_AE_CWRAP = (int)1286L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_AE_CWRAP = 1286
     * }
     */
    public static int XTENSA_INS_RUR_AE_CWRAP() {
        return XTENSA_INS_RUR_AE_CWRAP;
    }
    private static final int XTENSA_INS_RUR_AE_CW_SD_NO = (int)1287L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_AE_CW_SD_NO = 1287
     * }
     */
    public static int XTENSA_INS_RUR_AE_CW_SD_NO() {
        return XTENSA_INS_RUR_AE_CW_SD_NO;
    }
    private static final int XTENSA_INS_RUR_AE_FIRST_TS = (int)1288L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_AE_FIRST_TS = 1288
     * }
     */
    public static int XTENSA_INS_RUR_AE_FIRST_TS() {
        return XTENSA_INS_RUR_AE_FIRST_TS;
    }
    private static final int XTENSA_INS_RUR_AE_NEXTOFFSET = (int)1289L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_AE_NEXTOFFSET = 1289
     * }
     */
    public static int XTENSA_INS_RUR_AE_NEXTOFFSET() {
        return XTENSA_INS_RUR_AE_NEXTOFFSET;
    }
    private static final int XTENSA_INS_RUR_AE_OVERFLOW = (int)1290L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_AE_OVERFLOW = 1290
     * }
     */
    public static int XTENSA_INS_RUR_AE_OVERFLOW() {
        return XTENSA_INS_RUR_AE_OVERFLOW;
    }
    private static final int XTENSA_INS_RUR_AE_OVF_SAR = (int)1291L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_AE_OVF_SAR = 1291
     * }
     */
    public static int XTENSA_INS_RUR_AE_OVF_SAR() {
        return XTENSA_INS_RUR_AE_OVF_SAR;
    }
    private static final int XTENSA_INS_RUR_AE_SAR = (int)1292L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_AE_SAR = 1292
     * }
     */
    public static int XTENSA_INS_RUR_AE_SAR() {
        return XTENSA_INS_RUR_AE_SAR;
    }
    private static final int XTENSA_INS_RUR_AE_SEARCHDONE = (int)1293L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_AE_SEARCHDONE = 1293
     * }
     */
    public static int XTENSA_INS_RUR_AE_SEARCHDONE() {
        return XTENSA_INS_RUR_AE_SEARCHDONE;
    }
    private static final int XTENSA_INS_RUR_AE_TABLESIZE = (int)1294L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_AE_TABLESIZE = 1294
     * }
     */
    public static int XTENSA_INS_RUR_AE_TABLESIZE() {
        return XTENSA_INS_RUR_AE_TABLESIZE;
    }
    private static final int XTENSA_INS_RUR_AE_TS_FTS_BU_BP = (int)1295L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_AE_TS_FTS_BU_BP = 1295
     * }
     */
    public static int XTENSA_INS_RUR_AE_TS_FTS_BU_BP() {
        return XTENSA_INS_RUR_AE_TS_FTS_BU_BP;
    }
    private static final int XTENSA_INS_RUR_FFT_BIT_WIDTH = (int)1296L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_FFT_BIT_WIDTH = 1296
     * }
     */
    public static int XTENSA_INS_RUR_FFT_BIT_WIDTH() {
        return XTENSA_INS_RUR_FFT_BIT_WIDTH;
    }
    private static final int XTENSA_INS_RUR_GPIO_OUT = (int)1297L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_GPIO_OUT = 1297
     * }
     */
    public static int XTENSA_INS_RUR_GPIO_OUT() {
        return XTENSA_INS_RUR_GPIO_OUT;
    }
    private static final int XTENSA_INS_RUR_QACC_H_0 = (int)1298L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_QACC_H_0 = 1298
     * }
     */
    public static int XTENSA_INS_RUR_QACC_H_0() {
        return XTENSA_INS_RUR_QACC_H_0;
    }
    private static final int XTENSA_INS_RUR_QACC_H_1 = (int)1299L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_QACC_H_1 = 1299
     * }
     */
    public static int XTENSA_INS_RUR_QACC_H_1() {
        return XTENSA_INS_RUR_QACC_H_1;
    }
    private static final int XTENSA_INS_RUR_QACC_H_2 = (int)1300L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_QACC_H_2 = 1300
     * }
     */
    public static int XTENSA_INS_RUR_QACC_H_2() {
        return XTENSA_INS_RUR_QACC_H_2;
    }
    private static final int XTENSA_INS_RUR_QACC_H_3 = (int)1301L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_QACC_H_3 = 1301
     * }
     */
    public static int XTENSA_INS_RUR_QACC_H_3() {
        return XTENSA_INS_RUR_QACC_H_3;
    }
    private static final int XTENSA_INS_RUR_QACC_H_4 = (int)1302L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_QACC_H_4 = 1302
     * }
     */
    public static int XTENSA_INS_RUR_QACC_H_4() {
        return XTENSA_INS_RUR_QACC_H_4;
    }
    private static final int XTENSA_INS_RUR_QACC_L_0 = (int)1303L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_QACC_L_0 = 1303
     * }
     */
    public static int XTENSA_INS_RUR_QACC_L_0() {
        return XTENSA_INS_RUR_QACC_L_0;
    }
    private static final int XTENSA_INS_RUR_QACC_L_1 = (int)1304L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_QACC_L_1 = 1304
     * }
     */
    public static int XTENSA_INS_RUR_QACC_L_1() {
        return XTENSA_INS_RUR_QACC_L_1;
    }
    private static final int XTENSA_INS_RUR_QACC_L_2 = (int)1305L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_QACC_L_2 = 1305
     * }
     */
    public static int XTENSA_INS_RUR_QACC_L_2() {
        return XTENSA_INS_RUR_QACC_L_2;
    }
    private static final int XTENSA_INS_RUR_QACC_L_3 = (int)1306L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_QACC_L_3 = 1306
     * }
     */
    public static int XTENSA_INS_RUR_QACC_L_3() {
        return XTENSA_INS_RUR_QACC_L_3;
    }
    private static final int XTENSA_INS_RUR_QACC_L_4 = (int)1307L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_QACC_L_4 = 1307
     * }
     */
    public static int XTENSA_INS_RUR_QACC_L_4() {
        return XTENSA_INS_RUR_QACC_L_4;
    }
    private static final int XTENSA_INS_RUR_SAR_BYTE = (int)1308L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_SAR_BYTE = 1308
     * }
     */
    public static int XTENSA_INS_RUR_SAR_BYTE() {
        return XTENSA_INS_RUR_SAR_BYTE;
    }
    private static final int XTENSA_INS_RUR_UA_STATE_0 = (int)1309L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_UA_STATE_0 = 1309
     * }
     */
    public static int XTENSA_INS_RUR_UA_STATE_0() {
        return XTENSA_INS_RUR_UA_STATE_0;
    }
    private static final int XTENSA_INS_RUR_UA_STATE_1 = (int)1310L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_UA_STATE_1 = 1310
     * }
     */
    public static int XTENSA_INS_RUR_UA_STATE_1() {
        return XTENSA_INS_RUR_UA_STATE_1;
    }
    private static final int XTENSA_INS_RUR_UA_STATE_2 = (int)1311L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_UA_STATE_2 = 1311
     * }
     */
    public static int XTENSA_INS_RUR_UA_STATE_2() {
        return XTENSA_INS_RUR_UA_STATE_2;
    }
    private static final int XTENSA_INS_RUR_UA_STATE_3 = (int)1312L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_RUR_UA_STATE_3 = 1312
     * }
     */
    public static int XTENSA_INS_RUR_UA_STATE_3() {
        return XTENSA_INS_RUR_UA_STATE_3;
    }
    private static final int XTENSA_INS_S16I = (int)1313L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_S16I = 1313
     * }
     */
    public static int XTENSA_INS_S16I() {
        return XTENSA_INS_S16I;
    }
    private static final int XTENSA_INS_S32C1I = (int)1314L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_S32C1I = 1314
     * }
     */
    public static int XTENSA_INS_S32C1I() {
        return XTENSA_INS_S32C1I;
    }
    private static final int XTENSA_INS_S32E = (int)1315L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_S32E = 1315
     * }
     */
    public static int XTENSA_INS_S32E() {
        return XTENSA_INS_S32E;
    }
    private static final int XTENSA_INS_S32I = (int)1316L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_S32I = 1316
     * }
     */
    public static int XTENSA_INS_S32I() {
        return XTENSA_INS_S32I;
    }
    private static final int XTENSA_INS_S32I_N = (int)1317L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_S32I_N = 1317
     * }
     */
    public static int XTENSA_INS_S32I_N() {
        return XTENSA_INS_S32I_N;
    }
    private static final int XTENSA_INS_S8I = (int)1318L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_S8I = 1318
     * }
     */
    public static int XTENSA_INS_S8I() {
        return XTENSA_INS_S8I;
    }
    private static final int XTENSA_INS_SET_BIT_GPIO_OUT = (int)1319L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SET_BIT_GPIO_OUT = 1319
     * }
     */
    public static int XTENSA_INS_SET_BIT_GPIO_OUT() {
        return XTENSA_INS_SET_BIT_GPIO_OUT;
    }
    private static final int XTENSA_INS_SEXT = (int)1320L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SEXT = 1320
     * }
     */
    public static int XTENSA_INS_SEXT() {
        return XTENSA_INS_SEXT;
    }
    private static final int XTENSA_INS_SIMCALL = (int)1321L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SIMCALL = 1321
     * }
     */
    public static int XTENSA_INS_SIMCALL() {
        return XTENSA_INS_SIMCALL;
    }
    private static final int XTENSA_INS_SLL = (int)1322L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SLL = 1322
     * }
     */
    public static int XTENSA_INS_SLL() {
        return XTENSA_INS_SLL;
    }
    private static final int XTENSA_INS_SLLI = (int)1323L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SLLI = 1323
     * }
     */
    public static int XTENSA_INS_SLLI() {
        return XTENSA_INS_SLLI;
    }
    private static final int XTENSA_INS_SQRT0_S = (int)1324L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SQRT0_S = 1324
     * }
     */
    public static int XTENSA_INS_SQRT0_S() {
        return XTENSA_INS_SQRT0_S;
    }
    private static final int XTENSA_INS_SRA = (int)1325L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SRA = 1325
     * }
     */
    public static int XTENSA_INS_SRA() {
        return XTENSA_INS_SRA;
    }
    private static final int XTENSA_INS_SRAI = (int)1326L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SRAI = 1326
     * }
     */
    public static int XTENSA_INS_SRAI() {
        return XTENSA_INS_SRAI;
    }
    private static final int XTENSA_INS_SRC = (int)1327L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SRC = 1327
     * }
     */
    public static int XTENSA_INS_SRC() {
        return XTENSA_INS_SRC;
    }
    private static final int XTENSA_INS_SRL = (int)1328L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SRL = 1328
     * }
     */
    public static int XTENSA_INS_SRL() {
        return XTENSA_INS_SRL;
    }
    private static final int XTENSA_INS_SRLI = (int)1329L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SRLI = 1329
     * }
     */
    public static int XTENSA_INS_SRLI() {
        return XTENSA_INS_SRLI;
    }
    private static final int XTENSA_INS_SSA8L = (int)1330L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SSA8L = 1330
     * }
     */
    public static int XTENSA_INS_SSA8L() {
        return XTENSA_INS_SSA8L;
    }
    private static final int XTENSA_INS_SSAI = (int)1331L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SSAI = 1331
     * }
     */
    public static int XTENSA_INS_SSAI() {
        return XTENSA_INS_SSAI;
    }
    private static final int XTENSA_INS_SSI = (int)1332L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SSI = 1332
     * }
     */
    public static int XTENSA_INS_SSI() {
        return XTENSA_INS_SSI;
    }
    private static final int XTENSA_INS_SSIP = (int)1333L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SSIP = 1333
     * }
     */
    public static int XTENSA_INS_SSIP() {
        return XTENSA_INS_SSIP;
    }
    private static final int XTENSA_INS_SSL = (int)1334L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SSL = 1334
     * }
     */
    public static int XTENSA_INS_SSL() {
        return XTENSA_INS_SSL;
    }
    private static final int XTENSA_INS_SSR = (int)1335L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SSR = 1335
     * }
     */
    public static int XTENSA_INS_SSR() {
        return XTENSA_INS_SSR;
    }
    private static final int XTENSA_INS_SSX = (int)1336L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SSX = 1336
     * }
     */
    public static int XTENSA_INS_SSX() {
        return XTENSA_INS_SSX;
    }
    private static final int XTENSA_INS_SSXP = (int)1337L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SSXP = 1337
     * }
     */
    public static int XTENSA_INS_SSXP() {
        return XTENSA_INS_SSXP;
    }
    private static final int XTENSA_INS_SUB = (int)1338L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SUB = 1338
     * }
     */
    public static int XTENSA_INS_SUB() {
        return XTENSA_INS_SUB;
    }
    private static final int XTENSA_INS_SUBX2 = (int)1339L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SUBX2 = 1339
     * }
     */
    public static int XTENSA_INS_SUBX2() {
        return XTENSA_INS_SUBX2;
    }
    private static final int XTENSA_INS_SUBX4 = (int)1340L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SUBX4 = 1340
     * }
     */
    public static int XTENSA_INS_SUBX4() {
        return XTENSA_INS_SUBX4;
    }
    private static final int XTENSA_INS_SUBX8 = (int)1341L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SUBX8 = 1341
     * }
     */
    public static int XTENSA_INS_SUBX8() {
        return XTENSA_INS_SUBX8;
    }
    private static final int XTENSA_INS_SUB_S = (int)1342L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SUB_S = 1342
     * }
     */
    public static int XTENSA_INS_SUB_S() {
        return XTENSA_INS_SUB_S;
    }
    private static final int XTENSA_INS_SYSCALL = (int)1343L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_SYSCALL = 1343
     * }
     */
    public static int XTENSA_INS_SYSCALL() {
        return XTENSA_INS_SYSCALL;
    }
    private static final int XTENSA_INS_TRUNC_S = (int)1344L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_TRUNC_S = 1344
     * }
     */
    public static int XTENSA_INS_TRUNC_S() {
        return XTENSA_INS_TRUNC_S;
    }
    private static final int XTENSA_INS_UEQ_S = (int)1345L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_UEQ_S = 1345
     * }
     */
    public static int XTENSA_INS_UEQ_S() {
        return XTENSA_INS_UEQ_S;
    }
    private static final int XTENSA_INS_UFLOAT_S = (int)1346L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_UFLOAT_S = 1346
     * }
     */
    public static int XTENSA_INS_UFLOAT_S() {
        return XTENSA_INS_UFLOAT_S;
    }
    private static final int XTENSA_INS_ULE_S = (int)1347L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_ULE_S = 1347
     * }
     */
    public static int XTENSA_INS_ULE_S() {
        return XTENSA_INS_ULE_S;
    }
    private static final int XTENSA_INS_ULT_S = (int)1348L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_ULT_S = 1348
     * }
     */
    public static int XTENSA_INS_ULT_S() {
        return XTENSA_INS_ULT_S;
    }
    private static final int XTENSA_INS_UMUL_AA_HH = (int)1349L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_UMUL_AA_HH = 1349
     * }
     */
    public static int XTENSA_INS_UMUL_AA_HH() {
        return XTENSA_INS_UMUL_AA_HH;
    }
    private static final int XTENSA_INS_UMUL_AA_HL = (int)1350L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_UMUL_AA_HL = 1350
     * }
     */
    public static int XTENSA_INS_UMUL_AA_HL() {
        return XTENSA_INS_UMUL_AA_HL;
    }
    private static final int XTENSA_INS_UMUL_AA_LH = (int)1351L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_UMUL_AA_LH = 1351
     * }
     */
    public static int XTENSA_INS_UMUL_AA_LH() {
        return XTENSA_INS_UMUL_AA_LH;
    }
    private static final int XTENSA_INS_UMUL_AA_LL = (int)1352L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_UMUL_AA_LL = 1352
     * }
     */
    public static int XTENSA_INS_UMUL_AA_LL() {
        return XTENSA_INS_UMUL_AA_LL;
    }
    private static final int XTENSA_INS_UN_S = (int)1353L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_UN_S = 1353
     * }
     */
    public static int XTENSA_INS_UN_S() {
        return XTENSA_INS_UN_S;
    }
    private static final int XTENSA_INS_UTRUNC_S = (int)1354L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_UTRUNC_S = 1354
     * }
     */
    public static int XTENSA_INS_UTRUNC_S() {
        return XTENSA_INS_UTRUNC_S;
    }
    private static final int XTENSA_INS_WAITI = (int)1355L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WAITI = 1355
     * }
     */
    public static int XTENSA_INS_WAITI() {
        return XTENSA_INS_WAITI;
    }
    private static final int XTENSA_INS_WDTLB = (int)1356L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WDTLB = 1356
     * }
     */
    public static int XTENSA_INS_WDTLB() {
        return XTENSA_INS_WDTLB;
    }
    private static final int XTENSA_INS_WER = (int)1357L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WER = 1357
     * }
     */
    public static int XTENSA_INS_WER() {
        return XTENSA_INS_WER;
    }
    private static final int XTENSA_INS_WFR = (int)1358L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WFR = 1358
     * }
     */
    public static int XTENSA_INS_WFR() {
        return XTENSA_INS_WFR;
    }
    private static final int XTENSA_INS_WITLB = (int)1359L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WITLB = 1359
     * }
     */
    public static int XTENSA_INS_WITLB() {
        return XTENSA_INS_WITLB;
    }
    private static final int XTENSA_INS_WR_MASK_GPIO_OUT = (int)1360L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WR_MASK_GPIO_OUT = 1360
     * }
     */
    public static int XTENSA_INS_WR_MASK_GPIO_OUT() {
        return XTENSA_INS_WR_MASK_GPIO_OUT;
    }
    private static final int XTENSA_INS_WSR = (int)1361L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WSR = 1361
     * }
     */
    public static int XTENSA_INS_WSR() {
        return XTENSA_INS_WSR;
    }
    private static final int XTENSA_INS_WUR = (int)1362L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR = 1362
     * }
     */
    public static int XTENSA_INS_WUR() {
        return XTENSA_INS_WUR;
    }
    private static final int XTENSA_INS_WUR_ACCX_0 = (int)1363L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_ACCX_0 = 1363
     * }
     */
    public static int XTENSA_INS_WUR_ACCX_0() {
        return XTENSA_INS_WUR_ACCX_0;
    }
    private static final int XTENSA_INS_WUR_ACCX_1 = (int)1364L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_ACCX_1 = 1364
     * }
     */
    public static int XTENSA_INS_WUR_ACCX_1() {
        return XTENSA_INS_WUR_ACCX_1;
    }
    private static final int XTENSA_INS_WUR_AE_BITHEAD = (int)1365L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_AE_BITHEAD = 1365
     * }
     */
    public static int XTENSA_INS_WUR_AE_BITHEAD() {
        return XTENSA_INS_WUR_AE_BITHEAD;
    }
    private static final int XTENSA_INS_WUR_AE_BITPTR = (int)1366L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_AE_BITPTR = 1366
     * }
     */
    public static int XTENSA_INS_WUR_AE_BITPTR() {
        return XTENSA_INS_WUR_AE_BITPTR;
    }
    private static final int XTENSA_INS_WUR_AE_BITSUSED = (int)1367L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_AE_BITSUSED = 1367
     * }
     */
    public static int XTENSA_INS_WUR_AE_BITSUSED() {
        return XTENSA_INS_WUR_AE_BITSUSED;
    }
    private static final int XTENSA_INS_WUR_AE_CBEGIN0 = (int)1368L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_AE_CBEGIN0 = 1368
     * }
     */
    public static int XTENSA_INS_WUR_AE_CBEGIN0() {
        return XTENSA_INS_WUR_AE_CBEGIN0;
    }
    private static final int XTENSA_INS_WUR_AE_CEND0 = (int)1369L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_AE_CEND0 = 1369
     * }
     */
    public static int XTENSA_INS_WUR_AE_CEND0() {
        return XTENSA_INS_WUR_AE_CEND0;
    }
    private static final int XTENSA_INS_WUR_AE_CWRAP = (int)1370L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_AE_CWRAP = 1370
     * }
     */
    public static int XTENSA_INS_WUR_AE_CWRAP() {
        return XTENSA_INS_WUR_AE_CWRAP;
    }
    private static final int XTENSA_INS_WUR_AE_CW_SD_NO = (int)1371L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_AE_CW_SD_NO = 1371
     * }
     */
    public static int XTENSA_INS_WUR_AE_CW_SD_NO() {
        return XTENSA_INS_WUR_AE_CW_SD_NO;
    }
    private static final int XTENSA_INS_WUR_AE_FIRST_TS = (int)1372L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_AE_FIRST_TS = 1372
     * }
     */
    public static int XTENSA_INS_WUR_AE_FIRST_TS() {
        return XTENSA_INS_WUR_AE_FIRST_TS;
    }
    private static final int XTENSA_INS_WUR_AE_NEXTOFFSET = (int)1373L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_AE_NEXTOFFSET = 1373
     * }
     */
    public static int XTENSA_INS_WUR_AE_NEXTOFFSET() {
        return XTENSA_INS_WUR_AE_NEXTOFFSET;
    }
    private static final int XTENSA_INS_WUR_AE_OVERFLOW = (int)1374L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_AE_OVERFLOW = 1374
     * }
     */
    public static int XTENSA_INS_WUR_AE_OVERFLOW() {
        return XTENSA_INS_WUR_AE_OVERFLOW;
    }
    private static final int XTENSA_INS_WUR_AE_OVF_SAR = (int)1375L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_AE_OVF_SAR = 1375
     * }
     */
    public static int XTENSA_INS_WUR_AE_OVF_SAR() {
        return XTENSA_INS_WUR_AE_OVF_SAR;
    }
    private static final int XTENSA_INS_WUR_AE_SAR = (int)1376L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_AE_SAR = 1376
     * }
     */
    public static int XTENSA_INS_WUR_AE_SAR() {
        return XTENSA_INS_WUR_AE_SAR;
    }
    private static final int XTENSA_INS_WUR_AE_SEARCHDONE = (int)1377L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_AE_SEARCHDONE = 1377
     * }
     */
    public static int XTENSA_INS_WUR_AE_SEARCHDONE() {
        return XTENSA_INS_WUR_AE_SEARCHDONE;
    }
    private static final int XTENSA_INS_WUR_AE_TABLESIZE = (int)1378L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_AE_TABLESIZE = 1378
     * }
     */
    public static int XTENSA_INS_WUR_AE_TABLESIZE() {
        return XTENSA_INS_WUR_AE_TABLESIZE;
    }
    private static final int XTENSA_INS_WUR_AE_TS_FTS_BU_BP = (int)1379L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_AE_TS_FTS_BU_BP = 1379
     * }
     */
    public static int XTENSA_INS_WUR_AE_TS_FTS_BU_BP() {
        return XTENSA_INS_WUR_AE_TS_FTS_BU_BP;
    }
    private static final int XTENSA_INS_WUR_FCR = (int)1380L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_FCR = 1380
     * }
     */
    public static int XTENSA_INS_WUR_FCR() {
        return XTENSA_INS_WUR_FCR;
    }
    private static final int XTENSA_INS_WUR_FFT_BIT_WIDTH = (int)1381L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_FFT_BIT_WIDTH = 1381
     * }
     */
    public static int XTENSA_INS_WUR_FFT_BIT_WIDTH() {
        return XTENSA_INS_WUR_FFT_BIT_WIDTH;
    }
    private static final int XTENSA_INS_WUR_FSR = (int)1382L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_FSR = 1382
     * }
     */
    public static int XTENSA_INS_WUR_FSR() {
        return XTENSA_INS_WUR_FSR;
    }
    private static final int XTENSA_INS_WUR_GPIO_OUT = (int)1383L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_GPIO_OUT = 1383
     * }
     */
    public static int XTENSA_INS_WUR_GPIO_OUT() {
        return XTENSA_INS_WUR_GPIO_OUT;
    }
    private static final int XTENSA_INS_WUR_QACC_H_0 = (int)1384L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_QACC_H_0 = 1384
     * }
     */
    public static int XTENSA_INS_WUR_QACC_H_0() {
        return XTENSA_INS_WUR_QACC_H_0;
    }
    private static final int XTENSA_INS_WUR_QACC_H_1 = (int)1385L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_QACC_H_1 = 1385
     * }
     */
    public static int XTENSA_INS_WUR_QACC_H_1() {
        return XTENSA_INS_WUR_QACC_H_1;
    }
    private static final int XTENSA_INS_WUR_QACC_H_2 = (int)1386L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_QACC_H_2 = 1386
     * }
     */
    public static int XTENSA_INS_WUR_QACC_H_2() {
        return XTENSA_INS_WUR_QACC_H_2;
    }
    private static final int XTENSA_INS_WUR_QACC_H_3 = (int)1387L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_QACC_H_3 = 1387
     * }
     */
    public static int XTENSA_INS_WUR_QACC_H_3() {
        return XTENSA_INS_WUR_QACC_H_3;
    }
    private static final int XTENSA_INS_WUR_QACC_H_4 = (int)1388L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_QACC_H_4 = 1388
     * }
     */
    public static int XTENSA_INS_WUR_QACC_H_4() {
        return XTENSA_INS_WUR_QACC_H_4;
    }
    private static final int XTENSA_INS_WUR_QACC_L_0 = (int)1389L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_QACC_L_0 = 1389
     * }
     */
    public static int XTENSA_INS_WUR_QACC_L_0() {
        return XTENSA_INS_WUR_QACC_L_0;
    }
    private static final int XTENSA_INS_WUR_QACC_L_1 = (int)1390L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_QACC_L_1 = 1390
     * }
     */
    public static int XTENSA_INS_WUR_QACC_L_1() {
        return XTENSA_INS_WUR_QACC_L_1;
    }
    private static final int XTENSA_INS_WUR_QACC_L_2 = (int)1391L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_QACC_L_2 = 1391
     * }
     */
    public static int XTENSA_INS_WUR_QACC_L_2() {
        return XTENSA_INS_WUR_QACC_L_2;
    }
    private static final int XTENSA_INS_WUR_QACC_L_3 = (int)1392L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_QACC_L_3 = 1392
     * }
     */
    public static int XTENSA_INS_WUR_QACC_L_3() {
        return XTENSA_INS_WUR_QACC_L_3;
    }
    private static final int XTENSA_INS_WUR_QACC_L_4 = (int)1393L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_QACC_L_4 = 1393
     * }
     */
    public static int XTENSA_INS_WUR_QACC_L_4() {
        return XTENSA_INS_WUR_QACC_L_4;
    }
    private static final int XTENSA_INS_WUR_SAR_BYTE = (int)1394L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_SAR_BYTE = 1394
     * }
     */
    public static int XTENSA_INS_WUR_SAR_BYTE() {
        return XTENSA_INS_WUR_SAR_BYTE;
    }
    private static final int XTENSA_INS_WUR_UA_STATE_0 = (int)1395L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_UA_STATE_0 = 1395
     * }
     */
    public static int XTENSA_INS_WUR_UA_STATE_0() {
        return XTENSA_INS_WUR_UA_STATE_0;
    }
    private static final int XTENSA_INS_WUR_UA_STATE_1 = (int)1396L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_UA_STATE_1 = 1396
     * }
     */
    public static int XTENSA_INS_WUR_UA_STATE_1() {
        return XTENSA_INS_WUR_UA_STATE_1;
    }
    private static final int XTENSA_INS_WUR_UA_STATE_2 = (int)1397L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_UA_STATE_2 = 1397
     * }
     */
    public static int XTENSA_INS_WUR_UA_STATE_2() {
        return XTENSA_INS_WUR_UA_STATE_2;
    }
    private static final int XTENSA_INS_WUR_UA_STATE_3 = (int)1398L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_WUR_UA_STATE_3 = 1398
     * }
     */
    public static int XTENSA_INS_WUR_UA_STATE_3() {
        return XTENSA_INS_WUR_UA_STATE_3;
    }
    private static final int XTENSA_INS_XOR = (int)1399L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_XOR = 1399
     * }
     */
    public static int XTENSA_INS_XOR() {
        return XTENSA_INS_XOR;
    }
    private static final int XTENSA_INS_XORB = (int)1400L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_XORB = 1400
     * }
     */
    public static int XTENSA_INS_XORB() {
        return XTENSA_INS_XORB;
    }
    private static final int XTENSA_INS_XSR = (int)1401L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_XSR = 1401
     * }
     */
    public static int XTENSA_INS_XSR() {
        return XTENSA_INS_XSR;
    }
    private static final int XTENSA_INS__L32I = (int)1402L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS__L32I = 1402
     * }
     */
    public static int XTENSA_INS__L32I() {
        return XTENSA_INS__L32I;
    }
    private static final int XTENSA_INS__L32I_N = (int)1403L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS__L32I_N = 1403
     * }
     */
    public static int XTENSA_INS__L32I_N() {
        return XTENSA_INS__L32I_N;
    }
    private static final int XTENSA_INS__MOVI = (int)1404L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS__MOVI = 1404
     * }
     */
    public static int XTENSA_INS__MOVI() {
        return XTENSA_INS__MOVI;
    }
    private static final int XTENSA_INS__S32I = (int)1405L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS__S32I = 1405
     * }
     */
    public static int XTENSA_INS__S32I() {
        return XTENSA_INS__S32I;
    }
    private static final int XTENSA_INS__S32I_N = (int)1406L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS__S32I_N = 1406
     * }
     */
    public static int XTENSA_INS__S32I_N() {
        return XTENSA_INS__S32I_N;
    }
    private static final int XTENSA_INS__SLLI = (int)1407L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS__SLLI = 1407
     * }
     */
    public static int XTENSA_INS__SLLI() {
        return XTENSA_INS__SLLI;
    }
    private static final int XTENSA_INS__SRLI = (int)1408L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS__SRLI = 1408
     * }
     */
    public static int XTENSA_INS__SRLI() {
        return XTENSA_INS__SRLI;
    }
    private static final int XTENSA_INS_MV_QR = (int)1409L;
    /**
     * {@snippet lang=c :
     * enum xtensa_insn.XTENSA_INS_MV_QR = 1409
     * }
     */
    public static int XTENSA_INS_MV_QR() {
        return XTENSA_INS_MV_QR;
    }
    private static final int XTENSA_GRP_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_GRP_INVALID = 0
     * }
     */
    public static int XTENSA_GRP_INVALID() {
        return XTENSA_GRP_INVALID;
    }
    private static final int XTENSA_GRP_CALL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_GRP_CALL = 1
     * }
     */
    public static int XTENSA_GRP_CALL() {
        return XTENSA_GRP_CALL;
    }
    private static final int XTENSA_GRP_JUMP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_GRP_JUMP = 2
     * }
     */
    public static int XTENSA_GRP_JUMP() {
        return XTENSA_GRP_JUMP;
    }
    private static final int XTENSA_GRP_RET = (int)3L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_GRP_RET = 3
     * }
     */
    public static int XTENSA_GRP_RET() {
        return XTENSA_GRP_RET;
    }
    private static final int XTENSA_FEATURE_HASDENSITY = (int)128L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASDENSITY = 128
     * }
     */
    public static int XTENSA_FEATURE_HASDENSITY() {
        return XTENSA_FEATURE_HASDENSITY;
    }
    private static final int XTENSA_FEATURE_HASSINGLEFLOAT = (int)129L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASSINGLEFLOAT = 129
     * }
     */
    public static int XTENSA_FEATURE_HASSINGLEFLOAT() {
        return XTENSA_FEATURE_HASSINGLEFLOAT;
    }
    private static final int XTENSA_FEATURE_HASWINDOWED = (int)130L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASWINDOWED = 130
     * }
     */
    public static int XTENSA_FEATURE_HASWINDOWED() {
        return XTENSA_FEATURE_HASWINDOWED;
    }
    private static final int XTENSA_FEATURE_HASBOOLEAN = (int)131L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASBOOLEAN = 131
     * }
     */
    public static int XTENSA_FEATURE_HASBOOLEAN() {
        return XTENSA_FEATURE_HASBOOLEAN;
    }
    private static final int XTENSA_FEATURE_HASLOOP = (int)132L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASLOOP = 132
     * }
     */
    public static int XTENSA_FEATURE_HASLOOP() {
        return XTENSA_FEATURE_HASLOOP;
    }
    private static final int XTENSA_FEATURE_HASSEXT = (int)133L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASSEXT = 133
     * }
     */
    public static int XTENSA_FEATURE_HASSEXT() {
        return XTENSA_FEATURE_HASSEXT;
    }
    private static final int XTENSA_FEATURE_HASCLAMPS = (int)134L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASCLAMPS = 134
     * }
     */
    public static int XTENSA_FEATURE_HASCLAMPS() {
        return XTENSA_FEATURE_HASCLAMPS;
    }
    private static final int XTENSA_FEATURE_HASNSA = (int)135L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASNSA = 135
     * }
     */
    public static int XTENSA_FEATURE_HASNSA() {
        return XTENSA_FEATURE_HASNSA;
    }
    private static final int XTENSA_FEATURE_HASMINMAX = (int)136L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASMINMAX = 136
     * }
     */
    public static int XTENSA_FEATURE_HASMINMAX() {
        return XTENSA_FEATURE_HASMINMAX;
    }
    private static final int XTENSA_FEATURE_HASMUL16 = (int)137L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASMUL16 = 137
     * }
     */
    public static int XTENSA_FEATURE_HASMUL16() {
        return XTENSA_FEATURE_HASMUL16;
    }
    private static final int XTENSA_FEATURE_HASMUL32 = (int)138L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASMUL32 = 138
     * }
     */
    public static int XTENSA_FEATURE_HASMUL32() {
        return XTENSA_FEATURE_HASMUL32;
    }
    private static final int XTENSA_FEATURE_HASMUL32HIGH = (int)139L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASMUL32HIGH = 139
     * }
     */
    public static int XTENSA_FEATURE_HASMUL32HIGH() {
        return XTENSA_FEATURE_HASMUL32HIGH;
    }
    private static final int XTENSA_FEATURE_HASDIV32 = (int)140L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASDIV32 = 140
     * }
     */
    public static int XTENSA_FEATURE_HASDIV32() {
        return XTENSA_FEATURE_HASDIV32;
    }
    private static final int XTENSA_FEATURE_HASMAC16 = (int)141L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASMAC16 = 141
     * }
     */
    public static int XTENSA_FEATURE_HASMAC16() {
        return XTENSA_FEATURE_HASMAC16;
    }
    private static final int XTENSA_FEATURE_HASDFPACCEL = (int)142L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASDFPACCEL = 142
     * }
     */
    public static int XTENSA_FEATURE_HASDFPACCEL() {
        return XTENSA_FEATURE_HASDFPACCEL;
    }
    private static final int XTENSA_FEATURE_HASS32C1I = (int)143L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASS32C1I = 143
     * }
     */
    public static int XTENSA_FEATURE_HASS32C1I() {
        return XTENSA_FEATURE_HASS32C1I;
    }
    private static final int XTENSA_FEATURE_HASTHREADPTR = (int)144L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASTHREADPTR = 144
     * }
     */
    public static int XTENSA_FEATURE_HASTHREADPTR() {
        return XTENSA_FEATURE_HASTHREADPTR;
    }
    private static final int XTENSA_FEATURE_HASEXTENDEDL32R = (int)145L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASEXTENDEDL32R = 145
     * }
     */
    public static int XTENSA_FEATURE_HASEXTENDEDL32R() {
        return XTENSA_FEATURE_HASEXTENDEDL32R;
    }
    private static final int XTENSA_FEATURE_HASATOMCTL = (int)146L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASATOMCTL = 146
     * }
     */
    public static int XTENSA_FEATURE_HASATOMCTL() {
        return XTENSA_FEATURE_HASATOMCTL;
    }
    private static final int XTENSA_FEATURE_HASMEMCTL = (int)147L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASMEMCTL = 147
     * }
     */
    public static int XTENSA_FEATURE_HASMEMCTL() {
        return XTENSA_FEATURE_HASMEMCTL;
    }
    private static final int XTENSA_FEATURE_HASDEBUG = (int)148L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASDEBUG = 148
     * }
     */
    public static int XTENSA_FEATURE_HASDEBUG() {
        return XTENSA_FEATURE_HASDEBUG;
    }
    private static final int XTENSA_FEATURE_HASEXCEPTION = (int)149L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASEXCEPTION = 149
     * }
     */
    public static int XTENSA_FEATURE_HASEXCEPTION() {
        return XTENSA_FEATURE_HASEXCEPTION;
    }
    private static final int XTENSA_FEATURE_HASHIGHPRIINTERRUPTS = (int)150L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASHIGHPRIINTERRUPTS = 150
     * }
     */
    public static int XTENSA_FEATURE_HASHIGHPRIINTERRUPTS() {
        return XTENSA_FEATURE_HASHIGHPRIINTERRUPTS;
    }
    private static final int XTENSA_FEATURE_HASCOPROCESSOR = (int)151L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASCOPROCESSOR = 151
     * }
     */
    public static int XTENSA_FEATURE_HASCOPROCESSOR() {
        return XTENSA_FEATURE_HASCOPROCESSOR;
    }
    private static final int XTENSA_FEATURE_HASINTERRUPT = (int)152L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASINTERRUPT = 152
     * }
     */
    public static int XTENSA_FEATURE_HASINTERRUPT() {
        return XTENSA_FEATURE_HASINTERRUPT;
    }
    private static final int XTENSA_FEATURE_HASRELOCATABLEVECTOR = (int)153L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASRELOCATABLEVECTOR = 153
     * }
     */
    public static int XTENSA_FEATURE_HASRELOCATABLEVECTOR() {
        return XTENSA_FEATURE_HASRELOCATABLEVECTOR;
    }
    private static final int XTENSA_FEATURE_HASTIMERINT = (int)154L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASTIMERINT = 154
     * }
     */
    public static int XTENSA_FEATURE_HASTIMERINT() {
        return XTENSA_FEATURE_HASTIMERINT;
    }
    private static final int XTENSA_FEATURE_HASPRID = (int)155L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASPRID = 155
     * }
     */
    public static int XTENSA_FEATURE_HASPRID() {
        return XTENSA_FEATURE_HASPRID;
    }
    private static final int XTENSA_FEATURE_HASREGIONPROTECTION = (int)156L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASREGIONPROTECTION = 156
     * }
     */
    public static int XTENSA_FEATURE_HASREGIONPROTECTION() {
        return XTENSA_FEATURE_HASREGIONPROTECTION;
    }
    private static final int XTENSA_FEATURE_HASMISCSR = (int)157L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASMISCSR = 157
     * }
     */
    public static int XTENSA_FEATURE_HASMISCSR() {
        return XTENSA_FEATURE_HASMISCSR;
    }
    private static final int XTENSA_FEATURE_HASESP32S2OPS = (int)158L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASESP32S2OPS = 158
     * }
     */
    public static int XTENSA_FEATURE_HASESP32S2OPS() {
        return XTENSA_FEATURE_HASESP32S2OPS;
    }
    private static final int XTENSA_FEATURE_HASESP32S3OPS = (int)159L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASESP32S3OPS = 159
     * }
     */
    public static int XTENSA_FEATURE_HASESP32S3OPS() {
        return XTENSA_FEATURE_HASESP32S3OPS;
    }
    private static final int XTENSA_FEATURE_HASHIFI3 = (int)160L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASHIFI3 = 160
     * }
     */
    public static int XTENSA_FEATURE_HASHIFI3() {
        return XTENSA_FEATURE_HASHIFI3;
    }
    private static final int XTENSA_FEATURE_HASFORCEDATOMICS = (int)161L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_FEATURE_HASFORCEDATOMICS = 161
     * }
     */
    public static int XTENSA_FEATURE_HASFORCEDATOMICS() {
        return XTENSA_FEATURE_HASFORCEDATOMICS;
    }
    private static final int XTENSA_GRP_ENDING = (int)162L;
    /**
     * {@snippet lang=c :
     * enum xtensa_feature.XTENSA_GRP_ENDING = 162
     * }
     */
    public static int XTENSA_GRP_ENDING() {
        return XTENSA_GRP_ENDING;
    }
    private static final int XTENSA_INSN_FORM_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XTENSA_INSN_FORM_INVALID = 0
     * }
     */
    public static int XTENSA_INSN_FORM_INVALID() {
        return XTENSA_INSN_FORM_INVALID;
    }
    private static final int XTENSA_INSN_FORM_RRR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XTENSA_INSN_FORM_RRR = 1
     * }
     */
    public static int XTENSA_INSN_FORM_RRR() {
        return XTENSA_INSN_FORM_RRR;
    }
    private static final int XTENSA_INSN_FORM_RRI8 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XTENSA_INSN_FORM_RRI8 = 2
     * }
     */
    public static int XTENSA_INSN_FORM_RRI8() {
        return XTENSA_INSN_FORM_RRI8;
    }
    private static final int XTENSA_INSN_FORM_RRRN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XTENSA_INSN_FORM_RRRN = 3
     * }
     */
    public static int XTENSA_INSN_FORM_RRRN() {
        return XTENSA_INSN_FORM_RRRN;
    }
    private static final int XTENSA_INSN_FORM_AEINST24 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XTENSA_INSN_FORM_AEINST24 = 4
     * }
     */
    public static int XTENSA_INSN_FORM_AEINST24() {
        return XTENSA_INSN_FORM_AEINST24;
    }
    private static final int XTENSA_INSN_FORM_BRI12 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XTENSA_INSN_FORM_BRI12 = 5
     * }
     */
    public static int XTENSA_INSN_FORM_BRI12() {
        return XTENSA_INSN_FORM_BRI12;
    }
    private static final int XTENSA_INSN_FORM_CALL = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XTENSA_INSN_FORM_CALL = 6
     * }
     */
    public static int XTENSA_INSN_FORM_CALL() {
        return XTENSA_INSN_FORM_CALL;
    }
    private static final int XTENSA_INSN_FORM_CALLX = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XTENSA_INSN_FORM_CALLX = 7
     * }
     */
    public static int XTENSA_INSN_FORM_CALLX() {
        return XTENSA_INSN_FORM_CALLX;
    }
    private static final int XTENSA_INSN_FORM_EE_INST24 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XTENSA_INSN_FORM_EE_INST24 = 8
     * }
     */
    public static int XTENSA_INSN_FORM_EE_INST24() {
        return XTENSA_INSN_FORM_EE_INST24;
    }
    private static final int XTENSA_INSN_FORM_RRI4 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XTENSA_INSN_FORM_RRI4 = 9
     * }
     */
    public static int XTENSA_INSN_FORM_RRI4() {
        return XTENSA_INSN_FORM_RRI4;
    }
    private static final int XTENSA_INSN_FORM_RI16 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XTENSA_INSN_FORM_RI16 = 10
     * }
     */
    public static int XTENSA_INSN_FORM_RI16() {
        return XTENSA_INSN_FORM_RI16;
    }
    private static final int XTENSA_INSN_FORM_RI7 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XTENSA_INSN_FORM_RI7 = 11
     * }
     */
    public static int XTENSA_INSN_FORM_RI7() {
        return XTENSA_INSN_FORM_RI7;
    }
    private static final int XTENSA_INSN_FORM_RSR = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XTENSA_INSN_FORM_RSR = 12
     * }
     */
    public static int XTENSA_INSN_FORM_RSR() {
        return XTENSA_INSN_FORM_RSR;
    }
    private static final int XTENSA_INSN_FORM_MAX = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XTENSA_INSN_FORM_MAX = 13
     * }
     */
    public static int XTENSA_INSN_FORM_MAX() {
        return XTENSA_INSN_FORM_MAX;
    }
    private static final int XTENSA_OP_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cs_xtensa_op_type.XTENSA_OP_INVALID = 0
     * }
     */
    public static int XTENSA_OP_INVALID() {
        return XTENSA_OP_INVALID;
    }
    private static final int XTENSA_OP_REG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cs_xtensa_op_type.XTENSA_OP_REG = 1
     * }
     */
    public static int XTENSA_OP_REG() {
        return XTENSA_OP_REG;
    }
    private static final int XTENSA_OP_IMM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cs_xtensa_op_type.XTENSA_OP_IMM = 2
     * }
     */
    public static int XTENSA_OP_IMM() {
        return XTENSA_OP_IMM;
    }
    private static final int XTENSA_OP_MEM = (int)128L;
    /**
     * {@snippet lang=c :
     * enum cs_xtensa_op_type.XTENSA_OP_MEM = 128
     * }
     */
    public static int XTENSA_OP_MEM() {
        return XTENSA_OP_MEM;
    }
    private static final int XTENSA_OP_MEM_REG = (int)129L;
    /**
     * {@snippet lang=c :
     * enum cs_xtensa_op_type.XTENSA_OP_MEM_REG = 129
     * }
     */
    public static int XTENSA_OP_MEM_REG() {
        return XTENSA_OP_MEM_REG;
    }
    private static final int XTENSA_OP_MEM_IMM = (int)130L;
    /**
     * {@snippet lang=c :
     * enum cs_xtensa_op_type.XTENSA_OP_MEM_IMM = 130
     * }
     */
    public static int XTENSA_OP_MEM_IMM() {
        return XTENSA_OP_MEM_IMM;
    }
    private static final int XTENSA_OP_L32R = (int)16L;
    /**
     * {@snippet lang=c :
     * enum cs_xtensa_op_type.XTENSA_OP_L32R = 16
     * }
     */
    public static int XTENSA_OP_L32R() {
        return XTENSA_OP_L32R;
    }
    private static final int ARC_OP_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum arc_op_type.ARC_OP_INVALID = 0
     * }
     */
    public static int ARC_OP_INVALID() {
        return ARC_OP_INVALID;
    }
    private static final int ARC_OP_REG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum arc_op_type.ARC_OP_REG = 1
     * }
     */
    public static int ARC_OP_REG() {
        return ARC_OP_REG;
    }
    private static final int ARC_OP_IMM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum arc_op_type.ARC_OP_IMM = 2
     * }
     */
    public static int ARC_OP_IMM() {
        return ARC_OP_IMM;
    }
    private static final int ARC_REG_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_INVALID = 0
     * }
     */
    public static int ARC_REG_INVALID() {
        return ARC_REG_INVALID;
    }
    private static final int ARC_REG_BLINK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_BLINK = 1
     * }
     */
    public static int ARC_REG_BLINK() {
        return ARC_REG_BLINK;
    }
    private static final int ARC_REG_FP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_FP = 2
     * }
     */
    public static int ARC_REG_FP() {
        return ARC_REG_FP;
    }
    private static final int ARC_REG_GP = (int)3L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_GP = 3
     * }
     */
    public static int ARC_REG_GP() {
        return ARC_REG_GP;
    }
    private static final int ARC_REG_ILINK = (int)4L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_ILINK = 4
     * }
     */
    public static int ARC_REG_ILINK() {
        return ARC_REG_ILINK;
    }
    private static final int ARC_REG_SP = (int)5L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_SP = 5
     * }
     */
    public static int ARC_REG_SP() {
        return ARC_REG_SP;
    }
    private static final int ARC_REG_R0 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R0 = 6
     * }
     */
    public static int ARC_REG_R0() {
        return ARC_REG_R0;
    }
    private static final int ARC_REG_R1 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R1 = 7
     * }
     */
    public static int ARC_REG_R1() {
        return ARC_REG_R1;
    }
    private static final int ARC_REG_R2 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R2 = 8
     * }
     */
    public static int ARC_REG_R2() {
        return ARC_REG_R2;
    }
    private static final int ARC_REG_R3 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R3 = 9
     * }
     */
    public static int ARC_REG_R3() {
        return ARC_REG_R3;
    }
    private static final int ARC_REG_R4 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R4 = 10
     * }
     */
    public static int ARC_REG_R4() {
        return ARC_REG_R4;
    }
    private static final int ARC_REG_R5 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R5 = 11
     * }
     */
    public static int ARC_REG_R5() {
        return ARC_REG_R5;
    }
    private static final int ARC_REG_R6 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R6 = 12
     * }
     */
    public static int ARC_REG_R6() {
        return ARC_REG_R6;
    }
    private static final int ARC_REG_R7 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R7 = 13
     * }
     */
    public static int ARC_REG_R7() {
        return ARC_REG_R7;
    }
    private static final int ARC_REG_R8 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R8 = 14
     * }
     */
    public static int ARC_REG_R8() {
        return ARC_REG_R8;
    }
    private static final int ARC_REG_R9 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R9 = 15
     * }
     */
    public static int ARC_REG_R9() {
        return ARC_REG_R9;
    }
    private static final int ARC_REG_R10 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R10 = 16
     * }
     */
    public static int ARC_REG_R10() {
        return ARC_REG_R10;
    }
    private static final int ARC_REG_R11 = (int)17L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R11 = 17
     * }
     */
    public static int ARC_REG_R11() {
        return ARC_REG_R11;
    }
    private static final int ARC_REG_R12 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R12 = 18
     * }
     */
    public static int ARC_REG_R12() {
        return ARC_REG_R12;
    }
    private static final int ARC_REG_R13 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R13 = 19
     * }
     */
    public static int ARC_REG_R13() {
        return ARC_REG_R13;
    }
    private static final int ARC_REG_R14 = (int)20L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R14 = 20
     * }
     */
    public static int ARC_REG_R14() {
        return ARC_REG_R14;
    }
    private static final int ARC_REG_R15 = (int)21L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R15 = 21
     * }
     */
    public static int ARC_REG_R15() {
        return ARC_REG_R15;
    }
    private static final int ARC_REG_R16 = (int)22L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R16 = 22
     * }
     */
    public static int ARC_REG_R16() {
        return ARC_REG_R16;
    }
    private static final int ARC_REG_R17 = (int)23L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R17 = 23
     * }
     */
    public static int ARC_REG_R17() {
        return ARC_REG_R17;
    }
    private static final int ARC_REG_R18 = (int)24L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R18 = 24
     * }
     */
    public static int ARC_REG_R18() {
        return ARC_REG_R18;
    }
    private static final int ARC_REG_R19 = (int)25L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R19 = 25
     * }
     */
    public static int ARC_REG_R19() {
        return ARC_REG_R19;
    }
    private static final int ARC_REG_R20 = (int)26L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R20 = 26
     * }
     */
    public static int ARC_REG_R20() {
        return ARC_REG_R20;
    }
    private static final int ARC_REG_R21 = (int)27L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R21 = 27
     * }
     */
    public static int ARC_REG_R21() {
        return ARC_REG_R21;
    }
    private static final int ARC_REG_R22 = (int)28L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R22 = 28
     * }
     */
    public static int ARC_REG_R22() {
        return ARC_REG_R22;
    }
    private static final int ARC_REG_R23 = (int)29L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R23 = 29
     * }
     */
    public static int ARC_REG_R23() {
        return ARC_REG_R23;
    }
    private static final int ARC_REG_R24 = (int)30L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R24 = 30
     * }
     */
    public static int ARC_REG_R24() {
        return ARC_REG_R24;
    }
    private static final int ARC_REG_R25 = (int)31L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R25 = 31
     * }
     */
    public static int ARC_REG_R25() {
        return ARC_REG_R25;
    }
    private static final int ARC_REG_R30 = (int)32L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R30 = 32
     * }
     */
    public static int ARC_REG_R30() {
        return ARC_REG_R30;
    }
    private static final int ARC_REG_R32 = (int)33L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R32 = 33
     * }
     */
    public static int ARC_REG_R32() {
        return ARC_REG_R32;
    }
    private static final int ARC_REG_R33 = (int)34L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R33 = 34
     * }
     */
    public static int ARC_REG_R33() {
        return ARC_REG_R33;
    }
    private static final int ARC_REG_R34 = (int)35L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R34 = 35
     * }
     */
    public static int ARC_REG_R34() {
        return ARC_REG_R34;
    }
    private static final int ARC_REG_R35 = (int)36L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R35 = 36
     * }
     */
    public static int ARC_REG_R35() {
        return ARC_REG_R35;
    }
    private static final int ARC_REG_R36 = (int)37L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R36 = 37
     * }
     */
    public static int ARC_REG_R36() {
        return ARC_REG_R36;
    }
    private static final int ARC_REG_R37 = (int)38L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R37 = 38
     * }
     */
    public static int ARC_REG_R37() {
        return ARC_REG_R37;
    }
    private static final int ARC_REG_R38 = (int)39L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R38 = 39
     * }
     */
    public static int ARC_REG_R38() {
        return ARC_REG_R38;
    }
    private static final int ARC_REG_R39 = (int)40L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R39 = 40
     * }
     */
    public static int ARC_REG_R39() {
        return ARC_REG_R39;
    }
    private static final int ARC_REG_R40 = (int)41L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R40 = 41
     * }
     */
    public static int ARC_REG_R40() {
        return ARC_REG_R40;
    }
    private static final int ARC_REG_R41 = (int)42L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R41 = 42
     * }
     */
    public static int ARC_REG_R41() {
        return ARC_REG_R41;
    }
    private static final int ARC_REG_R42 = (int)43L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R42 = 43
     * }
     */
    public static int ARC_REG_R42() {
        return ARC_REG_R42;
    }
    private static final int ARC_REG_R43 = (int)44L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R43 = 44
     * }
     */
    public static int ARC_REG_R43() {
        return ARC_REG_R43;
    }
    private static final int ARC_REG_R44 = (int)45L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R44 = 45
     * }
     */
    public static int ARC_REG_R44() {
        return ARC_REG_R44;
    }
    private static final int ARC_REG_R45 = (int)46L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R45 = 46
     * }
     */
    public static int ARC_REG_R45() {
        return ARC_REG_R45;
    }
    private static final int ARC_REG_R46 = (int)47L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R46 = 47
     * }
     */
    public static int ARC_REG_R46() {
        return ARC_REG_R46;
    }
    private static final int ARC_REG_R47 = (int)48L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R47 = 48
     * }
     */
    public static int ARC_REG_R47() {
        return ARC_REG_R47;
    }
    private static final int ARC_REG_R48 = (int)49L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R48 = 49
     * }
     */
    public static int ARC_REG_R48() {
        return ARC_REG_R48;
    }
    private static final int ARC_REG_R49 = (int)50L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R49 = 50
     * }
     */
    public static int ARC_REG_R49() {
        return ARC_REG_R49;
    }
    private static final int ARC_REG_R50 = (int)51L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R50 = 51
     * }
     */
    public static int ARC_REG_R50() {
        return ARC_REG_R50;
    }
    private static final int ARC_REG_R51 = (int)52L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R51 = 52
     * }
     */
    public static int ARC_REG_R51() {
        return ARC_REG_R51;
    }
    private static final int ARC_REG_R52 = (int)53L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R52 = 53
     * }
     */
    public static int ARC_REG_R52() {
        return ARC_REG_R52;
    }
    private static final int ARC_REG_R53 = (int)54L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R53 = 54
     * }
     */
    public static int ARC_REG_R53() {
        return ARC_REG_R53;
    }
    private static final int ARC_REG_R54 = (int)55L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R54 = 55
     * }
     */
    public static int ARC_REG_R54() {
        return ARC_REG_R54;
    }
    private static final int ARC_REG_R55 = (int)56L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R55 = 56
     * }
     */
    public static int ARC_REG_R55() {
        return ARC_REG_R55;
    }
    private static final int ARC_REG_R56 = (int)57L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R56 = 57
     * }
     */
    public static int ARC_REG_R56() {
        return ARC_REG_R56;
    }
    private static final int ARC_REG_R57 = (int)58L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R57 = 58
     * }
     */
    public static int ARC_REG_R57() {
        return ARC_REG_R57;
    }
    private static final int ARC_REG_R58 = (int)59L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R58 = 59
     * }
     */
    public static int ARC_REG_R58() {
        return ARC_REG_R58;
    }
    private static final int ARC_REG_R59 = (int)60L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R59 = 60
     * }
     */
    public static int ARC_REG_R59() {
        return ARC_REG_R59;
    }
    private static final int ARC_REG_R60 = (int)61L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R60 = 61
     * }
     */
    public static int ARC_REG_R60() {
        return ARC_REG_R60;
    }
    private static final int ARC_REG_R61 = (int)62L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R61 = 62
     * }
     */
    public static int ARC_REG_R61() {
        return ARC_REG_R61;
    }
    private static final int ARC_REG_R62 = (int)63L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R62 = 63
     * }
     */
    public static int ARC_REG_R62() {
        return ARC_REG_R62;
    }
    private static final int ARC_REG_R63 = (int)64L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_R63 = 64
     * }
     */
    public static int ARC_REG_R63() {
        return ARC_REG_R63;
    }
    private static final int ARC_REG_STATUS32 = (int)65L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_STATUS32 = 65
     * }
     */
    public static int ARC_REG_STATUS32() {
        return ARC_REG_STATUS32;
    }
    private static final int ARC_REG_ENDING = (int)66L;
    /**
     * {@snippet lang=c :
     * enum arc_reg.ARC_REG_ENDING = 66
     * }
     */
    public static int ARC_REG_ENDING() {
        return ARC_REG_ENDING;
    }
    private static final int ARC_INS_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_INVALID = 0
     * }
     */
    public static int ARC_INS_INVALID() {
        return ARC_INS_INVALID;
    }
    private static final int ARC_INS_h = (int)1L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_h = 1
     * }
     */
    public static int ARC_INS_h() {
        return ARC_INS_h;
    }
    private static final int ARC_INS_PBR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_PBR = 2
     * }
     */
    public static int ARC_INS_PBR() {
        return ARC_INS_PBR;
    }
    private static final int ARC_INS_ERROR_FLS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ERROR_FLS = 3
     * }
     */
    public static int ARC_INS_ERROR_FLS() {
        return ARC_INS_ERROR_FLS;
    }
    private static final int ARC_INS_ERROR_FFS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ERROR_FFS = 4
     * }
     */
    public static int ARC_INS_ERROR_FFS() {
        return ARC_INS_ERROR_FFS;
    }
    private static final int ARC_INS_PLDFI = (int)5L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_PLDFI = 5
     * }
     */
    public static int ARC_INS_PLDFI() {
        return ARC_INS_PLDFI;
    }
    private static final int ARC_INS_STB_FAR = (int)6L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_STB_FAR = 6
     * }
     */
    public static int ARC_INS_STB_FAR() {
        return ARC_INS_STB_FAR;
    }
    private static final int ARC_INS_STH_FAR = (int)7L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_STH_FAR = 7
     * }
     */
    public static int ARC_INS_STH_FAR() {
        return ARC_INS_STH_FAR;
    }
    private static final int ARC_INS_ST_FAR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ST_FAR = 8
     * }
     */
    public static int ARC_INS_ST_FAR() {
        return ARC_INS_ST_FAR;
    }
    private static final int ARC_INS_ADC = (int)9L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ADC = 9
     * }
     */
    public static int ARC_INS_ADC() {
        return ARC_INS_ADC;
    }
    private static final int ARC_INS_ADC_F = (int)10L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ADC_F = 10
     * }
     */
    public static int ARC_INS_ADC_F() {
        return ARC_INS_ADC_F;
    }
    private static final int ARC_INS_ADD_S = (int)11L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ADD_S = 11
     * }
     */
    public static int ARC_INS_ADD_S() {
        return ARC_INS_ADD_S;
    }
    private static final int ARC_INS_ADD = (int)12L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ADD = 12
     * }
     */
    public static int ARC_INS_ADD() {
        return ARC_INS_ADD;
    }
    private static final int ARC_INS_ADD_F = (int)13L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ADD_F = 13
     * }
     */
    public static int ARC_INS_ADD_F() {
        return ARC_INS_ADD_F;
    }
    private static final int ARC_INS_AND = (int)14L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_AND = 14
     * }
     */
    public static int ARC_INS_AND() {
        return ARC_INS_AND;
    }
    private static final int ARC_INS_AND_F = (int)15L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_AND_F = 15
     * }
     */
    public static int ARC_INS_AND_F() {
        return ARC_INS_AND_F;
    }
    private static final int ARC_INS_ASL_S = (int)16L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ASL_S = 16
     * }
     */
    public static int ARC_INS_ASL_S() {
        return ARC_INS_ASL_S;
    }
    private static final int ARC_INS_ASL = (int)17L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ASL = 17
     * }
     */
    public static int ARC_INS_ASL() {
        return ARC_INS_ASL;
    }
    private static final int ARC_INS_ASL_F = (int)18L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ASL_F = 18
     * }
     */
    public static int ARC_INS_ASL_F() {
        return ARC_INS_ASL_F;
    }
    private static final int ARC_INS_ASR_S = (int)19L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ASR_S = 19
     * }
     */
    public static int ARC_INS_ASR_S() {
        return ARC_INS_ASR_S;
    }
    private static final int ARC_INS_ASR = (int)20L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ASR = 20
     * }
     */
    public static int ARC_INS_ASR() {
        return ARC_INS_ASR;
    }
    private static final int ARC_INS_ASR_F = (int)21L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ASR_F = 21
     * }
     */
    public static int ARC_INS_ASR_F() {
        return ARC_INS_ASR_F;
    }
    private static final int ARC_INS_BCLR_S = (int)22L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BCLR_S = 22
     * }
     */
    public static int ARC_INS_BCLR_S() {
        return ARC_INS_BCLR_S;
    }
    private static final int ARC_INS_BEQ_S = (int)23L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BEQ_S = 23
     * }
     */
    public static int ARC_INS_BEQ_S() {
        return ARC_INS_BEQ_S;
    }
    private static final int ARC_INS_BGE_S = (int)24L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BGE_S = 24
     * }
     */
    public static int ARC_INS_BGE_S() {
        return ARC_INS_BGE_S;
    }
    private static final int ARC_INS_BGT_S = (int)25L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BGT_S = 25
     * }
     */
    public static int ARC_INS_BGT_S() {
        return ARC_INS_BGT_S;
    }
    private static final int ARC_INS_BHI_S = (int)26L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BHI_S = 26
     * }
     */
    public static int ARC_INS_BHI_S() {
        return ARC_INS_BHI_S;
    }
    private static final int ARC_INS_BHS_S = (int)27L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BHS_S = 27
     * }
     */
    public static int ARC_INS_BHS_S() {
        return ARC_INS_BHS_S;
    }
    private static final int ARC_INS_BL = (int)28L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BL = 28
     * }
     */
    public static int ARC_INS_BL() {
        return ARC_INS_BL;
    }
    private static final int ARC_INS_BLE_S = (int)29L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BLE_S = 29
     * }
     */
    public static int ARC_INS_BLE_S() {
        return ARC_INS_BLE_S;
    }
    private static final int ARC_INS_BLO_S = (int)30L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BLO_S = 30
     * }
     */
    public static int ARC_INS_BLO_S() {
        return ARC_INS_BLO_S;
    }
    private static final int ARC_INS_BLS_S = (int)31L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BLS_S = 31
     * }
     */
    public static int ARC_INS_BLS_S() {
        return ARC_INS_BLS_S;
    }
    private static final int ARC_INS_BLT_S = (int)32L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BLT_S = 32
     * }
     */
    public static int ARC_INS_BLT_S() {
        return ARC_INS_BLT_S;
    }
    private static final int ARC_INS_BL_S = (int)33L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BL_S = 33
     * }
     */
    public static int ARC_INS_BL_S() {
        return ARC_INS_BL_S;
    }
    private static final int ARC_INS_BMSK_S = (int)34L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BMSK_S = 34
     * }
     */
    public static int ARC_INS_BMSK_S() {
        return ARC_INS_BMSK_S;
    }
    private static final int ARC_INS_BNE_S = (int)35L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BNE_S = 35
     * }
     */
    public static int ARC_INS_BNE_S() {
        return ARC_INS_BNE_S;
    }
    private static final int ARC_INS_B = (int)36L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_B = 36
     * }
     */
    public static int ARC_INS_B() {
        return ARC_INS_B;
    }
    private static final int ARC_INS_BREQ_S = (int)37L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BREQ_S = 37
     * }
     */
    public static int ARC_INS_BREQ_S() {
        return ARC_INS_BREQ_S;
    }
    private static final int ARC_INS_BRNE_S = (int)38L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BRNE_S = 38
     * }
     */
    public static int ARC_INS_BRNE_S() {
        return ARC_INS_BRNE_S;
    }
    private static final int ARC_INS_BR = (int)39L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BR = 39
     * }
     */
    public static int ARC_INS_BR() {
        return ARC_INS_BR;
    }
    private static final int ARC_INS_BSET_S = (int)40L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BSET_S = 40
     * }
     */
    public static int ARC_INS_BSET_S() {
        return ARC_INS_BSET_S;
    }
    private static final int ARC_INS_BTST_S = (int)41L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BTST_S = 41
     * }
     */
    public static int ARC_INS_BTST_S() {
        return ARC_INS_BTST_S;
    }
    private static final int ARC_INS_B_S = (int)42L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_B_S = 42
     * }
     */
    public static int ARC_INS_B_S() {
        return ARC_INS_B_S;
    }
    private static final int ARC_INS_CMP_S = (int)43L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_CMP_S = 43
     * }
     */
    public static int ARC_INS_CMP_S() {
        return ARC_INS_CMP_S;
    }
    private static final int ARC_INS_CMP = (int)44L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_CMP = 44
     * }
     */
    public static int ARC_INS_CMP() {
        return ARC_INS_CMP;
    }
    private static final int ARC_INS_LD_S = (int)45L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LD_S = 45
     * }
     */
    public static int ARC_INS_LD_S() {
        return ARC_INS_LD_S;
    }
    private static final int ARC_INS_MOV_S = (int)46L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_MOV_S = 46
     * }
     */
    public static int ARC_INS_MOV_S() {
        return ARC_INS_MOV_S;
    }
    private static final int ARC_INS_EI_S = (int)47L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_EI_S = 47
     * }
     */
    public static int ARC_INS_EI_S() {
        return ARC_INS_EI_S;
    }
    private static final int ARC_INS_ENTER_S = (int)48L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ENTER_S = 48
     * }
     */
    public static int ARC_INS_ENTER_S() {
        return ARC_INS_ENTER_S;
    }
    private static final int ARC_INS_FFS_F = (int)49L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_FFS_F = 49
     * }
     */
    public static int ARC_INS_FFS_F() {
        return ARC_INS_FFS_F;
    }
    private static final int ARC_INS_FFS = (int)50L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_FFS = 50
     * }
     */
    public static int ARC_INS_FFS() {
        return ARC_INS_FFS;
    }
    private static final int ARC_INS_FLS_F = (int)51L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_FLS_F = 51
     * }
     */
    public static int ARC_INS_FLS_F() {
        return ARC_INS_FLS_F;
    }
    private static final int ARC_INS_FLS = (int)52L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_FLS = 52
     * }
     */
    public static int ARC_INS_FLS() {
        return ARC_INS_FLS;
    }
    private static final int ARC_INS_ABS_S = (int)53L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ABS_S = 53
     * }
     */
    public static int ARC_INS_ABS_S() {
        return ARC_INS_ABS_S;
    }
    private static final int ARC_INS_ADD1_S = (int)54L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ADD1_S = 54
     * }
     */
    public static int ARC_INS_ADD1_S() {
        return ARC_INS_ADD1_S;
    }
    private static final int ARC_INS_ADD2_S = (int)55L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ADD2_S = 55
     * }
     */
    public static int ARC_INS_ADD2_S() {
        return ARC_INS_ADD2_S;
    }
    private static final int ARC_INS_ADD3_S = (int)56L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ADD3_S = 56
     * }
     */
    public static int ARC_INS_ADD3_S() {
        return ARC_INS_ADD3_S;
    }
    private static final int ARC_INS_AND_S = (int)57L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_AND_S = 57
     * }
     */
    public static int ARC_INS_AND_S() {
        return ARC_INS_AND_S;
    }
    private static final int ARC_INS_BIC_S = (int)58L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BIC_S = 58
     * }
     */
    public static int ARC_INS_BIC_S() {
        return ARC_INS_BIC_S;
    }
    private static final int ARC_INS_BRK_S = (int)59L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_BRK_S = 59
     * }
     */
    public static int ARC_INS_BRK_S() {
        return ARC_INS_BRK_S;
    }
    private static final int ARC_INS_EXTB_S = (int)60L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_EXTB_S = 60
     * }
     */
    public static int ARC_INS_EXTB_S() {
        return ARC_INS_EXTB_S;
    }
    private static final int ARC_INS_EXTH_S = (int)61L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_EXTH_S = 61
     * }
     */
    public static int ARC_INS_EXTH_S() {
        return ARC_INS_EXTH_S;
    }
    private static final int ARC_INS_JEQ_S = (int)62L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_JEQ_S = 62
     * }
     */
    public static int ARC_INS_JEQ_S() {
        return ARC_INS_JEQ_S;
    }
    private static final int ARC_INS_JL_S = (int)63L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_JL_S = 63
     * }
     */
    public static int ARC_INS_JL_S() {
        return ARC_INS_JL_S;
    }
    private static final int ARC_INS_JL_S_D = (int)64L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_JL_S_D = 64
     * }
     */
    public static int ARC_INS_JL_S_D() {
        return ARC_INS_JL_S_D;
    }
    private static final int ARC_INS_JNE_S = (int)65L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_JNE_S = 65
     * }
     */
    public static int ARC_INS_JNE_S() {
        return ARC_INS_JNE_S;
    }
    private static final int ARC_INS_J_S = (int)66L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_J_S = 66
     * }
     */
    public static int ARC_INS_J_S() {
        return ARC_INS_J_S;
    }
    private static final int ARC_INS_J_S_D = (int)67L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_J_S_D = 67
     * }
     */
    public static int ARC_INS_J_S_D() {
        return ARC_INS_J_S_D;
    }
    private static final int ARC_INS_LSR_S = (int)68L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LSR_S = 68
     * }
     */
    public static int ARC_INS_LSR_S() {
        return ARC_INS_LSR_S;
    }
    private static final int ARC_INS_MPYUW_S = (int)69L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_MPYUW_S = 69
     * }
     */
    public static int ARC_INS_MPYUW_S() {
        return ARC_INS_MPYUW_S;
    }
    private static final int ARC_INS_MPYW_S = (int)70L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_MPYW_S = 70
     * }
     */
    public static int ARC_INS_MPYW_S() {
        return ARC_INS_MPYW_S;
    }
    private static final int ARC_INS_MPY_S = (int)71L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_MPY_S = 71
     * }
     */
    public static int ARC_INS_MPY_S() {
        return ARC_INS_MPY_S;
    }
    private static final int ARC_INS_NEG_S = (int)72L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_NEG_S = 72
     * }
     */
    public static int ARC_INS_NEG_S() {
        return ARC_INS_NEG_S;
    }
    private static final int ARC_INS_NOP_S = (int)73L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_NOP_S = 73
     * }
     */
    public static int ARC_INS_NOP_S() {
        return ARC_INS_NOP_S;
    }
    private static final int ARC_INS_NOT_S = (int)74L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_NOT_S = 74
     * }
     */
    public static int ARC_INS_NOT_S() {
        return ARC_INS_NOT_S;
    }
    private static final int ARC_INS_OR_S = (int)75L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_OR_S = 75
     * }
     */
    public static int ARC_INS_OR_S() {
        return ARC_INS_OR_S;
    }
    private static final int ARC_INS_SEXB_S = (int)76L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SEXB_S = 76
     * }
     */
    public static int ARC_INS_SEXB_S() {
        return ARC_INS_SEXB_S;
    }
    private static final int ARC_INS_SEXH_S = (int)77L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SEXH_S = 77
     * }
     */
    public static int ARC_INS_SEXH_S() {
        return ARC_INS_SEXH_S;
    }
    private static final int ARC_INS_SUB_S = (int)78L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SUB_S = 78
     * }
     */
    public static int ARC_INS_SUB_S() {
        return ARC_INS_SUB_S;
    }
    private static final int ARC_INS_SUB_S_NE = (int)79L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SUB_S_NE = 79
     * }
     */
    public static int ARC_INS_SUB_S_NE() {
        return ARC_INS_SUB_S_NE;
    }
    private static final int ARC_INS_SWI_S = (int)80L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SWI_S = 80
     * }
     */
    public static int ARC_INS_SWI_S() {
        return ARC_INS_SWI_S;
    }
    private static final int ARC_INS_TRAP_S = (int)81L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_TRAP_S = 81
     * }
     */
    public static int ARC_INS_TRAP_S() {
        return ARC_INS_TRAP_S;
    }
    private static final int ARC_INS_TST_S = (int)82L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_TST_S = 82
     * }
     */
    public static int ARC_INS_TST_S() {
        return ARC_INS_TST_S;
    }
    private static final int ARC_INS_UNIMP_S = (int)83L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_UNIMP_S = 83
     * }
     */
    public static int ARC_INS_UNIMP_S() {
        return ARC_INS_UNIMP_S;
    }
    private static final int ARC_INS_XOR_S = (int)84L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_XOR_S = 84
     * }
     */
    public static int ARC_INS_XOR_S() {
        return ARC_INS_XOR_S;
    }
    private static final int ARC_INS_LDB_S = (int)85L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDB_S = 85
     * }
     */
    public static int ARC_INS_LDB_S() {
        return ARC_INS_LDB_S;
    }
    private static final int ARC_INS_LDH_S = (int)86L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDH_S = 86
     * }
     */
    public static int ARC_INS_LDH_S() {
        return ARC_INS_LDH_S;
    }
    private static final int ARC_INS_J = (int)87L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_J = 87
     * }
     */
    public static int ARC_INS_J() {
        return ARC_INS_J;
    }
    private static final int ARC_INS_JL = (int)88L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_JL = 88
     * }
     */
    public static int ARC_INS_JL() {
        return ARC_INS_JL;
    }
    private static final int ARC_INS_JLI_S = (int)89L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_JLI_S = 89
     * }
     */
    public static int ARC_INS_JLI_S() {
        return ARC_INS_JLI_S;
    }
    private static final int ARC_INS_LDB_AB = (int)90L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDB_AB = 90
     * }
     */
    public static int ARC_INS_LDB_AB() {
        return ARC_INS_LDB_AB;
    }
    private static final int ARC_INS_LDB_AW = (int)91L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDB_AW = 91
     * }
     */
    public static int ARC_INS_LDB_AW() {
        return ARC_INS_LDB_AW;
    }
    private static final int ARC_INS_LDB_DI_AB = (int)92L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDB_DI_AB = 92
     * }
     */
    public static int ARC_INS_LDB_DI_AB() {
        return ARC_INS_LDB_DI_AB;
    }
    private static final int ARC_INS_LDB_DI_AW = (int)93L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDB_DI_AW = 93
     * }
     */
    public static int ARC_INS_LDB_DI_AW() {
        return ARC_INS_LDB_DI_AW;
    }
    private static final int ARC_INS_LDB_DI = (int)94L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDB_DI = 94
     * }
     */
    public static int ARC_INS_LDB_DI() {
        return ARC_INS_LDB_DI;
    }
    private static final int ARC_INS_LDB_X_AB = (int)95L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDB_X_AB = 95
     * }
     */
    public static int ARC_INS_LDB_X_AB() {
        return ARC_INS_LDB_X_AB;
    }
    private static final int ARC_INS_LDB_X_AW = (int)96L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDB_X_AW = 96
     * }
     */
    public static int ARC_INS_LDB_X_AW() {
        return ARC_INS_LDB_X_AW;
    }
    private static final int ARC_INS_LDB_X_DI_AB = (int)97L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDB_X_DI_AB = 97
     * }
     */
    public static int ARC_INS_LDB_X_DI_AB() {
        return ARC_INS_LDB_X_DI_AB;
    }
    private static final int ARC_INS_LDB_X_DI_AW = (int)98L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDB_X_DI_AW = 98
     * }
     */
    public static int ARC_INS_LDB_X_DI_AW() {
        return ARC_INS_LDB_X_DI_AW;
    }
    private static final int ARC_INS_LDB_X_DI = (int)99L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDB_X_DI = 99
     * }
     */
    public static int ARC_INS_LDB_X_DI() {
        return ARC_INS_LDB_X_DI;
    }
    private static final int ARC_INS_LDB_X = (int)100L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDB_X = 100
     * }
     */
    public static int ARC_INS_LDB_X() {
        return ARC_INS_LDB_X;
    }
    private static final int ARC_INS_LDB = (int)101L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDB = 101
     * }
     */
    public static int ARC_INS_LDB() {
        return ARC_INS_LDB;
    }
    private static final int ARC_INS_LDH_AB = (int)102L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDH_AB = 102
     * }
     */
    public static int ARC_INS_LDH_AB() {
        return ARC_INS_LDH_AB;
    }
    private static final int ARC_INS_LDH_AW = (int)103L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDH_AW = 103
     * }
     */
    public static int ARC_INS_LDH_AW() {
        return ARC_INS_LDH_AW;
    }
    private static final int ARC_INS_LDH_DI_AB = (int)104L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDH_DI_AB = 104
     * }
     */
    public static int ARC_INS_LDH_DI_AB() {
        return ARC_INS_LDH_DI_AB;
    }
    private static final int ARC_INS_LDH_DI_AW = (int)105L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDH_DI_AW = 105
     * }
     */
    public static int ARC_INS_LDH_DI_AW() {
        return ARC_INS_LDH_DI_AW;
    }
    private static final int ARC_INS_LDH_DI = (int)106L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDH_DI = 106
     * }
     */
    public static int ARC_INS_LDH_DI() {
        return ARC_INS_LDH_DI;
    }
    private static final int ARC_INS_LDH_S_X = (int)107L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDH_S_X = 107
     * }
     */
    public static int ARC_INS_LDH_S_X() {
        return ARC_INS_LDH_S_X;
    }
    private static final int ARC_INS_LDH_X_AB = (int)108L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDH_X_AB = 108
     * }
     */
    public static int ARC_INS_LDH_X_AB() {
        return ARC_INS_LDH_X_AB;
    }
    private static final int ARC_INS_LDH_X_AW = (int)109L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDH_X_AW = 109
     * }
     */
    public static int ARC_INS_LDH_X_AW() {
        return ARC_INS_LDH_X_AW;
    }
    private static final int ARC_INS_LDH_X_DI_AB = (int)110L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDH_X_DI_AB = 110
     * }
     */
    public static int ARC_INS_LDH_X_DI_AB() {
        return ARC_INS_LDH_X_DI_AB;
    }
    private static final int ARC_INS_LDH_X_DI_AW = (int)111L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDH_X_DI_AW = 111
     * }
     */
    public static int ARC_INS_LDH_X_DI_AW() {
        return ARC_INS_LDH_X_DI_AW;
    }
    private static final int ARC_INS_LDH_X_DI = (int)112L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDH_X_DI = 112
     * }
     */
    public static int ARC_INS_LDH_X_DI() {
        return ARC_INS_LDH_X_DI;
    }
    private static final int ARC_INS_LDH_X = (int)113L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDH_X = 113
     * }
     */
    public static int ARC_INS_LDH_X() {
        return ARC_INS_LDH_X;
    }
    private static final int ARC_INS_LDH = (int)114L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDH = 114
     * }
     */
    public static int ARC_INS_LDH() {
        return ARC_INS_LDH;
    }
    private static final int ARC_INS_LDI_S = (int)115L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LDI_S = 115
     * }
     */
    public static int ARC_INS_LDI_S() {
        return ARC_INS_LDI_S;
    }
    private static final int ARC_INS_LD_AB = (int)116L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LD_AB = 116
     * }
     */
    public static int ARC_INS_LD_AB() {
        return ARC_INS_LD_AB;
    }
    private static final int ARC_INS_LD_AW = (int)117L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LD_AW = 117
     * }
     */
    public static int ARC_INS_LD_AW() {
        return ARC_INS_LD_AW;
    }
    private static final int ARC_INS_LD_DI_AB = (int)118L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LD_DI_AB = 118
     * }
     */
    public static int ARC_INS_LD_DI_AB() {
        return ARC_INS_LD_DI_AB;
    }
    private static final int ARC_INS_LD_DI_AW = (int)119L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LD_DI_AW = 119
     * }
     */
    public static int ARC_INS_LD_DI_AW() {
        return ARC_INS_LD_DI_AW;
    }
    private static final int ARC_INS_LD_DI = (int)120L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LD_DI = 120
     * }
     */
    public static int ARC_INS_LD_DI() {
        return ARC_INS_LD_DI;
    }
    private static final int ARC_INS_LD_S_AS = (int)121L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LD_S_AS = 121
     * }
     */
    public static int ARC_INS_LD_S_AS() {
        return ARC_INS_LD_S_AS;
    }
    private static final int ARC_INS_LD = (int)122L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LD = 122
     * }
     */
    public static int ARC_INS_LD() {
        return ARC_INS_LD;
    }
    private static final int ARC_INS_LEAVE_S = (int)123L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LEAVE_S = 123
     * }
     */
    public static int ARC_INS_LEAVE_S() {
        return ARC_INS_LEAVE_S;
    }
    private static final int ARC_INS_LR = (int)124L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LR = 124
     * }
     */
    public static int ARC_INS_LR() {
        return ARC_INS_LR;
    }
    private static final int ARC_INS_LSR = (int)125L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LSR = 125
     * }
     */
    public static int ARC_INS_LSR() {
        return ARC_INS_LSR;
    }
    private static final int ARC_INS_LSR_F = (int)126L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_LSR_F = 126
     * }
     */
    public static int ARC_INS_LSR_F() {
        return ARC_INS_LSR_F;
    }
    private static final int ARC_INS_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_MAX = 127
     * }
     */
    public static int ARC_INS_MAX() {
        return ARC_INS_MAX;
    }
    private static final int ARC_INS_MAX_F = (int)128L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_MAX_F = 128
     * }
     */
    public static int ARC_INS_MAX_F() {
        return ARC_INS_MAX_F;
    }
    private static final int ARC_INS_MIN = (int)129L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_MIN = 129
     * }
     */
    public static int ARC_INS_MIN() {
        return ARC_INS_MIN;
    }
    private static final int ARC_INS_MIN_F = (int)130L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_MIN_F = 130
     * }
     */
    public static int ARC_INS_MIN_F() {
        return ARC_INS_MIN_F;
    }
    private static final int ARC_INS_MOV_S_NE = (int)131L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_MOV_S_NE = 131
     * }
     */
    public static int ARC_INS_MOV_S_NE() {
        return ARC_INS_MOV_S_NE;
    }
    private static final int ARC_INS_MOV = (int)132L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_MOV = 132
     * }
     */
    public static int ARC_INS_MOV() {
        return ARC_INS_MOV;
    }
    private static final int ARC_INS_MOV_F = (int)133L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_MOV_F = 133
     * }
     */
    public static int ARC_INS_MOV_F() {
        return ARC_INS_MOV_F;
    }
    private static final int ARC_INS_MPYMU = (int)134L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_MPYMU = 134
     * }
     */
    public static int ARC_INS_MPYMU() {
        return ARC_INS_MPYMU;
    }
    private static final int ARC_INS_MPYMU_F = (int)135L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_MPYMU_F = 135
     * }
     */
    public static int ARC_INS_MPYMU_F() {
        return ARC_INS_MPYMU_F;
    }
    private static final int ARC_INS_MPYM = (int)136L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_MPYM = 136
     * }
     */
    public static int ARC_INS_MPYM() {
        return ARC_INS_MPYM;
    }
    private static final int ARC_INS_MPYM_F = (int)137L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_MPYM_F = 137
     * }
     */
    public static int ARC_INS_MPYM_F() {
        return ARC_INS_MPYM_F;
    }
    private static final int ARC_INS_MPY = (int)138L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_MPY = 138
     * }
     */
    public static int ARC_INS_MPY() {
        return ARC_INS_MPY;
    }
    private static final int ARC_INS_MPY_F = (int)139L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_MPY_F = 139
     * }
     */
    public static int ARC_INS_MPY_F() {
        return ARC_INS_MPY_F;
    }
    private static final int ARC_INS_NORMH_F = (int)140L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_NORMH_F = 140
     * }
     */
    public static int ARC_INS_NORMH_F() {
        return ARC_INS_NORMH_F;
    }
    private static final int ARC_INS_NORMH = (int)141L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_NORMH = 141
     * }
     */
    public static int ARC_INS_NORMH() {
        return ARC_INS_NORMH;
    }
    private static final int ARC_INS_NORM_F = (int)142L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_NORM_F = 142
     * }
     */
    public static int ARC_INS_NORM_F() {
        return ARC_INS_NORM_F;
    }
    private static final int ARC_INS_NORM = (int)143L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_NORM = 143
     * }
     */
    public static int ARC_INS_NORM() {
        return ARC_INS_NORM;
    }
    private static final int ARC_INS_OR = (int)144L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_OR = 144
     * }
     */
    public static int ARC_INS_OR() {
        return ARC_INS_OR;
    }
    private static final int ARC_INS_OR_F = (int)145L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_OR_F = 145
     * }
     */
    public static int ARC_INS_OR_F() {
        return ARC_INS_OR_F;
    }
    private static final int ARC_INS_POP_S = (int)146L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_POP_S = 146
     * }
     */
    public static int ARC_INS_POP_S() {
        return ARC_INS_POP_S;
    }
    private static final int ARC_INS_PUSH_S = (int)147L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_PUSH_S = 147
     * }
     */
    public static int ARC_INS_PUSH_S() {
        return ARC_INS_PUSH_S;
    }
    private static final int ARC_INS_ROR = (int)148L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ROR = 148
     * }
     */
    public static int ARC_INS_ROR() {
        return ARC_INS_ROR;
    }
    private static final int ARC_INS_ROR_F = (int)149L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ROR_F = 149
     * }
     */
    public static int ARC_INS_ROR_F() {
        return ARC_INS_ROR_F;
    }
    private static final int ARC_INS_RSUB = (int)150L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_RSUB = 150
     * }
     */
    public static int ARC_INS_RSUB() {
        return ARC_INS_RSUB;
    }
    private static final int ARC_INS_RSUB_F = (int)151L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_RSUB_F = 151
     * }
     */
    public static int ARC_INS_RSUB_F() {
        return ARC_INS_RSUB_F;
    }
    private static final int ARC_INS_SBC = (int)152L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SBC = 152
     * }
     */
    public static int ARC_INS_SBC() {
        return ARC_INS_SBC;
    }
    private static final int ARC_INS_SBC_F = (int)153L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SBC_F = 153
     * }
     */
    public static int ARC_INS_SBC_F() {
        return ARC_INS_SBC_F;
    }
    private static final int ARC_INS_SETEQ = (int)154L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SETEQ = 154
     * }
     */
    public static int ARC_INS_SETEQ() {
        return ARC_INS_SETEQ;
    }
    private static final int ARC_INS_SETEQ_F = (int)155L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SETEQ_F = 155
     * }
     */
    public static int ARC_INS_SETEQ_F() {
        return ARC_INS_SETEQ_F;
    }
    private static final int ARC_INS_SEXB_F = (int)156L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SEXB_F = 156
     * }
     */
    public static int ARC_INS_SEXB_F() {
        return ARC_INS_SEXB_F;
    }
    private static final int ARC_INS_SEXB = (int)157L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SEXB = 157
     * }
     */
    public static int ARC_INS_SEXB() {
        return ARC_INS_SEXB;
    }
    private static final int ARC_INS_SEXH_F = (int)158L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SEXH_F = 158
     * }
     */
    public static int ARC_INS_SEXH_F() {
        return ARC_INS_SEXH_F;
    }
    private static final int ARC_INS_SEXH = (int)159L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SEXH = 159
     * }
     */
    public static int ARC_INS_SEXH() {
        return ARC_INS_SEXH;
    }
    private static final int ARC_INS_STB_S = (int)160L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_STB_S = 160
     * }
     */
    public static int ARC_INS_STB_S() {
        return ARC_INS_STB_S;
    }
    private static final int ARC_INS_ST_S = (int)161L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ST_S = 161
     * }
     */
    public static int ARC_INS_ST_S() {
        return ARC_INS_ST_S;
    }
    private static final int ARC_INS_STB_AB = (int)162L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_STB_AB = 162
     * }
     */
    public static int ARC_INS_STB_AB() {
        return ARC_INS_STB_AB;
    }
    private static final int ARC_INS_STB_AW = (int)163L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_STB_AW = 163
     * }
     */
    public static int ARC_INS_STB_AW() {
        return ARC_INS_STB_AW;
    }
    private static final int ARC_INS_STB_DI_AB = (int)164L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_STB_DI_AB = 164
     * }
     */
    public static int ARC_INS_STB_DI_AB() {
        return ARC_INS_STB_DI_AB;
    }
    private static final int ARC_INS_STB_DI_AW = (int)165L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_STB_DI_AW = 165
     * }
     */
    public static int ARC_INS_STB_DI_AW() {
        return ARC_INS_STB_DI_AW;
    }
    private static final int ARC_INS_STB_DI = (int)166L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_STB_DI = 166
     * }
     */
    public static int ARC_INS_STB_DI() {
        return ARC_INS_STB_DI;
    }
    private static final int ARC_INS_STB = (int)167L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_STB = 167
     * }
     */
    public static int ARC_INS_STB() {
        return ARC_INS_STB;
    }
    private static final int ARC_INS_STH_AB = (int)168L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_STH_AB = 168
     * }
     */
    public static int ARC_INS_STH_AB() {
        return ARC_INS_STH_AB;
    }
    private static final int ARC_INS_STH_AW = (int)169L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_STH_AW = 169
     * }
     */
    public static int ARC_INS_STH_AW() {
        return ARC_INS_STH_AW;
    }
    private static final int ARC_INS_STH_DI_AB = (int)170L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_STH_DI_AB = 170
     * }
     */
    public static int ARC_INS_STH_DI_AB() {
        return ARC_INS_STH_DI_AB;
    }
    private static final int ARC_INS_STH_DI_AW = (int)171L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_STH_DI_AW = 171
     * }
     */
    public static int ARC_INS_STH_DI_AW() {
        return ARC_INS_STH_DI_AW;
    }
    private static final int ARC_INS_STH_DI = (int)172L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_STH_DI = 172
     * }
     */
    public static int ARC_INS_STH_DI() {
        return ARC_INS_STH_DI;
    }
    private static final int ARC_INS_STH_S = (int)173L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_STH_S = 173
     * }
     */
    public static int ARC_INS_STH_S() {
        return ARC_INS_STH_S;
    }
    private static final int ARC_INS_STH = (int)174L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_STH = 174
     * }
     */
    public static int ARC_INS_STH() {
        return ARC_INS_STH;
    }
    private static final int ARC_INS_ST_AB = (int)175L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ST_AB = 175
     * }
     */
    public static int ARC_INS_ST_AB() {
        return ARC_INS_ST_AB;
    }
    private static final int ARC_INS_ST_AW = (int)176L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ST_AW = 176
     * }
     */
    public static int ARC_INS_ST_AW() {
        return ARC_INS_ST_AW;
    }
    private static final int ARC_INS_ST_DI_AB = (int)177L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ST_DI_AB = 177
     * }
     */
    public static int ARC_INS_ST_DI_AB() {
        return ARC_INS_ST_DI_AB;
    }
    private static final int ARC_INS_ST_DI_AW = (int)178L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ST_DI_AW = 178
     * }
     */
    public static int ARC_INS_ST_DI_AW() {
        return ARC_INS_ST_DI_AW;
    }
    private static final int ARC_INS_ST_DI = (int)179L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ST_DI = 179
     * }
     */
    public static int ARC_INS_ST_DI() {
        return ARC_INS_ST_DI;
    }
    private static final int ARC_INS_ST = (int)180L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_ST = 180
     * }
     */
    public static int ARC_INS_ST() {
        return ARC_INS_ST;
    }
    private static final int ARC_INS_SUB1 = (int)181L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SUB1 = 181
     * }
     */
    public static int ARC_INS_SUB1() {
        return ARC_INS_SUB1;
    }
    private static final int ARC_INS_SUB1_F = (int)182L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SUB1_F = 182
     * }
     */
    public static int ARC_INS_SUB1_F() {
        return ARC_INS_SUB1_F;
    }
    private static final int ARC_INS_SUB2 = (int)183L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SUB2 = 183
     * }
     */
    public static int ARC_INS_SUB2() {
        return ARC_INS_SUB2;
    }
    private static final int ARC_INS_SUB2_F = (int)184L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SUB2_F = 184
     * }
     */
    public static int ARC_INS_SUB2_F() {
        return ARC_INS_SUB2_F;
    }
    private static final int ARC_INS_SUB3 = (int)185L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SUB3 = 185
     * }
     */
    public static int ARC_INS_SUB3() {
        return ARC_INS_SUB3;
    }
    private static final int ARC_INS_SUB3_F = (int)186L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SUB3_F = 186
     * }
     */
    public static int ARC_INS_SUB3_F() {
        return ARC_INS_SUB3_F;
    }
    private static final int ARC_INS_SUB = (int)187L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SUB = 187
     * }
     */
    public static int ARC_INS_SUB() {
        return ARC_INS_SUB;
    }
    private static final int ARC_INS_SUB_F = (int)188L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_SUB_F = 188
     * }
     */
    public static int ARC_INS_SUB_F() {
        return ARC_INS_SUB_F;
    }
    private static final int ARC_INS_XOR = (int)189L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_XOR = 189
     * }
     */
    public static int ARC_INS_XOR() {
        return ARC_INS_XOR;
    }
    private static final int ARC_INS_XOR_F = (int)190L;
    /**
     * {@snippet lang=c :
     * enum arc_insn.ARC_INS_XOR_F = 190
     * }
     */
    public static int ARC_INS_XOR_F() {
        return ARC_INS_XOR_F;
    }
    private static final int ARC_GRP_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum arc_insn_group.ARC_GRP_INVALID = 0
     * }
     */
    public static int ARC_GRP_INVALID() {
        return ARC_GRP_INVALID;
    }
    private static final int ARC_GRP_JUMP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum arc_insn_group.ARC_GRP_JUMP = 1
     * }
     */
    public static int ARC_GRP_JUMP() {
        return ARC_GRP_JUMP;
    }
    private static final int ARC_GRP_CALL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum arc_insn_group.ARC_GRP_CALL = 2
     * }
     */
    public static int ARC_GRP_CALL() {
        return ARC_GRP_CALL;
    }
    private static final int ARC_GRP_RET = (int)3L;
    /**
     * {@snippet lang=c :
     * enum arc_insn_group.ARC_GRP_RET = 3
     * }
     */
    public static int ARC_GRP_RET() {
        return ARC_GRP_RET;
    }
    private static final int ARC_GRP_BRANCH_RELATIVE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum arc_insn_group.ARC_GRP_BRANCH_RELATIVE = 4
     * }
     */
    public static int ARC_GRP_BRANCH_RELATIVE() {
        return ARC_GRP_BRANCH_RELATIVE;
    }
    private static final int ARC_GRP_ENDING = (int)5L;
    /**
     * {@snippet lang=c :
     * enum arc_insn_group.ARC_GRP_ENDING = 5
     * }
     */
    public static int ARC_GRP_ENDING() {
        return ARC_GRP_ENDING;
    }
    private static final int CS_ERR_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cs_err.CS_ERR_OK = 0
     * }
     */
    public static int CS_ERR_OK() {
        return CS_ERR_OK;
    }
    private static final int CS_ERR_MEM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cs_err.CS_ERR_MEM = 1
     * }
     */
    public static int CS_ERR_MEM() {
        return CS_ERR_MEM;
    }
    private static final int CS_ERR_ARCH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cs_err.CS_ERR_ARCH = 2
     * }
     */
    public static int CS_ERR_ARCH() {
        return CS_ERR_ARCH;
    }
    private static final int CS_ERR_HANDLE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cs_err.CS_ERR_HANDLE = 3
     * }
     */
    public static int CS_ERR_HANDLE() {
        return CS_ERR_HANDLE;
    }
    private static final int CS_ERR_CSH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cs_err.CS_ERR_CSH = 4
     * }
     */
    public static int CS_ERR_CSH() {
        return CS_ERR_CSH;
    }
    private static final int CS_ERR_MODE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum cs_err.CS_ERR_MODE = 5
     * }
     */
    public static int CS_ERR_MODE() {
        return CS_ERR_MODE;
    }
    private static final int CS_ERR_OPTION = (int)6L;
    /**
     * {@snippet lang=c :
     * enum cs_err.CS_ERR_OPTION = 6
     * }
     */
    public static int CS_ERR_OPTION() {
        return CS_ERR_OPTION;
    }
    private static final int CS_ERR_DETAIL = (int)7L;
    /**
     * {@snippet lang=c :
     * enum cs_err.CS_ERR_DETAIL = 7
     * }
     */
    public static int CS_ERR_DETAIL() {
        return CS_ERR_DETAIL;
    }
    private static final int CS_ERR_MEMSETUP = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cs_err.CS_ERR_MEMSETUP = 8
     * }
     */
    public static int CS_ERR_MEMSETUP() {
        return CS_ERR_MEMSETUP;
    }
    private static final int CS_ERR_VERSION = (int)9L;
    /**
     * {@snippet lang=c :
     * enum cs_err.CS_ERR_VERSION = 9
     * }
     */
    public static int CS_ERR_VERSION() {
        return CS_ERR_VERSION;
    }
    private static final int CS_ERR_DIET = (int)10L;
    /**
     * {@snippet lang=c :
     * enum cs_err.CS_ERR_DIET = 10
     * }
     */
    public static int CS_ERR_DIET() {
        return CS_ERR_DIET;
    }
    private static final int CS_ERR_SKIPDATA = (int)11L;
    /**
     * {@snippet lang=c :
     * enum cs_err.CS_ERR_SKIPDATA = 11
     * }
     */
    public static int CS_ERR_SKIPDATA() {
        return CS_ERR_SKIPDATA;
    }
    private static final int CS_ERR_X86_ATT = (int)12L;
    /**
     * {@snippet lang=c :
     * enum cs_err.CS_ERR_X86_ATT = 12
     * }
     */
    public static int CS_ERR_X86_ATT() {
        return CS_ERR_X86_ATT;
    }
    private static final int CS_ERR_X86_INTEL = (int)13L;
    /**
     * {@snippet lang=c :
     * enum cs_err.CS_ERR_X86_INTEL = 13
     * }
     */
    public static int CS_ERR_X86_INTEL() {
        return CS_ERR_X86_INTEL;
    }
    private static final int CS_ERR_X86_MASM = (int)14L;
    /**
     * {@snippet lang=c :
     * enum cs_err.CS_ERR_X86_MASM = 14
     * }
     */
    public static int CS_ERR_X86_MASM() {
        return CS_ERR_X86_MASM;
    }

    private static class cs_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_INT,
            capstone_h.C_POINTER,
            capstone_h.C_POINTER
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_version");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int cs_version(int *major, int *minor)
     * }
     */
    public static FunctionDescriptor cs_version$descriptor() {
        return cs_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int cs_version(int *major, int *minor)
     * }
     */
    public static MethodHandle cs_version$handle() {
        return cs_version.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int cs_version(int *major, int *minor)
     * }
     */
    public static MemorySegment cs_version$address() {
        return cs_version.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int cs_version(int *major, int *minor)
     * }
     */
    public static int cs_version(MemorySegment major, MemorySegment minor) {
        var mh$ = cs_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_version", major, minor);
            }
            return (int)mh$.invokeExact(major, minor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_arm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_arm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_arm()
     * }
     */
    public static FunctionDescriptor cs_arch_register_arm$descriptor() {
        return cs_arch_register_arm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_arm()
     * }
     */
    public static MethodHandle cs_arch_register_arm$handle() {
        return cs_arch_register_arm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_arm()
     * }
     */
    public static MemorySegment cs_arch_register_arm$address() {
        return cs_arch_register_arm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_arm()
     * }
     */
    public static void cs_arch_register_arm() {
        var mh$ = cs_arch_register_arm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_arm");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_aarch64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_aarch64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_aarch64()
     * }
     */
    public static FunctionDescriptor cs_arch_register_aarch64$descriptor() {
        return cs_arch_register_aarch64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_aarch64()
     * }
     */
    public static MethodHandle cs_arch_register_aarch64$handle() {
        return cs_arch_register_aarch64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_aarch64()
     * }
     */
    public static MemorySegment cs_arch_register_aarch64$address() {
        return cs_arch_register_aarch64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_aarch64()
     * }
     */
    public static void cs_arch_register_aarch64() {
        var mh$ = cs_arch_register_aarch64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_aarch64");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_mips {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_mips");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_mips()
     * }
     */
    public static FunctionDescriptor cs_arch_register_mips$descriptor() {
        return cs_arch_register_mips.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_mips()
     * }
     */
    public static MethodHandle cs_arch_register_mips$handle() {
        return cs_arch_register_mips.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_mips()
     * }
     */
    public static MemorySegment cs_arch_register_mips$address() {
        return cs_arch_register_mips.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_mips()
     * }
     */
    public static void cs_arch_register_mips() {
        var mh$ = cs_arch_register_mips.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_mips");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_x86 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_x86");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_x86()
     * }
     */
    public static FunctionDescriptor cs_arch_register_x86$descriptor() {
        return cs_arch_register_x86.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_x86()
     * }
     */
    public static MethodHandle cs_arch_register_x86$handle() {
        return cs_arch_register_x86.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_x86()
     * }
     */
    public static MemorySegment cs_arch_register_x86$address() {
        return cs_arch_register_x86.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_x86()
     * }
     */
    public static void cs_arch_register_x86() {
        var mh$ = cs_arch_register_x86.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_x86");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_powerpc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_powerpc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_powerpc()
     * }
     */
    public static FunctionDescriptor cs_arch_register_powerpc$descriptor() {
        return cs_arch_register_powerpc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_powerpc()
     * }
     */
    public static MethodHandle cs_arch_register_powerpc$handle() {
        return cs_arch_register_powerpc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_powerpc()
     * }
     */
    public static MemorySegment cs_arch_register_powerpc$address() {
        return cs_arch_register_powerpc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_powerpc()
     * }
     */
    public static void cs_arch_register_powerpc() {
        var mh$ = cs_arch_register_powerpc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_powerpc");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_sparc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_sparc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_sparc()
     * }
     */
    public static FunctionDescriptor cs_arch_register_sparc$descriptor() {
        return cs_arch_register_sparc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_sparc()
     * }
     */
    public static MethodHandle cs_arch_register_sparc$handle() {
        return cs_arch_register_sparc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_sparc()
     * }
     */
    public static MemorySegment cs_arch_register_sparc$address() {
        return cs_arch_register_sparc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_sparc()
     * }
     */
    public static void cs_arch_register_sparc() {
        var mh$ = cs_arch_register_sparc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_sparc");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_systemz {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_systemz");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_systemz()
     * }
     */
    public static FunctionDescriptor cs_arch_register_systemz$descriptor() {
        return cs_arch_register_systemz.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_systemz()
     * }
     */
    public static MethodHandle cs_arch_register_systemz$handle() {
        return cs_arch_register_systemz.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_systemz()
     * }
     */
    public static MemorySegment cs_arch_register_systemz$address() {
        return cs_arch_register_systemz.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_systemz()
     * }
     */
    public static void cs_arch_register_systemz() {
        var mh$ = cs_arch_register_systemz.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_systemz");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_xcore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_xcore");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_xcore()
     * }
     */
    public static FunctionDescriptor cs_arch_register_xcore$descriptor() {
        return cs_arch_register_xcore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_xcore()
     * }
     */
    public static MethodHandle cs_arch_register_xcore$handle() {
        return cs_arch_register_xcore.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_xcore()
     * }
     */
    public static MemorySegment cs_arch_register_xcore$address() {
        return cs_arch_register_xcore.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_xcore()
     * }
     */
    public static void cs_arch_register_xcore() {
        var mh$ = cs_arch_register_xcore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_xcore");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_m68k {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_m68k");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_m68k()
     * }
     */
    public static FunctionDescriptor cs_arch_register_m68k$descriptor() {
        return cs_arch_register_m68k.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_m68k()
     * }
     */
    public static MethodHandle cs_arch_register_m68k$handle() {
        return cs_arch_register_m68k.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_m68k()
     * }
     */
    public static MemorySegment cs_arch_register_m68k$address() {
        return cs_arch_register_m68k.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_m68k()
     * }
     */
    public static void cs_arch_register_m68k() {
        var mh$ = cs_arch_register_m68k.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_m68k");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_tms320c64x {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_tms320c64x");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_tms320c64x()
     * }
     */
    public static FunctionDescriptor cs_arch_register_tms320c64x$descriptor() {
        return cs_arch_register_tms320c64x.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_tms320c64x()
     * }
     */
    public static MethodHandle cs_arch_register_tms320c64x$handle() {
        return cs_arch_register_tms320c64x.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_tms320c64x()
     * }
     */
    public static MemorySegment cs_arch_register_tms320c64x$address() {
        return cs_arch_register_tms320c64x.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_tms320c64x()
     * }
     */
    public static void cs_arch_register_tms320c64x() {
        var mh$ = cs_arch_register_tms320c64x.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_tms320c64x");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_m680x {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_m680x");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_m680x()
     * }
     */
    public static FunctionDescriptor cs_arch_register_m680x$descriptor() {
        return cs_arch_register_m680x.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_m680x()
     * }
     */
    public static MethodHandle cs_arch_register_m680x$handle() {
        return cs_arch_register_m680x.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_m680x()
     * }
     */
    public static MemorySegment cs_arch_register_m680x$address() {
        return cs_arch_register_m680x.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_m680x()
     * }
     */
    public static void cs_arch_register_m680x() {
        var mh$ = cs_arch_register_m680x.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_m680x");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_evm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_evm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_evm()
     * }
     */
    public static FunctionDescriptor cs_arch_register_evm$descriptor() {
        return cs_arch_register_evm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_evm()
     * }
     */
    public static MethodHandle cs_arch_register_evm$handle() {
        return cs_arch_register_evm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_evm()
     * }
     */
    public static MemorySegment cs_arch_register_evm$address() {
        return cs_arch_register_evm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_evm()
     * }
     */
    public static void cs_arch_register_evm() {
        var mh$ = cs_arch_register_evm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_evm");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_mos65xx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_mos65xx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_mos65xx()
     * }
     */
    public static FunctionDescriptor cs_arch_register_mos65xx$descriptor() {
        return cs_arch_register_mos65xx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_mos65xx()
     * }
     */
    public static MethodHandle cs_arch_register_mos65xx$handle() {
        return cs_arch_register_mos65xx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_mos65xx()
     * }
     */
    public static MemorySegment cs_arch_register_mos65xx$address() {
        return cs_arch_register_mos65xx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_mos65xx()
     * }
     */
    public static void cs_arch_register_mos65xx() {
        var mh$ = cs_arch_register_mos65xx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_mos65xx");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_wasm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_wasm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_wasm()
     * }
     */
    public static FunctionDescriptor cs_arch_register_wasm$descriptor() {
        return cs_arch_register_wasm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_wasm()
     * }
     */
    public static MethodHandle cs_arch_register_wasm$handle() {
        return cs_arch_register_wasm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_wasm()
     * }
     */
    public static MemorySegment cs_arch_register_wasm$address() {
        return cs_arch_register_wasm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_wasm()
     * }
     */
    public static void cs_arch_register_wasm() {
        var mh$ = cs_arch_register_wasm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_wasm");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_bpf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_bpf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_bpf()
     * }
     */
    public static FunctionDescriptor cs_arch_register_bpf$descriptor() {
        return cs_arch_register_bpf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_bpf()
     * }
     */
    public static MethodHandle cs_arch_register_bpf$handle() {
        return cs_arch_register_bpf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_bpf()
     * }
     */
    public static MemorySegment cs_arch_register_bpf$address() {
        return cs_arch_register_bpf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_bpf()
     * }
     */
    public static void cs_arch_register_bpf() {
        var mh$ = cs_arch_register_bpf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_bpf");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_riscv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_riscv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_riscv()
     * }
     */
    public static FunctionDescriptor cs_arch_register_riscv$descriptor() {
        return cs_arch_register_riscv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_riscv()
     * }
     */
    public static MethodHandle cs_arch_register_riscv$handle() {
        return cs_arch_register_riscv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_riscv()
     * }
     */
    public static MemorySegment cs_arch_register_riscv$address() {
        return cs_arch_register_riscv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_riscv()
     * }
     */
    public static void cs_arch_register_riscv() {
        var mh$ = cs_arch_register_riscv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_riscv");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_sh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_sh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_sh()
     * }
     */
    public static FunctionDescriptor cs_arch_register_sh$descriptor() {
        return cs_arch_register_sh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_sh()
     * }
     */
    public static MethodHandle cs_arch_register_sh$handle() {
        return cs_arch_register_sh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_sh()
     * }
     */
    public static MemorySegment cs_arch_register_sh$address() {
        return cs_arch_register_sh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_sh()
     * }
     */
    public static void cs_arch_register_sh() {
        var mh$ = cs_arch_register_sh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_sh");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_tricore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_tricore");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_tricore()
     * }
     */
    public static FunctionDescriptor cs_arch_register_tricore$descriptor() {
        return cs_arch_register_tricore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_tricore()
     * }
     */
    public static MethodHandle cs_arch_register_tricore$handle() {
        return cs_arch_register_tricore.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_tricore()
     * }
     */
    public static MemorySegment cs_arch_register_tricore$address() {
        return cs_arch_register_tricore.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_tricore()
     * }
     */
    public static void cs_arch_register_tricore() {
        var mh$ = cs_arch_register_tricore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_tricore");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_alpha");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_alpha()
     * }
     */
    public static FunctionDescriptor cs_arch_register_alpha$descriptor() {
        return cs_arch_register_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_alpha()
     * }
     */
    public static MethodHandle cs_arch_register_alpha$handle() {
        return cs_arch_register_alpha.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_alpha()
     * }
     */
    public static MemorySegment cs_arch_register_alpha$address() {
        return cs_arch_register_alpha.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_alpha()
     * }
     */
    public static void cs_arch_register_alpha() {
        var mh$ = cs_arch_register_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_alpha");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_loongarch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_loongarch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_loongarch()
     * }
     */
    public static FunctionDescriptor cs_arch_register_loongarch$descriptor() {
        return cs_arch_register_loongarch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_loongarch()
     * }
     */
    public static MethodHandle cs_arch_register_loongarch$handle() {
        return cs_arch_register_loongarch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_loongarch()
     * }
     */
    public static MemorySegment cs_arch_register_loongarch$address() {
        return cs_arch_register_loongarch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_loongarch()
     * }
     */
    public static void cs_arch_register_loongarch() {
        var mh$ = cs_arch_register_loongarch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_loongarch");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_arch_register_arc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_arch_register_arc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_arch_register_arc()
     * }
     */
    public static FunctionDescriptor cs_arch_register_arc$descriptor() {
        return cs_arch_register_arc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_arch_register_arc()
     * }
     */
    public static MethodHandle cs_arch_register_arc$handle() {
        return cs_arch_register_arc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_arch_register_arc()
     * }
     */
    public static MemorySegment cs_arch_register_arc$address() {
        return cs_arch_register_arc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_arch_register_arc()
     * }
     */
    public static void cs_arch_register_arc() {
        var mh$ = cs_arch_register_arc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_arch_register_arc");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_support {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_BOOL,
            capstone_h.C_INT
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_support");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool cs_support(int query)
     * }
     */
    public static FunctionDescriptor cs_support$descriptor() {
        return cs_support.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool cs_support(int query)
     * }
     */
    public static MethodHandle cs_support$handle() {
        return cs_support.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool cs_support(int query)
     * }
     */
    public static MemorySegment cs_support$address() {
        return cs_support.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool cs_support(int query)
     * }
     */
    public static boolean cs_support(int query) {
        var mh$ = cs_support.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_support", query);
            }
            return (boolean)mh$.invokeExact(query);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_INT,
            capstone_h.C_INT,
            capstone_h.C_INT,
            capstone_h.C_POINTER
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_open");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cs_err cs_open(cs_arch arch, cs_mode mode, csh *handle)
     * }
     */
    public static FunctionDescriptor cs_open$descriptor() {
        return cs_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cs_err cs_open(cs_arch arch, cs_mode mode, csh *handle)
     * }
     */
    public static MethodHandle cs_open$handle() {
        return cs_open.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cs_err cs_open(cs_arch arch, cs_mode mode, csh *handle)
     * }
     */
    public static MemorySegment cs_open$address() {
        return cs_open.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cs_err cs_open(cs_arch arch, cs_mode mode, csh *handle)
     * }
     */
    public static int cs_open(int arch, int mode, MemorySegment handle) {
        var mh$ = cs_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_open", arch, mode, handle);
            }
            return (int)mh$.invokeExact(arch, mode, handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_INT,
            capstone_h.C_POINTER
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cs_err cs_close(csh *handle)
     * }
     */
    public static FunctionDescriptor cs_close$descriptor() {
        return cs_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cs_err cs_close(csh *handle)
     * }
     */
    public static MethodHandle cs_close$handle() {
        return cs_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cs_err cs_close(csh *handle)
     * }
     */
    public static MemorySegment cs_close$address() {
        return cs_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cs_err cs_close(csh *handle)
     * }
     */
    public static int cs_close(MemorySegment handle) {
        var mh$ = cs_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_close", handle);
            }
            return (int)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_option {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_INT,
            capstone_h.C_LONG_LONG,
            capstone_h.C_INT,
            capstone_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_option");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cs_err cs_option(csh handle, cs_opt_type type, size_t value)
     * }
     */
    public static FunctionDescriptor cs_option$descriptor() {
        return cs_option.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cs_err cs_option(csh handle, cs_opt_type type, size_t value)
     * }
     */
    public static MethodHandle cs_option$handle() {
        return cs_option.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cs_err cs_option(csh handle, cs_opt_type type, size_t value)
     * }
     */
    public static MemorySegment cs_option$address() {
        return cs_option.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cs_err cs_option(csh handle, cs_opt_type type, size_t value)
     * }
     */
    public static int cs_option(long handle, int type, long value) {
        var mh$ = cs_option.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_option", handle, type, value);
            }
            return (int)mh$.invokeExact(handle, type, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_errno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_INT,
            capstone_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_errno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cs_err cs_errno(csh handle)
     * }
     */
    public static FunctionDescriptor cs_errno$descriptor() {
        return cs_errno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cs_err cs_errno(csh handle)
     * }
     */
    public static MethodHandle cs_errno$handle() {
        return cs_errno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cs_err cs_errno(csh handle)
     * }
     */
    public static MemorySegment cs_errno$address() {
        return cs_errno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cs_err cs_errno(csh handle)
     * }
     */
    public static int cs_errno(long handle) {
        var mh$ = cs_errno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_errno", handle);
            }
            return (int)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_strerror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_POINTER,
            capstone_h.C_INT
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_strerror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *cs_strerror(cs_err code)
     * }
     */
    public static FunctionDescriptor cs_strerror$descriptor() {
        return cs_strerror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *cs_strerror(cs_err code)
     * }
     */
    public static MethodHandle cs_strerror$handle() {
        return cs_strerror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *cs_strerror(cs_err code)
     * }
     */
    public static MemorySegment cs_strerror$address() {
        return cs_strerror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *cs_strerror(cs_err code)
     * }
     */
    public static MemorySegment cs_strerror(int code) {
        var mh$ = cs_strerror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_strerror", code);
            }
            return (MemorySegment)mh$.invokeExact(code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_disasm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_LONG_LONG,
            capstone_h.C_LONG_LONG,
            capstone_h.C_POINTER,
            capstone_h.C_LONG_LONG,
            capstone_h.C_LONG_LONG,
            capstone_h.C_LONG_LONG,
            capstone_h.C_POINTER
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_disasm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t cs_disasm(csh handle, const uint8_t *code, size_t code_size, uint64_t address, size_t count, cs_insn **insn)
     * }
     */
    public static FunctionDescriptor cs_disasm$descriptor() {
        return cs_disasm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t cs_disasm(csh handle, const uint8_t *code, size_t code_size, uint64_t address, size_t count, cs_insn **insn)
     * }
     */
    public static MethodHandle cs_disasm$handle() {
        return cs_disasm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t cs_disasm(csh handle, const uint8_t *code, size_t code_size, uint64_t address, size_t count, cs_insn **insn)
     * }
     */
    public static MemorySegment cs_disasm$address() {
        return cs_disasm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t cs_disasm(csh handle, const uint8_t *code, size_t code_size, uint64_t address, size_t count, cs_insn **insn)
     * }
     */
    public static long cs_disasm(long handle, MemorySegment code, long code_size, long address, long count, MemorySegment insn) {
        var mh$ = cs_disasm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_disasm", handle, code, code_size, address, count, insn);
            }
            return (long)mh$.invokeExact(handle, code, code_size, address, count, insn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            capstone_h.C_POINTER,
            capstone_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cs_free(cs_insn *insn, size_t count)
     * }
     */
    public static FunctionDescriptor cs_free$descriptor() {
        return cs_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cs_free(cs_insn *insn, size_t count)
     * }
     */
    public static MethodHandle cs_free$handle() {
        return cs_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cs_free(cs_insn *insn, size_t count)
     * }
     */
    public static MemorySegment cs_free$address() {
        return cs_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cs_free(cs_insn *insn, size_t count)
     * }
     */
    public static void cs_free(MemorySegment insn, long count) {
        var mh$ = cs_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_free", insn, count);
            }
            mh$.invokeExact(insn, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_POINTER,
            capstone_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_malloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cs_insn *cs_malloc(csh handle)
     * }
     */
    public static FunctionDescriptor cs_malloc$descriptor() {
        return cs_malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cs_insn *cs_malloc(csh handle)
     * }
     */
    public static MethodHandle cs_malloc$handle() {
        return cs_malloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cs_insn *cs_malloc(csh handle)
     * }
     */
    public static MemorySegment cs_malloc$address() {
        return cs_malloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cs_insn *cs_malloc(csh handle)
     * }
     */
    public static MemorySegment cs_malloc(long handle) {
        var mh$ = cs_malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_malloc", handle);
            }
            return (MemorySegment)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_disasm_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_BOOL,
            capstone_h.C_LONG_LONG,
            capstone_h.C_POINTER,
            capstone_h.C_POINTER,
            capstone_h.C_POINTER,
            capstone_h.C_POINTER
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_disasm_iter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool cs_disasm_iter(csh handle, const uint8_t **code, size_t *size, uint64_t *address, cs_insn *insn)
     * }
     */
    public static FunctionDescriptor cs_disasm_iter$descriptor() {
        return cs_disasm_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool cs_disasm_iter(csh handle, const uint8_t **code, size_t *size, uint64_t *address, cs_insn *insn)
     * }
     */
    public static MethodHandle cs_disasm_iter$handle() {
        return cs_disasm_iter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool cs_disasm_iter(csh handle, const uint8_t **code, size_t *size, uint64_t *address, cs_insn *insn)
     * }
     */
    public static MemorySegment cs_disasm_iter$address() {
        return cs_disasm_iter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool cs_disasm_iter(csh handle, const uint8_t **code, size_t *size, uint64_t *address, cs_insn *insn)
     * }
     */
    public static boolean cs_disasm_iter(long handle, MemorySegment code, MemorySegment size, MemorySegment address, MemorySegment insn) {
        var mh$ = cs_disasm_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_disasm_iter", handle, code, size, address, insn);
            }
            return (boolean)mh$.invokeExact(handle, code, size, address, insn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_reg_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_POINTER,
            capstone_h.C_LONG_LONG,
            capstone_h.C_INT
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_reg_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *cs_reg_name(csh handle, unsigned int reg_id)
     * }
     */
    public static FunctionDescriptor cs_reg_name$descriptor() {
        return cs_reg_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *cs_reg_name(csh handle, unsigned int reg_id)
     * }
     */
    public static MethodHandle cs_reg_name$handle() {
        return cs_reg_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *cs_reg_name(csh handle, unsigned int reg_id)
     * }
     */
    public static MemorySegment cs_reg_name$address() {
        return cs_reg_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *cs_reg_name(csh handle, unsigned int reg_id)
     * }
     */
    public static MemorySegment cs_reg_name(long handle, int reg_id) {
        var mh$ = cs_reg_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_reg_name", handle, reg_id);
            }
            return (MemorySegment)mh$.invokeExact(handle, reg_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_insn_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_POINTER,
            capstone_h.C_LONG_LONG,
            capstone_h.C_INT
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_insn_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *cs_insn_name(csh handle, unsigned int insn_id)
     * }
     */
    public static FunctionDescriptor cs_insn_name$descriptor() {
        return cs_insn_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *cs_insn_name(csh handle, unsigned int insn_id)
     * }
     */
    public static MethodHandle cs_insn_name$handle() {
        return cs_insn_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *cs_insn_name(csh handle, unsigned int insn_id)
     * }
     */
    public static MemorySegment cs_insn_name$address() {
        return cs_insn_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *cs_insn_name(csh handle, unsigned int insn_id)
     * }
     */
    public static MemorySegment cs_insn_name(long handle, int insn_id) {
        var mh$ = cs_insn_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_insn_name", handle, insn_id);
            }
            return (MemorySegment)mh$.invokeExact(handle, insn_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_group_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_POINTER,
            capstone_h.C_LONG_LONG,
            capstone_h.C_INT
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_group_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *cs_group_name(csh handle, unsigned int group_id)
     * }
     */
    public static FunctionDescriptor cs_group_name$descriptor() {
        return cs_group_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *cs_group_name(csh handle, unsigned int group_id)
     * }
     */
    public static MethodHandle cs_group_name$handle() {
        return cs_group_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *cs_group_name(csh handle, unsigned int group_id)
     * }
     */
    public static MemorySegment cs_group_name$address() {
        return cs_group_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *cs_group_name(csh handle, unsigned int group_id)
     * }
     */
    public static MemorySegment cs_group_name(long handle, int group_id) {
        var mh$ = cs_group_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_group_name", handle, group_id);
            }
            return (MemorySegment)mh$.invokeExact(handle, group_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_insn_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_BOOL,
            capstone_h.C_LONG_LONG,
            capstone_h.C_POINTER,
            capstone_h.C_INT
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_insn_group");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool cs_insn_group(csh handle, const cs_insn *insn, unsigned int group_id)
     * }
     */
    public static FunctionDescriptor cs_insn_group$descriptor() {
        return cs_insn_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool cs_insn_group(csh handle, const cs_insn *insn, unsigned int group_id)
     * }
     */
    public static MethodHandle cs_insn_group$handle() {
        return cs_insn_group.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool cs_insn_group(csh handle, const cs_insn *insn, unsigned int group_id)
     * }
     */
    public static MemorySegment cs_insn_group$address() {
        return cs_insn_group.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool cs_insn_group(csh handle, const cs_insn *insn, unsigned int group_id)
     * }
     */
    public static boolean cs_insn_group(long handle, MemorySegment insn, int group_id) {
        var mh$ = cs_insn_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_insn_group", handle, insn, group_id);
            }
            return (boolean)mh$.invokeExact(handle, insn, group_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_reg_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_BOOL,
            capstone_h.C_LONG_LONG,
            capstone_h.C_POINTER,
            capstone_h.C_INT
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_reg_read");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool cs_reg_read(csh handle, const cs_insn *insn, unsigned int reg_id)
     * }
     */
    public static FunctionDescriptor cs_reg_read$descriptor() {
        return cs_reg_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool cs_reg_read(csh handle, const cs_insn *insn, unsigned int reg_id)
     * }
     */
    public static MethodHandle cs_reg_read$handle() {
        return cs_reg_read.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool cs_reg_read(csh handle, const cs_insn *insn, unsigned int reg_id)
     * }
     */
    public static MemorySegment cs_reg_read$address() {
        return cs_reg_read.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool cs_reg_read(csh handle, const cs_insn *insn, unsigned int reg_id)
     * }
     */
    public static boolean cs_reg_read(long handle, MemorySegment insn, int reg_id) {
        var mh$ = cs_reg_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_reg_read", handle, insn, reg_id);
            }
            return (boolean)mh$.invokeExact(handle, insn, reg_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_reg_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_BOOL,
            capstone_h.C_LONG_LONG,
            capstone_h.C_POINTER,
            capstone_h.C_INT
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_reg_write");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool cs_reg_write(csh handle, const cs_insn *insn, unsigned int reg_id)
     * }
     */
    public static FunctionDescriptor cs_reg_write$descriptor() {
        return cs_reg_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool cs_reg_write(csh handle, const cs_insn *insn, unsigned int reg_id)
     * }
     */
    public static MethodHandle cs_reg_write$handle() {
        return cs_reg_write.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool cs_reg_write(csh handle, const cs_insn *insn, unsigned int reg_id)
     * }
     */
    public static MemorySegment cs_reg_write$address() {
        return cs_reg_write.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool cs_reg_write(csh handle, const cs_insn *insn, unsigned int reg_id)
     * }
     */
    public static boolean cs_reg_write(long handle, MemorySegment insn, int reg_id) {
        var mh$ = cs_reg_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_reg_write", handle, insn, reg_id);
            }
            return (boolean)mh$.invokeExact(handle, insn, reg_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_op_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_INT,
            capstone_h.C_LONG_LONG,
            capstone_h.C_POINTER,
            capstone_h.C_INT
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_op_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int cs_op_count(csh handle, const cs_insn *insn, unsigned int op_type)
     * }
     */
    public static FunctionDescriptor cs_op_count$descriptor() {
        return cs_op_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int cs_op_count(csh handle, const cs_insn *insn, unsigned int op_type)
     * }
     */
    public static MethodHandle cs_op_count$handle() {
        return cs_op_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int cs_op_count(csh handle, const cs_insn *insn, unsigned int op_type)
     * }
     */
    public static MemorySegment cs_op_count$address() {
        return cs_op_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int cs_op_count(csh handle, const cs_insn *insn, unsigned int op_type)
     * }
     */
    public static int cs_op_count(long handle, MemorySegment insn, int op_type) {
        var mh$ = cs_op_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_op_count", handle, insn, op_type);
            }
            return (int)mh$.invokeExact(handle, insn, op_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_op_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_INT,
            capstone_h.C_LONG_LONG,
            capstone_h.C_POINTER,
            capstone_h.C_INT,
            capstone_h.C_INT
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_op_index");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int cs_op_index(csh handle, const cs_insn *insn, unsigned int op_type, unsigned int position)
     * }
     */
    public static FunctionDescriptor cs_op_index$descriptor() {
        return cs_op_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int cs_op_index(csh handle, const cs_insn *insn, unsigned int op_type, unsigned int position)
     * }
     */
    public static MethodHandle cs_op_index$handle() {
        return cs_op_index.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int cs_op_index(csh handle, const cs_insn *insn, unsigned int op_type, unsigned int position)
     * }
     */
    public static MemorySegment cs_op_index$address() {
        return cs_op_index.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int cs_op_index(csh handle, const cs_insn *insn, unsigned int op_type, unsigned int position)
     * }
     */
    public static int cs_op_index(long handle, MemorySegment insn, int op_type, int position) {
        var mh$ = cs_op_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_op_index", handle, insn, op_type, position);
            }
            return (int)mh$.invokeExact(handle, insn, op_type, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cs_regs_access {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            capstone_h.C_INT,
            capstone_h.C_LONG_LONG,
            capstone_h.C_POINTER,
            capstone_h.C_POINTER,
            capstone_h.C_POINTER,
            capstone_h.C_POINTER,
            capstone_h.C_POINTER
        );

        public static final MemorySegment ADDR = capstone_h.findOrThrow("cs_regs_access");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cs_err cs_regs_access(csh handle, const cs_insn *insn, cs_regs regs_read, uint8_t *regs_read_count, cs_regs regs_write, uint8_t *regs_write_count)
     * }
     */
    public static FunctionDescriptor cs_regs_access$descriptor() {
        return cs_regs_access.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cs_err cs_regs_access(csh handle, const cs_insn *insn, cs_regs regs_read, uint8_t *regs_read_count, cs_regs regs_write, uint8_t *regs_write_count)
     * }
     */
    public static MethodHandle cs_regs_access$handle() {
        return cs_regs_access.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cs_err cs_regs_access(csh handle, const cs_insn *insn, cs_regs regs_read, uint8_t *regs_read_count, cs_regs regs_write, uint8_t *regs_write_count)
     * }
     */
    public static MemorySegment cs_regs_access$address() {
        return cs_regs_access.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cs_err cs_regs_access(csh handle, const cs_insn *insn, cs_regs regs_read, uint8_t *regs_read_count, cs_regs regs_write, uint8_t *regs_write_count)
     * }
     */
    public static int cs_regs_access(long handle, MemorySegment insn, MemorySegment regs_read, MemorySegment regs_read_count, MemorySegment regs_write, MemorySegment regs_write_count) {
        var mh$ = cs_regs_access.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cs_regs_access", handle, insn, regs_read, regs_read_count, regs_write, regs_write_count);
            }
            return (int)mh$.invokeExact(handle, insn, regs_read, regs_read_count, regs_write, regs_write_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int SCHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define SCHAR_MIN -128
     * }
     */
    public static int SCHAR_MIN() {
        return SCHAR_MIN;
    }
    private static final int CHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MIN -128
     * }
     */
    public static int CHAR_MIN() {
        return CHAR_MIN;
    }
    private static final int CHAR_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MAX 127
     * }
     */
    public static int CHAR_MAX() {
        return CHAR_MAX;
    }
    private static final int SHRT_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define SHRT_MIN -32768
     * }
     */
    public static int SHRT_MIN() {
        return SHRT_MIN;
    }
    private static final int INT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_MIN -2147483648
     * }
     */
    public static int INT_MIN() {
        return INT_MIN;
    }
    private static final int UINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_MAX 4294967295
     * }
     */
    public static int UINT_MAX() {
        return UINT_MAX;
    }
    private static final int LONG_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define LONG_MIN -2147483648
     * }
     */
    public static int LONG_MIN() {
        return LONG_MIN;
    }
    private static final int LONG_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define LONG_MAX 2147483647
     * }
     */
    public static int LONG_MAX() {
        return LONG_MAX;
    }
    private static final int ULONG_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define ULONG_MAX 4294967295
     * }
     */
    public static int ULONG_MAX() {
        return ULONG_MAX;
    }
    private static final long LLONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MAX 9223372036854775807
     * }
     */
    public static long LLONG_MAX() {
        return LLONG_MAX;
    }
    private static final long LLONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MIN -9223372036854775808
     * }
     */
    public static long LLONG_MIN() {
        return LLONG_MIN;
    }
    private static final long ULLONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULLONG_MAX -1
     * }
     */
    public static long ULLONG_MAX() {
        return ULLONG_MAX;
    }
    private static final long LONG_LONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LONG_LONG_MAX 9223372036854775807
     * }
     */
    public static long LONG_LONG_MAX() {
        return LONG_LONG_MAX;
    }
    private static final long LONG_LONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LONG_LONG_MIN -9223372036854775808
     * }
     */
    public static long LONG_LONG_MIN() {
        return LONG_LONG_MIN;
    }
    private static final long ULONG_LONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULONG_LONG_MAX -1
     * }
     */
    public static long ULONG_LONG_MAX() {
        return ULONG_LONG_MAX;
    }
    private static final int CS_VERSION_MAJOR = (int)6L;
    /**
     * {@snippet lang=c :
     * #define CS_VERSION_MAJOR 6
     * }
     */
    public static int CS_VERSION_MAJOR() {
        return CS_VERSION_MAJOR;
    }
    private static final int CS_VERSION_MINOR = (int)0L;
    /**
     * {@snippet lang=c :
     * #define CS_VERSION_MINOR 0
     * }
     */
    public static int CS_VERSION_MINOR() {
        return CS_VERSION_MINOR;
    }
    private static final int CS_SUPPORT_DIET = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define CS_SUPPORT_DIET 65536
     * }
     */
    public static int CS_SUPPORT_DIET() {
        return CS_SUPPORT_DIET;
    }
    private static final int CS_SUPPORT_X86_REDUCE = (int)65537L;
    /**
     * {@snippet lang=c :
     * #define CS_SUPPORT_X86_REDUCE 65537
     * }
     */
    public static int CS_SUPPORT_X86_REDUCE() {
        return CS_SUPPORT_X86_REDUCE;
    }
    private static final short AARCH64_SLICE_IMM_INVALID = (short)65535L;
    /**
     * {@snippet lang=c :
     * #define AARCH64_SLICE_IMM_INVALID 65535
     * }
     */
    public static short AARCH64_SLICE_IMM_INVALID() {
        return AARCH64_SLICE_IMM_INVALID;
    }
    private static final byte AARCH64_SLICE_IMM_RANGE_INVALID = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define AARCH64_SLICE_IMM_RANGE_INVALID 255
     * }
     */
    public static byte AARCH64_SLICE_IMM_RANGE_INVALID() {
        return AARCH64_SLICE_IMM_RANGE_INVALID;
    }
    private static final long X86_EFLAGS_MODIFY_AF = 1L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_MODIFY_AF 1
     * }
     */
    public static long X86_EFLAGS_MODIFY_AF() {
        return X86_EFLAGS_MODIFY_AF;
    }
    private static final long X86_EFLAGS_MODIFY_CF = 2L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_MODIFY_CF 2
     * }
     */
    public static long X86_EFLAGS_MODIFY_CF() {
        return X86_EFLAGS_MODIFY_CF;
    }
    private static final long X86_EFLAGS_MODIFY_SF = 4L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_MODIFY_SF 4
     * }
     */
    public static long X86_EFLAGS_MODIFY_SF() {
        return X86_EFLAGS_MODIFY_SF;
    }
    private static final long X86_EFLAGS_MODIFY_ZF = 8L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_MODIFY_ZF 8
     * }
     */
    public static long X86_EFLAGS_MODIFY_ZF() {
        return X86_EFLAGS_MODIFY_ZF;
    }
    private static final long X86_EFLAGS_MODIFY_PF = 16L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_MODIFY_PF 16
     * }
     */
    public static long X86_EFLAGS_MODIFY_PF() {
        return X86_EFLAGS_MODIFY_PF;
    }
    private static final long X86_EFLAGS_MODIFY_OF = 32L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_MODIFY_OF 32
     * }
     */
    public static long X86_EFLAGS_MODIFY_OF() {
        return X86_EFLAGS_MODIFY_OF;
    }
    private static final long X86_EFLAGS_MODIFY_TF = 64L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_MODIFY_TF 64
     * }
     */
    public static long X86_EFLAGS_MODIFY_TF() {
        return X86_EFLAGS_MODIFY_TF;
    }
    private static final long X86_EFLAGS_MODIFY_IF = 128L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_MODIFY_IF 128
     * }
     */
    public static long X86_EFLAGS_MODIFY_IF() {
        return X86_EFLAGS_MODIFY_IF;
    }
    private static final long X86_EFLAGS_MODIFY_DF = 256L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_MODIFY_DF 256
     * }
     */
    public static long X86_EFLAGS_MODIFY_DF() {
        return X86_EFLAGS_MODIFY_DF;
    }
    private static final long X86_EFLAGS_MODIFY_NT = 512L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_MODIFY_NT 512
     * }
     */
    public static long X86_EFLAGS_MODIFY_NT() {
        return X86_EFLAGS_MODIFY_NT;
    }
    private static final long X86_EFLAGS_MODIFY_RF = 1024L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_MODIFY_RF 1024
     * }
     */
    public static long X86_EFLAGS_MODIFY_RF() {
        return X86_EFLAGS_MODIFY_RF;
    }
    private static final long X86_EFLAGS_PRIOR_OF = 2048L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_PRIOR_OF 2048
     * }
     */
    public static long X86_EFLAGS_PRIOR_OF() {
        return X86_EFLAGS_PRIOR_OF;
    }
    private static final long X86_EFLAGS_PRIOR_SF = 4096L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_PRIOR_SF 4096
     * }
     */
    public static long X86_EFLAGS_PRIOR_SF() {
        return X86_EFLAGS_PRIOR_SF;
    }
    private static final long X86_EFLAGS_PRIOR_ZF = 8192L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_PRIOR_ZF 8192
     * }
     */
    public static long X86_EFLAGS_PRIOR_ZF() {
        return X86_EFLAGS_PRIOR_ZF;
    }
    private static final long X86_EFLAGS_PRIOR_AF = 16384L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_PRIOR_AF 16384
     * }
     */
    public static long X86_EFLAGS_PRIOR_AF() {
        return X86_EFLAGS_PRIOR_AF;
    }
    private static final long X86_EFLAGS_PRIOR_PF = 32768L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_PRIOR_PF 32768
     * }
     */
    public static long X86_EFLAGS_PRIOR_PF() {
        return X86_EFLAGS_PRIOR_PF;
    }
    private static final long X86_EFLAGS_PRIOR_CF = 65536L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_PRIOR_CF 65536
     * }
     */
    public static long X86_EFLAGS_PRIOR_CF() {
        return X86_EFLAGS_PRIOR_CF;
    }
    private static final long X86_EFLAGS_PRIOR_TF = 131072L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_PRIOR_TF 131072
     * }
     */
    public static long X86_EFLAGS_PRIOR_TF() {
        return X86_EFLAGS_PRIOR_TF;
    }
    private static final long X86_EFLAGS_PRIOR_IF = 262144L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_PRIOR_IF 262144
     * }
     */
    public static long X86_EFLAGS_PRIOR_IF() {
        return X86_EFLAGS_PRIOR_IF;
    }
    private static final long X86_EFLAGS_PRIOR_DF = 524288L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_PRIOR_DF 524288
     * }
     */
    public static long X86_EFLAGS_PRIOR_DF() {
        return X86_EFLAGS_PRIOR_DF;
    }
    private static final long X86_EFLAGS_PRIOR_NT = 1048576L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_PRIOR_NT 1048576
     * }
     */
    public static long X86_EFLAGS_PRIOR_NT() {
        return X86_EFLAGS_PRIOR_NT;
    }
    private static final long X86_EFLAGS_RESET_OF = 2097152L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_RESET_OF 2097152
     * }
     */
    public static long X86_EFLAGS_RESET_OF() {
        return X86_EFLAGS_RESET_OF;
    }
    private static final long X86_EFLAGS_RESET_CF = 4194304L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_RESET_CF 4194304
     * }
     */
    public static long X86_EFLAGS_RESET_CF() {
        return X86_EFLAGS_RESET_CF;
    }
    private static final long X86_EFLAGS_RESET_DF = 8388608L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_RESET_DF 8388608
     * }
     */
    public static long X86_EFLAGS_RESET_DF() {
        return X86_EFLAGS_RESET_DF;
    }
    private static final long X86_EFLAGS_RESET_IF = 16777216L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_RESET_IF 16777216
     * }
     */
    public static long X86_EFLAGS_RESET_IF() {
        return X86_EFLAGS_RESET_IF;
    }
    private static final long X86_EFLAGS_RESET_SF = 33554432L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_RESET_SF 33554432
     * }
     */
    public static long X86_EFLAGS_RESET_SF() {
        return X86_EFLAGS_RESET_SF;
    }
    private static final long X86_EFLAGS_RESET_AF = 67108864L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_RESET_AF 67108864
     * }
     */
    public static long X86_EFLAGS_RESET_AF() {
        return X86_EFLAGS_RESET_AF;
    }
    private static final long X86_EFLAGS_RESET_TF = 134217728L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_RESET_TF 134217728
     * }
     */
    public static long X86_EFLAGS_RESET_TF() {
        return X86_EFLAGS_RESET_TF;
    }
    private static final long X86_EFLAGS_RESET_NT = 268435456L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_RESET_NT 268435456
     * }
     */
    public static long X86_EFLAGS_RESET_NT() {
        return X86_EFLAGS_RESET_NT;
    }
    private static final long X86_EFLAGS_RESET_PF = 536870912L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_RESET_PF 536870912
     * }
     */
    public static long X86_EFLAGS_RESET_PF() {
        return X86_EFLAGS_RESET_PF;
    }
    private static final long X86_EFLAGS_SET_CF = 1073741824L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_SET_CF 1073741824
     * }
     */
    public static long X86_EFLAGS_SET_CF() {
        return X86_EFLAGS_SET_CF;
    }
    private static final long X86_EFLAGS_SET_DF = 2147483648L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_SET_DF 2147483648
     * }
     */
    public static long X86_EFLAGS_SET_DF() {
        return X86_EFLAGS_SET_DF;
    }
    private static final long X86_EFLAGS_SET_IF = 4294967296L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_SET_IF 4294967296
     * }
     */
    public static long X86_EFLAGS_SET_IF() {
        return X86_EFLAGS_SET_IF;
    }
    private static final long X86_EFLAGS_TEST_OF = 8589934592L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_TEST_OF 8589934592
     * }
     */
    public static long X86_EFLAGS_TEST_OF() {
        return X86_EFLAGS_TEST_OF;
    }
    private static final long X86_EFLAGS_TEST_SF = 17179869184L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_TEST_SF 17179869184
     * }
     */
    public static long X86_EFLAGS_TEST_SF() {
        return X86_EFLAGS_TEST_SF;
    }
    private static final long X86_EFLAGS_TEST_ZF = 34359738368L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_TEST_ZF 34359738368
     * }
     */
    public static long X86_EFLAGS_TEST_ZF() {
        return X86_EFLAGS_TEST_ZF;
    }
    private static final long X86_EFLAGS_TEST_PF = 68719476736L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_TEST_PF 68719476736
     * }
     */
    public static long X86_EFLAGS_TEST_PF() {
        return X86_EFLAGS_TEST_PF;
    }
    private static final long X86_EFLAGS_TEST_CF = 137438953472L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_TEST_CF 137438953472
     * }
     */
    public static long X86_EFLAGS_TEST_CF() {
        return X86_EFLAGS_TEST_CF;
    }
    private static final long X86_EFLAGS_TEST_NT = 274877906944L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_TEST_NT 274877906944
     * }
     */
    public static long X86_EFLAGS_TEST_NT() {
        return X86_EFLAGS_TEST_NT;
    }
    private static final long X86_EFLAGS_TEST_DF = 549755813888L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_TEST_DF 549755813888
     * }
     */
    public static long X86_EFLAGS_TEST_DF() {
        return X86_EFLAGS_TEST_DF;
    }
    private static final long X86_EFLAGS_UNDEFINED_OF = 1099511627776L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_UNDEFINED_OF 1099511627776
     * }
     */
    public static long X86_EFLAGS_UNDEFINED_OF() {
        return X86_EFLAGS_UNDEFINED_OF;
    }
    private static final long X86_EFLAGS_UNDEFINED_SF = 2199023255552L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_UNDEFINED_SF 2199023255552
     * }
     */
    public static long X86_EFLAGS_UNDEFINED_SF() {
        return X86_EFLAGS_UNDEFINED_SF;
    }
    private static final long X86_EFLAGS_UNDEFINED_ZF = 4398046511104L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_UNDEFINED_ZF 4398046511104
     * }
     */
    public static long X86_EFLAGS_UNDEFINED_ZF() {
        return X86_EFLAGS_UNDEFINED_ZF;
    }
    private static final long X86_EFLAGS_UNDEFINED_PF = 8796093022208L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_UNDEFINED_PF 8796093022208
     * }
     */
    public static long X86_EFLAGS_UNDEFINED_PF() {
        return X86_EFLAGS_UNDEFINED_PF;
    }
    private static final long X86_EFLAGS_UNDEFINED_AF = 17592186044416L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_UNDEFINED_AF 17592186044416
     * }
     */
    public static long X86_EFLAGS_UNDEFINED_AF() {
        return X86_EFLAGS_UNDEFINED_AF;
    }
    private static final long X86_EFLAGS_UNDEFINED_CF = 35184372088832L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_UNDEFINED_CF 35184372088832
     * }
     */
    public static long X86_EFLAGS_UNDEFINED_CF() {
        return X86_EFLAGS_UNDEFINED_CF;
    }
    private static final long X86_EFLAGS_RESET_RF = 70368744177664L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_RESET_RF 70368744177664
     * }
     */
    public static long X86_EFLAGS_RESET_RF() {
        return X86_EFLAGS_RESET_RF;
    }
    private static final long X86_EFLAGS_TEST_RF = 140737488355328L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_TEST_RF 140737488355328
     * }
     */
    public static long X86_EFLAGS_TEST_RF() {
        return X86_EFLAGS_TEST_RF;
    }
    private static final long X86_EFLAGS_TEST_IF = 281474976710656L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_TEST_IF 281474976710656
     * }
     */
    public static long X86_EFLAGS_TEST_IF() {
        return X86_EFLAGS_TEST_IF;
    }
    private static final long X86_EFLAGS_TEST_TF = 562949953421312L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_TEST_TF 562949953421312
     * }
     */
    public static long X86_EFLAGS_TEST_TF() {
        return X86_EFLAGS_TEST_TF;
    }
    private static final long X86_EFLAGS_TEST_AF = 1125899906842624L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_TEST_AF 1125899906842624
     * }
     */
    public static long X86_EFLAGS_TEST_AF() {
        return X86_EFLAGS_TEST_AF;
    }
    private static final long X86_EFLAGS_RESET_ZF = 2251799813685248L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_RESET_ZF 2251799813685248
     * }
     */
    public static long X86_EFLAGS_RESET_ZF() {
        return X86_EFLAGS_RESET_ZF;
    }
    private static final long X86_EFLAGS_SET_OF = 4503599627370496L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_SET_OF 4503599627370496
     * }
     */
    public static long X86_EFLAGS_SET_OF() {
        return X86_EFLAGS_SET_OF;
    }
    private static final long X86_EFLAGS_SET_SF = 9007199254740992L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_SET_SF 9007199254740992
     * }
     */
    public static long X86_EFLAGS_SET_SF() {
        return X86_EFLAGS_SET_SF;
    }
    private static final long X86_EFLAGS_SET_ZF = 18014398509481984L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_SET_ZF 18014398509481984
     * }
     */
    public static long X86_EFLAGS_SET_ZF() {
        return X86_EFLAGS_SET_ZF;
    }
    private static final long X86_EFLAGS_SET_AF = 36028797018963968L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_SET_AF 36028797018963968
     * }
     */
    public static long X86_EFLAGS_SET_AF() {
        return X86_EFLAGS_SET_AF;
    }
    private static final long X86_EFLAGS_SET_PF = 72057594037927936L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_SET_PF 72057594037927936
     * }
     */
    public static long X86_EFLAGS_SET_PF() {
        return X86_EFLAGS_SET_PF;
    }
    private static final long X86_EFLAGS_RESET_0F = 144115188075855872L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_RESET_0F 144115188075855872
     * }
     */
    public static long X86_EFLAGS_RESET_0F() {
        return X86_EFLAGS_RESET_0F;
    }
    private static final long X86_EFLAGS_RESET_AC = 288230376151711744L;
    /**
     * {@snippet lang=c :
     * #define X86_EFLAGS_RESET_AC 288230376151711744
     * }
     */
    public static long X86_EFLAGS_RESET_AC() {
        return X86_EFLAGS_RESET_AC;
    }
    private static final long X86_FPU_FLAGS_MODIFY_C0 = 1L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_MODIFY_C0 1
     * }
     */
    public static long X86_FPU_FLAGS_MODIFY_C0() {
        return X86_FPU_FLAGS_MODIFY_C0;
    }
    private static final long X86_FPU_FLAGS_MODIFY_C1 = 2L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_MODIFY_C1 2
     * }
     */
    public static long X86_FPU_FLAGS_MODIFY_C1() {
        return X86_FPU_FLAGS_MODIFY_C1;
    }
    private static final long X86_FPU_FLAGS_MODIFY_C2 = 4L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_MODIFY_C2 4
     * }
     */
    public static long X86_FPU_FLAGS_MODIFY_C2() {
        return X86_FPU_FLAGS_MODIFY_C2;
    }
    private static final long X86_FPU_FLAGS_MODIFY_C3 = 8L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_MODIFY_C3 8
     * }
     */
    public static long X86_FPU_FLAGS_MODIFY_C3() {
        return X86_FPU_FLAGS_MODIFY_C3;
    }
    private static final long X86_FPU_FLAGS_RESET_C0 = 16L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_RESET_C0 16
     * }
     */
    public static long X86_FPU_FLAGS_RESET_C0() {
        return X86_FPU_FLAGS_RESET_C0;
    }
    private static final long X86_FPU_FLAGS_RESET_C1 = 32L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_RESET_C1 32
     * }
     */
    public static long X86_FPU_FLAGS_RESET_C1() {
        return X86_FPU_FLAGS_RESET_C1;
    }
    private static final long X86_FPU_FLAGS_RESET_C2 = 64L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_RESET_C2 64
     * }
     */
    public static long X86_FPU_FLAGS_RESET_C2() {
        return X86_FPU_FLAGS_RESET_C2;
    }
    private static final long X86_FPU_FLAGS_RESET_C3 = 128L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_RESET_C3 128
     * }
     */
    public static long X86_FPU_FLAGS_RESET_C3() {
        return X86_FPU_FLAGS_RESET_C3;
    }
    private static final long X86_FPU_FLAGS_SET_C0 = 256L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_SET_C0 256
     * }
     */
    public static long X86_FPU_FLAGS_SET_C0() {
        return X86_FPU_FLAGS_SET_C0;
    }
    private static final long X86_FPU_FLAGS_SET_C1 = 512L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_SET_C1 512
     * }
     */
    public static long X86_FPU_FLAGS_SET_C1() {
        return X86_FPU_FLAGS_SET_C1;
    }
    private static final long X86_FPU_FLAGS_SET_C2 = 1024L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_SET_C2 1024
     * }
     */
    public static long X86_FPU_FLAGS_SET_C2() {
        return X86_FPU_FLAGS_SET_C2;
    }
    private static final long X86_FPU_FLAGS_SET_C3 = 2048L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_SET_C3 2048
     * }
     */
    public static long X86_FPU_FLAGS_SET_C3() {
        return X86_FPU_FLAGS_SET_C3;
    }
    private static final long X86_FPU_FLAGS_UNDEFINED_C0 = 4096L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_UNDEFINED_C0 4096
     * }
     */
    public static long X86_FPU_FLAGS_UNDEFINED_C0() {
        return X86_FPU_FLAGS_UNDEFINED_C0;
    }
    private static final long X86_FPU_FLAGS_UNDEFINED_C1 = 8192L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_UNDEFINED_C1 8192
     * }
     */
    public static long X86_FPU_FLAGS_UNDEFINED_C1() {
        return X86_FPU_FLAGS_UNDEFINED_C1;
    }
    private static final long X86_FPU_FLAGS_UNDEFINED_C2 = 16384L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_UNDEFINED_C2 16384
     * }
     */
    public static long X86_FPU_FLAGS_UNDEFINED_C2() {
        return X86_FPU_FLAGS_UNDEFINED_C2;
    }
    private static final long X86_FPU_FLAGS_UNDEFINED_C3 = 32768L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_UNDEFINED_C3 32768
     * }
     */
    public static long X86_FPU_FLAGS_UNDEFINED_C3() {
        return X86_FPU_FLAGS_UNDEFINED_C3;
    }
    private static final long X86_FPU_FLAGS_TEST_C0 = 65536L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_TEST_C0 65536
     * }
     */
    public static long X86_FPU_FLAGS_TEST_C0() {
        return X86_FPU_FLAGS_TEST_C0;
    }
    private static final long X86_FPU_FLAGS_TEST_C1 = 131072L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_TEST_C1 131072
     * }
     */
    public static long X86_FPU_FLAGS_TEST_C1() {
        return X86_FPU_FLAGS_TEST_C1;
    }
    private static final long X86_FPU_FLAGS_TEST_C2 = 262144L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_TEST_C2 262144
     * }
     */
    public static long X86_FPU_FLAGS_TEST_C2() {
        return X86_FPU_FLAGS_TEST_C2;
    }
    private static final long X86_FPU_FLAGS_TEST_C3 = 524288L;
    /**
     * {@snippet lang=c :
     * #define X86_FPU_FLAGS_TEST_C3 524288
     * }
     */
    public static long X86_FPU_FLAGS_TEST_C3() {
        return X86_FPU_FLAGS_TEST_C3;
    }
}

