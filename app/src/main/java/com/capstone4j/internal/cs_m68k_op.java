// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cs_m68k_op {
 *     union {
 *         uint64_t imm;
 *         double dimm;
 *         float simm;
 *         m68k_reg reg;
 *         cs_m68k_op_reg_pair reg_pair;
 *     };
 *     m68k_op_mem mem;
 *     m68k_op_br_disp br_disp;
 *     uint32_t register_bits;
 *     m68k_op_type type;
 *     m68k_address_mode address_mode;
 * }
 * }
 */
public class cs_m68k_op {

    cs_m68k_op() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            capstone_h.C_LONG_LONG.withName("imm"),
            capstone_h.C_DOUBLE.withName("dimm"),
            capstone_h.C_FLOAT.withName("simm"),
            capstone_h.C_INT.withName("reg"),
            cs_m68k_op_reg_pair.layout().withName("reg_pair")
        ).withName("$anon$162:2"),
        m68k_op_mem.layout().withName("mem"),
        m68k_op_br_disp.layout().withName("br_disp"),
        capstone_h.C_INT.withName("register_bits"),
        capstone_h.C_INT.withName("type"),
        capstone_h.C_INT.withName("address_mode")
    ).withName("cs_m68k_op");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong imm$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$162:2"), groupElement("imm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t imm
     * }
     */
    public static final OfLong imm$layout() {
        return imm$LAYOUT;
    }

    private static final long imm$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t imm
     * }
     */
    public static final long imm$offset() {
        return imm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t imm
     * }
     */
    public static long imm(MemorySegment struct) {
        return struct.get(imm$LAYOUT, imm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t imm
     * }
     */
    public static void imm(MemorySegment struct, long fieldValue) {
        struct.set(imm$LAYOUT, imm$OFFSET, fieldValue);
    }

    private static final OfDouble dimm$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("$anon$162:2"), groupElement("dimm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double dimm
     * }
     */
    public static final OfDouble dimm$layout() {
        return dimm$LAYOUT;
    }

    private static final long dimm$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double dimm
     * }
     */
    public static final long dimm$offset() {
        return dimm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double dimm
     * }
     */
    public static double dimm(MemorySegment struct) {
        return struct.get(dimm$LAYOUT, dimm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double dimm
     * }
     */
    public static void dimm(MemorySegment struct, double fieldValue) {
        struct.set(dimm$LAYOUT, dimm$OFFSET, fieldValue);
    }

    private static final OfFloat simm$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("$anon$162:2"), groupElement("simm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float simm
     * }
     */
    public static final OfFloat simm$layout() {
        return simm$LAYOUT;
    }

    private static final long simm$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float simm
     * }
     */
    public static final long simm$offset() {
        return simm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float simm
     * }
     */
    public static float simm(MemorySegment struct) {
        return struct.get(simm$LAYOUT, simm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float simm
     * }
     */
    public static void simm(MemorySegment struct, float fieldValue) {
        struct.set(simm$LAYOUT, simm$OFFSET, fieldValue);
    }

    private static final OfInt reg$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$162:2"), groupElement("reg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * m68k_reg reg
     * }
     */
    public static final OfInt reg$layout() {
        return reg$LAYOUT;
    }

    private static final long reg$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * m68k_reg reg
     * }
     */
    public static final long reg$offset() {
        return reg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * m68k_reg reg
     * }
     */
    public static int reg(MemorySegment struct) {
        return struct.get(reg$LAYOUT, reg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * m68k_reg reg
     * }
     */
    public static void reg(MemorySegment struct, int fieldValue) {
        struct.set(reg$LAYOUT, reg$OFFSET, fieldValue);
    }

    private static final GroupLayout reg_pair$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$162:2"), groupElement("reg_pair"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_m68k_op_reg_pair reg_pair
     * }
     */
    public static final GroupLayout reg_pair$layout() {
        return reg_pair$LAYOUT;
    }

    private static final long reg_pair$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_m68k_op_reg_pair reg_pair
     * }
     */
    public static final long reg_pair$offset() {
        return reg_pair$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_m68k_op_reg_pair reg_pair
     * }
     */
    public static MemorySegment reg_pair(MemorySegment struct) {
        return struct.asSlice(reg_pair$OFFSET, reg_pair$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_m68k_op_reg_pair reg_pair
     * }
     */
    public static void reg_pair(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reg_pair$OFFSET, reg_pair$LAYOUT.byteSize());
    }

    private static final GroupLayout mem$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("mem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * m68k_op_mem mem
     * }
     */
    public static final GroupLayout mem$layout() {
        return mem$LAYOUT;
    }

    private static final long mem$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * m68k_op_mem mem
     * }
     */
    public static final long mem$offset() {
        return mem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * m68k_op_mem mem
     * }
     */
    public static MemorySegment mem(MemorySegment struct) {
        return struct.asSlice(mem$OFFSET, mem$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * m68k_op_mem mem
     * }
     */
    public static void mem(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mem$OFFSET, mem$LAYOUT.byteSize());
    }

    private static final GroupLayout br_disp$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("br_disp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * m68k_op_br_disp br_disp
     * }
     */
    public static final GroupLayout br_disp$layout() {
        return br_disp$LAYOUT;
    }

    private static final long br_disp$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * m68k_op_br_disp br_disp
     * }
     */
    public static final long br_disp$offset() {
        return br_disp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * m68k_op_br_disp br_disp
     * }
     */
    public static MemorySegment br_disp(MemorySegment struct) {
        return struct.asSlice(br_disp$OFFSET, br_disp$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * m68k_op_br_disp br_disp
     * }
     */
    public static void br_disp(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, br_disp$OFFSET, br_disp$LAYOUT.byteSize());
    }

    private static final OfInt register_bits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("register_bits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t register_bits
     * }
     */
    public static final OfInt register_bits$layout() {
        return register_bits$LAYOUT;
    }

    private static final long register_bits$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t register_bits
     * }
     */
    public static final long register_bits$offset() {
        return register_bits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t register_bits
     * }
     */
    public static int register_bits(MemorySegment struct) {
        return struct.get(register_bits$LAYOUT, register_bits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t register_bits
     * }
     */
    public static void register_bits(MemorySegment struct, int fieldValue) {
        struct.set(register_bits$LAYOUT, register_bits$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * m68k_op_type type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * m68k_op_type type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * m68k_op_type type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * m68k_op_type type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt address_mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("address_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * m68k_address_mode address_mode
     * }
     */
    public static final OfInt address_mode$layout() {
        return address_mode$LAYOUT;
    }

    private static final long address_mode$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * m68k_address_mode address_mode
     * }
     */
    public static final long address_mode$offset() {
        return address_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * m68k_address_mode address_mode
     * }
     */
    public static int address_mode(MemorySegment struct) {
        return struct.get(address_mode$LAYOUT, address_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * m68k_address_mode address_mode
     * }
     */
    public static void address_mode(MemorySegment struct, int fieldValue) {
        struct.set(address_mode$LAYOUT, address_mode$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

