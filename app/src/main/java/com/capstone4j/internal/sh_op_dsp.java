// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct sh_op_dsp {
 *     sh_dsp_insn insn;
 *     sh_dsp_operand operand[2];
 *     sh_reg r[6];
 *     sh_dsp_cc cc;
 *     uint8_t imm;
 *     int size;
 * }
 * }
 */
public class sh_op_dsp {

    sh_op_dsp() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        capstone_h.C_INT.withName("insn"),
        MemoryLayout.sequenceLayout(2, capstone_h.C_INT).withName("operand"),
        MemoryLayout.sequenceLayout(6, capstone_h.C_INT).withName("r"),
        capstone_h.C_INT.withName("cc"),
        capstone_h.C_CHAR.withName("imm"),
        MemoryLayout.paddingLayout(3),
        capstone_h.C_INT.withName("size")
    ).withName("sh_op_dsp");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt insn$LAYOUT = (OfInt)$LAYOUT.select(groupElement("insn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sh_dsp_insn insn
     * }
     */
    public static final OfInt insn$layout() {
        return insn$LAYOUT;
    }

    private static final long insn$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sh_dsp_insn insn
     * }
     */
    public static final long insn$offset() {
        return insn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sh_dsp_insn insn
     * }
     */
    public static int insn(MemorySegment struct) {
        return struct.get(insn$LAYOUT, insn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sh_dsp_insn insn
     * }
     */
    public static void insn(MemorySegment struct, int fieldValue) {
        struct.set(insn$LAYOUT, insn$OFFSET, fieldValue);
    }

    private static final SequenceLayout operand$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("operand"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sh_dsp_operand operand[2]
     * }
     */
    public static final SequenceLayout operand$layout() {
        return operand$LAYOUT;
    }

    private static final long operand$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sh_dsp_operand operand[2]
     * }
     */
    public static final long operand$offset() {
        return operand$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sh_dsp_operand operand[2]
     * }
     */
    public static MemorySegment operand(MemorySegment struct) {
        return struct.asSlice(operand$OFFSET, operand$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sh_dsp_operand operand[2]
     * }
     */
    public static void operand(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, operand$OFFSET, operand$LAYOUT.byteSize());
    }

    private static long[] operand$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * sh_dsp_operand operand[2]
     * }
     */
    public static long[] operand$dimensions() {
        return operand$DIMS;
    }
    private static final VarHandle operand$ELEM_HANDLE = operand$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * sh_dsp_operand operand[2]
     * }
     */
    public static int operand(MemorySegment struct, long index0) {
        return (int)operand$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * sh_dsp_operand operand[2]
     * }
     */
    public static void operand(MemorySegment struct, long index0, int fieldValue) {
        operand$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout r$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("r"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sh_reg r[6]
     * }
     */
    public static final SequenceLayout r$layout() {
        return r$LAYOUT;
    }

    private static final long r$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sh_reg r[6]
     * }
     */
    public static final long r$offset() {
        return r$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sh_reg r[6]
     * }
     */
    public static MemorySegment r(MemorySegment struct) {
        return struct.asSlice(r$OFFSET, r$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sh_reg r[6]
     * }
     */
    public static void r(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, r$OFFSET, r$LAYOUT.byteSize());
    }

    private static long[] r$DIMS = { 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * sh_reg r[6]
     * }
     */
    public static long[] r$dimensions() {
        return r$DIMS;
    }
    private static final VarHandle r$ELEM_HANDLE = r$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * sh_reg r[6]
     * }
     */
    public static int r(MemorySegment struct, long index0) {
        return (int)r$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * sh_reg r[6]
     * }
     */
    public static void r(MemorySegment struct, long index0, int fieldValue) {
        r$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt cc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sh_dsp_cc cc
     * }
     */
    public static final OfInt cc$layout() {
        return cc$LAYOUT;
    }

    private static final long cc$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sh_dsp_cc cc
     * }
     */
    public static final long cc$offset() {
        return cc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sh_dsp_cc cc
     * }
     */
    public static int cc(MemorySegment struct) {
        return struct.get(cc$LAYOUT, cc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sh_dsp_cc cc
     * }
     */
    public static void cc(MemorySegment struct, int fieldValue) {
        struct.set(cc$LAYOUT, cc$OFFSET, fieldValue);
    }

    private static final OfByte imm$LAYOUT = (OfByte)$LAYOUT.select(groupElement("imm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t imm
     * }
     */
    public static final OfByte imm$layout() {
        return imm$LAYOUT;
    }

    private static final long imm$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t imm
     * }
     */
    public static final long imm$offset() {
        return imm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t imm
     * }
     */
    public static byte imm(MemorySegment struct) {
        return struct.get(imm$LAYOUT, imm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t imm
     * }
     */
    public static void imm(MemorySegment struct, byte fieldValue) {
        struct.set(imm$LAYOUT, imm$OFFSET, fieldValue);
    }

    private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int size
     * }
     */
    public static final OfInt size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int size
     * }
     */
    public static int size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int size
     * }
     */
    public static void size(MemorySegment struct, int fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

