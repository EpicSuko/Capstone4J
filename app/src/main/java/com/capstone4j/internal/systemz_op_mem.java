// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct systemz_op_mem {
 *     systemz_addr_mode am;
 *     uint8_t base;
 *     uint8_t index;
 *     uint64_t length;
 *     int64_t disp;
 * }
 * }
 */
public class systemz_op_mem {

    systemz_op_mem() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        capstone_h.C_INT.withName("am"),
        capstone_h.C_CHAR.withName("base"),
        capstone_h.C_CHAR.withName("index"),
        MemoryLayout.paddingLayout(2),
        capstone_h.C_LONG_LONG.withName("length"),
        capstone_h.C_LONG_LONG.withName("disp")
    ).withName("systemz_op_mem");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt am$LAYOUT = (OfInt)$LAYOUT.select(groupElement("am"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * systemz_addr_mode am
     * }
     */
    public static final OfInt am$layout() {
        return am$LAYOUT;
    }

    private static final long am$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * systemz_addr_mode am
     * }
     */
    public static final long am$offset() {
        return am$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * systemz_addr_mode am
     * }
     */
    public static int am(MemorySegment struct) {
        return struct.get(am$LAYOUT, am$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * systemz_addr_mode am
     * }
     */
    public static void am(MemorySegment struct, int fieldValue) {
        struct.set(am$LAYOUT, am$OFFSET, fieldValue);
    }

    private static final OfByte base$LAYOUT = (OfByte)$LAYOUT.select(groupElement("base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t base
     * }
     */
    public static final OfByte base$layout() {
        return base$LAYOUT;
    }

    private static final long base$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t base
     * }
     */
    public static final long base$offset() {
        return base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t base
     * }
     */
    public static byte base(MemorySegment struct) {
        return struct.get(base$LAYOUT, base$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t base
     * }
     */
    public static void base(MemorySegment struct, byte fieldValue) {
        struct.set(base$LAYOUT, base$OFFSET, fieldValue);
    }

    private static final OfByte index$LAYOUT = (OfByte)$LAYOUT.select(groupElement("index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t index
     * }
     */
    public static final OfByte index$layout() {
        return index$LAYOUT;
    }

    private static final long index$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t index
     * }
     */
    public static final long index$offset() {
        return index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t index
     * }
     */
    public static byte index(MemorySegment struct) {
        return struct.get(index$LAYOUT, index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t index
     * }
     */
    public static void index(MemorySegment struct, byte fieldValue) {
        struct.set(index$LAYOUT, index$OFFSET, fieldValue);
    }

    private static final OfLong length$LAYOUT = (OfLong)$LAYOUT.select(groupElement("length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t length
     * }
     */
    public static final OfLong length$layout() {
        return length$LAYOUT;
    }

    private static final long length$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t length
     * }
     */
    public static final long length$offset() {
        return length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t length
     * }
     */
    public static long length(MemorySegment struct) {
        return struct.get(length$LAYOUT, length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t length
     * }
     */
    public static void length(MemorySegment struct, long fieldValue) {
        struct.set(length$LAYOUT, length$OFFSET, fieldValue);
    }

    private static final OfLong disp$LAYOUT = (OfLong)$LAYOUT.select(groupElement("disp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t disp
     * }
     */
    public static final OfLong disp$layout() {
        return disp$LAYOUT;
    }

    private static final long disp$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t disp
     * }
     */
    public static final long disp$offset() {
        return disp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t disp
     * }
     */
    public static long disp(MemorySegment struct) {
        return struct.get(disp$LAYOUT, disp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t disp
     * }
     */
    public static void disp(MemorySegment struct, long fieldValue) {
        struct.set(disp$LAYOUT, disp$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

