// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cs_detail {
 *     uint16_t regs_read[20];
 *     uint8_t regs_read_count;
 *     uint16_t regs_write[47];
 *     uint8_t regs_write_count;
 *     uint8_t groups[16];
 *     uint8_t groups_count;
 *     bool writeback;
 *     union {
 *         cs_x86 x86;
 *         cs_aarch64 aarch64;
 *         cs_systemz systemz;
 *         cs_arm arm;
 *         cs_m68k m68k;
 *         cs_mips mips;
 *         cs_ppc ppc;
 *         cs_sparc sparc;
 *         cs_xcore xcore;
 *         cs_tms320c64x tms320c64x;
 *         cs_m680x m680x;
 *         cs_evm evm;
 *         cs_mos65xx mos65xx;
 *         cs_wasm wasm;
 *         cs_bpf bpf;
 *         cs_riscv riscv;
 *         cs_sh sh;
 *         cs_tricore tricore;
 *         cs_alpha alpha;
 *         cs_hppa hppa;
 *         cs_loongarch loongarch;
 *         cs_xtensa xtensa;
 *         cs_arc arc;
 *     };
 * }
 * }
 */
public class cs_detail {

    cs_detail() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(20, capstone_h.C_SHORT).withName("regs_read"),
        capstone_h.C_CHAR.withName("regs_read_count"),
        MemoryLayout.paddingLayout(1),
        MemoryLayout.sequenceLayout(47, capstone_h.C_SHORT).withName("regs_write"),
        capstone_h.C_CHAR.withName("regs_write_count"),
        MemoryLayout.sequenceLayout(16, capstone_h.C_CHAR).withName("groups"),
        capstone_h.C_CHAR.withName("groups_count"),
        capstone_h.C_BOOL.withName("writeback"),
        MemoryLayout.paddingLayout(5),
        MemoryLayout.unionLayout(
            cs_x86.layout().withName("x86"),
            cs_aarch64.layout().withName("aarch64"),
            cs_systemz.layout().withName("systemz"),
            cs_arm.layout().withName("arm"),
            cs_m68k.layout().withName("m68k"),
            cs_mips.layout().withName("mips"),
            cs_ppc.layout().withName("ppc"),
            cs_sparc.layout().withName("sparc"),
            cs_xcore.layout().withName("xcore"),
            cs_tms320c64x.layout().withName("tms320c64x"),
            cs_m680x.layout().withName("m680x"),
            cs_evm.layout().withName("evm"),
            cs_mos65xx.layout().withName("mos65xx"),
            cs_wasm.layout().withName("wasm"),
            cs_bpf.layout().withName("bpf"),
            cs_riscv.layout().withName("riscv"),
            cs_sh.layout().withName("sh"),
            cs_tricore.layout().withName("tricore"),
            cs_alpha.layout().withName("alpha"),
            cs_hppa.layout().withName("hppa"),
            cs_loongarch.layout().withName("loongarch"),
            cs_xtensa.layout().withName("xtensa"),
            cs_arc.layout().withName("arc")
        ).withName("$anon$423:2")
    ).withName("cs_detail");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout regs_read$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("regs_read"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t regs_read[20]
     * }
     */
    public static final SequenceLayout regs_read$layout() {
        return regs_read$LAYOUT;
    }

    private static final long regs_read$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t regs_read[20]
     * }
     */
    public static final long regs_read$offset() {
        return regs_read$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t regs_read[20]
     * }
     */
    public static MemorySegment regs_read(MemorySegment struct) {
        return struct.asSlice(regs_read$OFFSET, regs_read$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t regs_read[20]
     * }
     */
    public static void regs_read(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, regs_read$OFFSET, regs_read$LAYOUT.byteSize());
    }

    private static long[] regs_read$DIMS = { 20 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint16_t regs_read[20]
     * }
     */
    public static long[] regs_read$dimensions() {
        return regs_read$DIMS;
    }
    private static final VarHandle regs_read$ELEM_HANDLE = regs_read$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint16_t regs_read[20]
     * }
     */
    public static short regs_read(MemorySegment struct, long index0) {
        return (short)regs_read$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint16_t regs_read[20]
     * }
     */
    public static void regs_read(MemorySegment struct, long index0, short fieldValue) {
        regs_read$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfByte regs_read_count$LAYOUT = (OfByte)$LAYOUT.select(groupElement("regs_read_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t regs_read_count
     * }
     */
    public static final OfByte regs_read_count$layout() {
        return regs_read_count$LAYOUT;
    }

    private static final long regs_read_count$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t regs_read_count
     * }
     */
    public static final long regs_read_count$offset() {
        return regs_read_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t regs_read_count
     * }
     */
    public static byte regs_read_count(MemorySegment struct) {
        return struct.get(regs_read_count$LAYOUT, regs_read_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t regs_read_count
     * }
     */
    public static void regs_read_count(MemorySegment struct, byte fieldValue) {
        struct.set(regs_read_count$LAYOUT, regs_read_count$OFFSET, fieldValue);
    }

    private static final SequenceLayout regs_write$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("regs_write"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t regs_write[47]
     * }
     */
    public static final SequenceLayout regs_write$layout() {
        return regs_write$LAYOUT;
    }

    private static final long regs_write$OFFSET = 42;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t regs_write[47]
     * }
     */
    public static final long regs_write$offset() {
        return regs_write$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t regs_write[47]
     * }
     */
    public static MemorySegment regs_write(MemorySegment struct) {
        return struct.asSlice(regs_write$OFFSET, regs_write$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t regs_write[47]
     * }
     */
    public static void regs_write(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, regs_write$OFFSET, regs_write$LAYOUT.byteSize());
    }

    private static long[] regs_write$DIMS = { 47 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint16_t regs_write[47]
     * }
     */
    public static long[] regs_write$dimensions() {
        return regs_write$DIMS;
    }
    private static final VarHandle regs_write$ELEM_HANDLE = regs_write$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint16_t regs_write[47]
     * }
     */
    public static short regs_write(MemorySegment struct, long index0) {
        return (short)regs_write$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint16_t regs_write[47]
     * }
     */
    public static void regs_write(MemorySegment struct, long index0, short fieldValue) {
        regs_write$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfByte regs_write_count$LAYOUT = (OfByte)$LAYOUT.select(groupElement("regs_write_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t regs_write_count
     * }
     */
    public static final OfByte regs_write_count$layout() {
        return regs_write_count$LAYOUT;
    }

    private static final long regs_write_count$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t regs_write_count
     * }
     */
    public static final long regs_write_count$offset() {
        return regs_write_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t regs_write_count
     * }
     */
    public static byte regs_write_count(MemorySegment struct) {
        return struct.get(regs_write_count$LAYOUT, regs_write_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t regs_write_count
     * }
     */
    public static void regs_write_count(MemorySegment struct, byte fieldValue) {
        struct.set(regs_write_count$LAYOUT, regs_write_count$OFFSET, fieldValue);
    }

    private static final SequenceLayout groups$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("groups"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t groups[16]
     * }
     */
    public static final SequenceLayout groups$layout() {
        return groups$LAYOUT;
    }

    private static final long groups$OFFSET = 137;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t groups[16]
     * }
     */
    public static final long groups$offset() {
        return groups$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t groups[16]
     * }
     */
    public static MemorySegment groups(MemorySegment struct) {
        return struct.asSlice(groups$OFFSET, groups$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t groups[16]
     * }
     */
    public static void groups(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, groups$OFFSET, groups$LAYOUT.byteSize());
    }

    private static long[] groups$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t groups[16]
     * }
     */
    public static long[] groups$dimensions() {
        return groups$DIMS;
    }
    private static final VarHandle groups$ELEM_HANDLE = groups$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t groups[16]
     * }
     */
    public static byte groups(MemorySegment struct, long index0) {
        return (byte)groups$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t groups[16]
     * }
     */
    public static void groups(MemorySegment struct, long index0, byte fieldValue) {
        groups$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfByte groups_count$LAYOUT = (OfByte)$LAYOUT.select(groupElement("groups_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t groups_count
     * }
     */
    public static final OfByte groups_count$layout() {
        return groups_count$LAYOUT;
    }

    private static final long groups_count$OFFSET = 153;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t groups_count
     * }
     */
    public static final long groups_count$offset() {
        return groups_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t groups_count
     * }
     */
    public static byte groups_count(MemorySegment struct) {
        return struct.get(groups_count$LAYOUT, groups_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t groups_count
     * }
     */
    public static void groups_count(MemorySegment struct, byte fieldValue) {
        struct.set(groups_count$LAYOUT, groups_count$OFFSET, fieldValue);
    }

    private static final OfBoolean writeback$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("writeback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool writeback
     * }
     */
    public static final OfBoolean writeback$layout() {
        return writeback$LAYOUT;
    }

    private static final long writeback$OFFSET = 154;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool writeback
     * }
     */
    public static final long writeback$offset() {
        return writeback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool writeback
     * }
     */
    public static boolean writeback(MemorySegment struct) {
        return struct.get(writeback$LAYOUT, writeback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool writeback
     * }
     */
    public static void writeback(MemorySegment struct, boolean fieldValue) {
        struct.set(writeback$LAYOUT, writeback$OFFSET, fieldValue);
    }

    private static final GroupLayout x86$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("x86"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_x86 x86
     * }
     */
    public static final GroupLayout x86$layout() {
        return x86$LAYOUT;
    }

    private static final long x86$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_x86 x86
     * }
     */
    public static final long x86$offset() {
        return x86$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_x86 x86
     * }
     */
    public static MemorySegment x86(MemorySegment struct) {
        return struct.asSlice(x86$OFFSET, x86$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_x86 x86
     * }
     */
    public static void x86(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, x86$OFFSET, x86$LAYOUT.byteSize());
    }

    private static final GroupLayout aarch64$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("aarch64"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_aarch64 aarch64
     * }
     */
    public static final GroupLayout aarch64$layout() {
        return aarch64$LAYOUT;
    }

    private static final long aarch64$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_aarch64 aarch64
     * }
     */
    public static final long aarch64$offset() {
        return aarch64$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_aarch64 aarch64
     * }
     */
    public static MemorySegment aarch64(MemorySegment struct) {
        return struct.asSlice(aarch64$OFFSET, aarch64$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_aarch64 aarch64
     * }
     */
    public static void aarch64(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, aarch64$OFFSET, aarch64$LAYOUT.byteSize());
    }

    private static final GroupLayout systemz$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("systemz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_systemz systemz
     * }
     */
    public static final GroupLayout systemz$layout() {
        return systemz$LAYOUT;
    }

    private static final long systemz$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_systemz systemz
     * }
     */
    public static final long systemz$offset() {
        return systemz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_systemz systemz
     * }
     */
    public static MemorySegment systemz(MemorySegment struct) {
        return struct.asSlice(systemz$OFFSET, systemz$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_systemz systemz
     * }
     */
    public static void systemz(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, systemz$OFFSET, systemz$LAYOUT.byteSize());
    }

    private static final GroupLayout arm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("arm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_arm arm
     * }
     */
    public static final GroupLayout arm$layout() {
        return arm$LAYOUT;
    }

    private static final long arm$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_arm arm
     * }
     */
    public static final long arm$offset() {
        return arm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_arm arm
     * }
     */
    public static MemorySegment arm(MemorySegment struct) {
        return struct.asSlice(arm$OFFSET, arm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_arm arm
     * }
     */
    public static void arm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, arm$OFFSET, arm$LAYOUT.byteSize());
    }

    private static final GroupLayout m68k$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("m68k"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_m68k m68k
     * }
     */
    public static final GroupLayout m68k$layout() {
        return m68k$LAYOUT;
    }

    private static final long m68k$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_m68k m68k
     * }
     */
    public static final long m68k$offset() {
        return m68k$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_m68k m68k
     * }
     */
    public static MemorySegment m68k(MemorySegment struct) {
        return struct.asSlice(m68k$OFFSET, m68k$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_m68k m68k
     * }
     */
    public static void m68k(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m68k$OFFSET, m68k$LAYOUT.byteSize());
    }

    private static final GroupLayout mips$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("mips"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_mips mips
     * }
     */
    public static final GroupLayout mips$layout() {
        return mips$LAYOUT;
    }

    private static final long mips$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_mips mips
     * }
     */
    public static final long mips$offset() {
        return mips$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_mips mips
     * }
     */
    public static MemorySegment mips(MemorySegment struct) {
        return struct.asSlice(mips$OFFSET, mips$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_mips mips
     * }
     */
    public static void mips(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mips$OFFSET, mips$LAYOUT.byteSize());
    }

    private static final GroupLayout ppc$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("ppc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_ppc ppc
     * }
     */
    public static final GroupLayout ppc$layout() {
        return ppc$LAYOUT;
    }

    private static final long ppc$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_ppc ppc
     * }
     */
    public static final long ppc$offset() {
        return ppc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_ppc ppc
     * }
     */
    public static MemorySegment ppc(MemorySegment struct) {
        return struct.asSlice(ppc$OFFSET, ppc$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_ppc ppc
     * }
     */
    public static void ppc(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ppc$OFFSET, ppc$LAYOUT.byteSize());
    }

    private static final GroupLayout sparc$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("sparc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_sparc sparc
     * }
     */
    public static final GroupLayout sparc$layout() {
        return sparc$LAYOUT;
    }

    private static final long sparc$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_sparc sparc
     * }
     */
    public static final long sparc$offset() {
        return sparc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_sparc sparc
     * }
     */
    public static MemorySegment sparc(MemorySegment struct) {
        return struct.asSlice(sparc$OFFSET, sparc$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_sparc sparc
     * }
     */
    public static void sparc(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sparc$OFFSET, sparc$LAYOUT.byteSize());
    }

    private static final GroupLayout xcore$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("xcore"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_xcore xcore
     * }
     */
    public static final GroupLayout xcore$layout() {
        return xcore$LAYOUT;
    }

    private static final long xcore$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_xcore xcore
     * }
     */
    public static final long xcore$offset() {
        return xcore$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_xcore xcore
     * }
     */
    public static MemorySegment xcore(MemorySegment struct) {
        return struct.asSlice(xcore$OFFSET, xcore$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_xcore xcore
     * }
     */
    public static void xcore(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, xcore$OFFSET, xcore$LAYOUT.byteSize());
    }

    private static final GroupLayout tms320c64x$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("tms320c64x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_tms320c64x tms320c64x
     * }
     */
    public static final GroupLayout tms320c64x$layout() {
        return tms320c64x$LAYOUT;
    }

    private static final long tms320c64x$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_tms320c64x tms320c64x
     * }
     */
    public static final long tms320c64x$offset() {
        return tms320c64x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_tms320c64x tms320c64x
     * }
     */
    public static MemorySegment tms320c64x(MemorySegment struct) {
        return struct.asSlice(tms320c64x$OFFSET, tms320c64x$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_tms320c64x tms320c64x
     * }
     */
    public static void tms320c64x(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, tms320c64x$OFFSET, tms320c64x$LAYOUT.byteSize());
    }

    private static final GroupLayout m680x$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("m680x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_m680x m680x
     * }
     */
    public static final GroupLayout m680x$layout() {
        return m680x$LAYOUT;
    }

    private static final long m680x$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_m680x m680x
     * }
     */
    public static final long m680x$offset() {
        return m680x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_m680x m680x
     * }
     */
    public static MemorySegment m680x(MemorySegment struct) {
        return struct.asSlice(m680x$OFFSET, m680x$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_m680x m680x
     * }
     */
    public static void m680x(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m680x$OFFSET, m680x$LAYOUT.byteSize());
    }

    private static final GroupLayout evm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("evm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_evm evm
     * }
     */
    public static final GroupLayout evm$layout() {
        return evm$LAYOUT;
    }

    private static final long evm$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_evm evm
     * }
     */
    public static final long evm$offset() {
        return evm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_evm evm
     * }
     */
    public static MemorySegment evm(MemorySegment struct) {
        return struct.asSlice(evm$OFFSET, evm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_evm evm
     * }
     */
    public static void evm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, evm$OFFSET, evm$LAYOUT.byteSize());
    }

    private static final GroupLayout mos65xx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("mos65xx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_mos65xx mos65xx
     * }
     */
    public static final GroupLayout mos65xx$layout() {
        return mos65xx$LAYOUT;
    }

    private static final long mos65xx$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_mos65xx mos65xx
     * }
     */
    public static final long mos65xx$offset() {
        return mos65xx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_mos65xx mos65xx
     * }
     */
    public static MemorySegment mos65xx(MemorySegment struct) {
        return struct.asSlice(mos65xx$OFFSET, mos65xx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_mos65xx mos65xx
     * }
     */
    public static void mos65xx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mos65xx$OFFSET, mos65xx$LAYOUT.byteSize());
    }

    private static final GroupLayout wasm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("wasm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_wasm wasm
     * }
     */
    public static final GroupLayout wasm$layout() {
        return wasm$LAYOUT;
    }

    private static final long wasm$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_wasm wasm
     * }
     */
    public static final long wasm$offset() {
        return wasm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_wasm wasm
     * }
     */
    public static MemorySegment wasm(MemorySegment struct) {
        return struct.asSlice(wasm$OFFSET, wasm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_wasm wasm
     * }
     */
    public static void wasm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, wasm$OFFSET, wasm$LAYOUT.byteSize());
    }

    private static final GroupLayout bpf$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("bpf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_bpf bpf
     * }
     */
    public static final GroupLayout bpf$layout() {
        return bpf$LAYOUT;
    }

    private static final long bpf$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_bpf bpf
     * }
     */
    public static final long bpf$offset() {
        return bpf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_bpf bpf
     * }
     */
    public static MemorySegment bpf(MemorySegment struct) {
        return struct.asSlice(bpf$OFFSET, bpf$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_bpf bpf
     * }
     */
    public static void bpf(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bpf$OFFSET, bpf$LAYOUT.byteSize());
    }

    private static final GroupLayout riscv$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("riscv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_riscv riscv
     * }
     */
    public static final GroupLayout riscv$layout() {
        return riscv$LAYOUT;
    }

    private static final long riscv$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_riscv riscv
     * }
     */
    public static final long riscv$offset() {
        return riscv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_riscv riscv
     * }
     */
    public static MemorySegment riscv(MemorySegment struct) {
        return struct.asSlice(riscv$OFFSET, riscv$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_riscv riscv
     * }
     */
    public static void riscv(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, riscv$OFFSET, riscv$LAYOUT.byteSize());
    }

    private static final GroupLayout sh$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("sh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_sh sh
     * }
     */
    public static final GroupLayout sh$layout() {
        return sh$LAYOUT;
    }

    private static final long sh$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_sh sh
     * }
     */
    public static final long sh$offset() {
        return sh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_sh sh
     * }
     */
    public static MemorySegment sh(MemorySegment struct) {
        return struct.asSlice(sh$OFFSET, sh$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_sh sh
     * }
     */
    public static void sh(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sh$OFFSET, sh$LAYOUT.byteSize());
    }

    private static final GroupLayout tricore$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("tricore"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_tricore tricore
     * }
     */
    public static final GroupLayout tricore$layout() {
        return tricore$LAYOUT;
    }

    private static final long tricore$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_tricore tricore
     * }
     */
    public static final long tricore$offset() {
        return tricore$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_tricore tricore
     * }
     */
    public static MemorySegment tricore(MemorySegment struct) {
        return struct.asSlice(tricore$OFFSET, tricore$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_tricore tricore
     * }
     */
    public static void tricore(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, tricore$OFFSET, tricore$LAYOUT.byteSize());
    }

    private static final GroupLayout alpha$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("alpha"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_alpha alpha
     * }
     */
    public static final GroupLayout alpha$layout() {
        return alpha$LAYOUT;
    }

    private static final long alpha$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_alpha alpha
     * }
     */
    public static final long alpha$offset() {
        return alpha$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_alpha alpha
     * }
     */
    public static MemorySegment alpha(MemorySegment struct) {
        return struct.asSlice(alpha$OFFSET, alpha$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_alpha alpha
     * }
     */
    public static void alpha(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, alpha$OFFSET, alpha$LAYOUT.byteSize());
    }

    private static final GroupLayout hppa$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("hppa"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_hppa hppa
     * }
     */
    public static final GroupLayout hppa$layout() {
        return hppa$LAYOUT;
    }

    private static final long hppa$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_hppa hppa
     * }
     */
    public static final long hppa$offset() {
        return hppa$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_hppa hppa
     * }
     */
    public static MemorySegment hppa(MemorySegment struct) {
        return struct.asSlice(hppa$OFFSET, hppa$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_hppa hppa
     * }
     */
    public static void hppa(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, hppa$OFFSET, hppa$LAYOUT.byteSize());
    }

    private static final GroupLayout loongarch$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("loongarch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_loongarch loongarch
     * }
     */
    public static final GroupLayout loongarch$layout() {
        return loongarch$LAYOUT;
    }

    private static final long loongarch$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_loongarch loongarch
     * }
     */
    public static final long loongarch$offset() {
        return loongarch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_loongarch loongarch
     * }
     */
    public static MemorySegment loongarch(MemorySegment struct) {
        return struct.asSlice(loongarch$OFFSET, loongarch$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_loongarch loongarch
     * }
     */
    public static void loongarch(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, loongarch$OFFSET, loongarch$LAYOUT.byteSize());
    }

    private static final GroupLayout xtensa$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("xtensa"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_xtensa xtensa
     * }
     */
    public static final GroupLayout xtensa$layout() {
        return xtensa$LAYOUT;
    }

    private static final long xtensa$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_xtensa xtensa
     * }
     */
    public static final long xtensa$offset() {
        return xtensa$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_xtensa xtensa
     * }
     */
    public static MemorySegment xtensa(MemorySegment struct) {
        return struct.asSlice(xtensa$OFFSET, xtensa$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_xtensa xtensa
     * }
     */
    public static void xtensa(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, xtensa$OFFSET, xtensa$LAYOUT.byteSize());
    }

    private static final GroupLayout arc$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$423:2"), groupElement("arc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_arc arc
     * }
     */
    public static final GroupLayout arc$layout() {
        return arc$LAYOUT;
    }

    private static final long arc$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_arc arc
     * }
     */
    public static final long arc$offset() {
        return arc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_arc arc
     * }
     */
    public static MemorySegment arc(MemorySegment struct) {
        return struct.asSlice(arc$OFFSET, arc$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_arc arc
     * }
     */
    public static void arc(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, arc$OFFSET, arc$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

