// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tms320c64x_op_mem {
 *     unsigned int base;
 *     unsigned int disp;
 *     unsigned int unit;
 *     unsigned int scaled;
 *     unsigned int disptype;
 *     unsigned int direction;
 *     unsigned int modify;
 * }
 * }
 */
public class tms320c64x_op_mem {

    tms320c64x_op_mem() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        capstone_h.C_INT.withName("base"),
        capstone_h.C_INT.withName("disp"),
        capstone_h.C_INT.withName("unit"),
        capstone_h.C_INT.withName("scaled"),
        capstone_h.C_INT.withName("disptype"),
        capstone_h.C_INT.withName("direction"),
        capstone_h.C_INT.withName("modify")
    ).withName("tms320c64x_op_mem");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt base$LAYOUT = (OfInt)$LAYOUT.select(groupElement("base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int base
     * }
     */
    public static final OfInt base$layout() {
        return base$LAYOUT;
    }

    private static final long base$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int base
     * }
     */
    public static final long base$offset() {
        return base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int base
     * }
     */
    public static int base(MemorySegment struct) {
        return struct.get(base$LAYOUT, base$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int base
     * }
     */
    public static void base(MemorySegment struct, int fieldValue) {
        struct.set(base$LAYOUT, base$OFFSET, fieldValue);
    }

    private static final OfInt disp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("disp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int disp
     * }
     */
    public static final OfInt disp$layout() {
        return disp$LAYOUT;
    }

    private static final long disp$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int disp
     * }
     */
    public static final long disp$offset() {
        return disp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int disp
     * }
     */
    public static int disp(MemorySegment struct) {
        return struct.get(disp$LAYOUT, disp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int disp
     * }
     */
    public static void disp(MemorySegment struct, int fieldValue) {
        struct.set(disp$LAYOUT, disp$OFFSET, fieldValue);
    }

    private static final OfInt unit$LAYOUT = (OfInt)$LAYOUT.select(groupElement("unit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int unit
     * }
     */
    public static final OfInt unit$layout() {
        return unit$LAYOUT;
    }

    private static final long unit$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int unit
     * }
     */
    public static final long unit$offset() {
        return unit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int unit
     * }
     */
    public static int unit(MemorySegment struct) {
        return struct.get(unit$LAYOUT, unit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int unit
     * }
     */
    public static void unit(MemorySegment struct, int fieldValue) {
        struct.set(unit$LAYOUT, unit$OFFSET, fieldValue);
    }

    private static final OfInt scaled$LAYOUT = (OfInt)$LAYOUT.select(groupElement("scaled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int scaled
     * }
     */
    public static final OfInt scaled$layout() {
        return scaled$LAYOUT;
    }

    private static final long scaled$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int scaled
     * }
     */
    public static final long scaled$offset() {
        return scaled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int scaled
     * }
     */
    public static int scaled(MemorySegment struct) {
        return struct.get(scaled$LAYOUT, scaled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int scaled
     * }
     */
    public static void scaled(MemorySegment struct, int fieldValue) {
        struct.set(scaled$LAYOUT, scaled$OFFSET, fieldValue);
    }

    private static final OfInt disptype$LAYOUT = (OfInt)$LAYOUT.select(groupElement("disptype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int disptype
     * }
     */
    public static final OfInt disptype$layout() {
        return disptype$LAYOUT;
    }

    private static final long disptype$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int disptype
     * }
     */
    public static final long disptype$offset() {
        return disptype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int disptype
     * }
     */
    public static int disptype(MemorySegment struct) {
        return struct.get(disptype$LAYOUT, disptype$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int disptype
     * }
     */
    public static void disptype(MemorySegment struct, int fieldValue) {
        struct.set(disptype$LAYOUT, disptype$OFFSET, fieldValue);
    }

    private static final OfInt direction$LAYOUT = (OfInt)$LAYOUT.select(groupElement("direction"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int direction
     * }
     */
    public static final OfInt direction$layout() {
        return direction$LAYOUT;
    }

    private static final long direction$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int direction
     * }
     */
    public static final long direction$offset() {
        return direction$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int direction
     * }
     */
    public static int direction(MemorySegment struct) {
        return struct.get(direction$LAYOUT, direction$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int direction
     * }
     */
    public static void direction(MemorySegment struct, int fieldValue) {
        struct.set(direction$LAYOUT, direction$OFFSET, fieldValue);
    }

    private static final OfInt modify$LAYOUT = (OfInt)$LAYOUT.select(groupElement("modify"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int modify
     * }
     */
    public static final OfInt modify$layout() {
        return modify$LAYOUT;
    }

    private static final long modify$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int modify
     * }
     */
    public static final long modify$offset() {
        return modify$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int modify
     * }
     */
    public static int modify(MemorySegment struct) {
        return struct.get(modify$LAYOUT, modify$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int modify
     * }
     */
    public static void modify(MemorySegment struct, int fieldValue) {
        struct.set(modify$LAYOUT, modify$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

