// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cs_evm {
 *     unsigned char pop;
 *     unsigned char push;
 *     unsigned int fee;
 * }
 * }
 */
public class cs_evm {

    cs_evm() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        capstone_h.C_CHAR.withName("pop"),
        capstone_h.C_CHAR.withName("push"),
        MemoryLayout.paddingLayout(2),
        capstone_h.C_INT.withName("fee")
    ).withName("cs_evm");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte pop$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pop"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char pop
     * }
     */
    public static final OfByte pop$layout() {
        return pop$LAYOUT;
    }

    private static final long pop$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char pop
     * }
     */
    public static final long pop$offset() {
        return pop$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char pop
     * }
     */
    public static byte pop(MemorySegment struct) {
        return struct.get(pop$LAYOUT, pop$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char pop
     * }
     */
    public static void pop(MemorySegment struct, byte fieldValue) {
        struct.set(pop$LAYOUT, pop$OFFSET, fieldValue);
    }

    private static final OfByte push$LAYOUT = (OfByte)$LAYOUT.select(groupElement("push"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char push
     * }
     */
    public static final OfByte push$layout() {
        return push$LAYOUT;
    }

    private static final long push$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char push
     * }
     */
    public static final long push$offset() {
        return push$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char push
     * }
     */
    public static byte push(MemorySegment struct) {
        return struct.get(push$LAYOUT, push$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char push
     * }
     */
    public static void push(MemorySegment struct, byte fieldValue) {
        struct.set(push$LAYOUT, push$OFFSET, fieldValue);
    }

    private static final OfInt fee$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fee"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int fee
     * }
     */
    public static final OfInt fee$layout() {
        return fee$LAYOUT;
    }

    private static final long fee$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int fee
     * }
     */
    public static final long fee$offset() {
        return fee$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int fee
     * }
     */
    public static int fee(MemorySegment struct) {
        return struct.get(fee$LAYOUT, fee$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int fee
     * }
     */
    public static void fee(MemorySegment struct, int fieldValue) {
        struct.set(fee$LAYOUT, fee$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

