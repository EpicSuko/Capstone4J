// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     uint8_t bo;
 *     uint8_t bi;
 *     ppc_cr_bit crX_bit;
 *     ppc_reg crX;
 *     ppc_br_hint hint;
 *     ppc_pred pred_cr;
 *     ppc_pred pred_ctr;
 *     ppc_bh bh;
 * }
 * }
 */
public class ppc_bc {

    ppc_bc() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        capstone_h.C_CHAR.withName("bo"),
        capstone_h.C_CHAR.withName("bi"),
        MemoryLayout.paddingLayout(2),
        capstone_h.C_INT.withName("crX_bit"),
        capstone_h.C_INT.withName("crX"),
        capstone_h.C_INT.withName("hint"),
        capstone_h.C_INT.withName("pred_cr"),
        capstone_h.C_INT.withName("pred_ctr"),
        capstone_h.C_INT.withName("bh")
    ).withName("$anon$882:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte bo$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t bo
     * }
     */
    public static final OfByte bo$layout() {
        return bo$LAYOUT;
    }

    private static final long bo$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t bo
     * }
     */
    public static final long bo$offset() {
        return bo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t bo
     * }
     */
    public static byte bo(MemorySegment struct) {
        return struct.get(bo$LAYOUT, bo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t bo
     * }
     */
    public static void bo(MemorySegment struct, byte fieldValue) {
        struct.set(bo$LAYOUT, bo$OFFSET, fieldValue);
    }

    private static final OfByte bi$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bi"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t bi
     * }
     */
    public static final OfByte bi$layout() {
        return bi$LAYOUT;
    }

    private static final long bi$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t bi
     * }
     */
    public static final long bi$offset() {
        return bi$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t bi
     * }
     */
    public static byte bi(MemorySegment struct) {
        return struct.get(bi$LAYOUT, bi$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t bi
     * }
     */
    public static void bi(MemorySegment struct, byte fieldValue) {
        struct.set(bi$LAYOUT, bi$OFFSET, fieldValue);
    }

    private static final OfInt crX_bit$LAYOUT = (OfInt)$LAYOUT.select(groupElement("crX_bit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ppc_cr_bit crX_bit
     * }
     */
    public static final OfInt crX_bit$layout() {
        return crX_bit$LAYOUT;
    }

    private static final long crX_bit$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ppc_cr_bit crX_bit
     * }
     */
    public static final long crX_bit$offset() {
        return crX_bit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ppc_cr_bit crX_bit
     * }
     */
    public static int crX_bit(MemorySegment struct) {
        return struct.get(crX_bit$LAYOUT, crX_bit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ppc_cr_bit crX_bit
     * }
     */
    public static void crX_bit(MemorySegment struct, int fieldValue) {
        struct.set(crX_bit$LAYOUT, crX_bit$OFFSET, fieldValue);
    }

    private static final OfInt crX$LAYOUT = (OfInt)$LAYOUT.select(groupElement("crX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ppc_reg crX
     * }
     */
    public static final OfInt crX$layout() {
        return crX$LAYOUT;
    }

    private static final long crX$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ppc_reg crX
     * }
     */
    public static final long crX$offset() {
        return crX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ppc_reg crX
     * }
     */
    public static int crX(MemorySegment struct) {
        return struct.get(crX$LAYOUT, crX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ppc_reg crX
     * }
     */
    public static void crX(MemorySegment struct, int fieldValue) {
        struct.set(crX$LAYOUT, crX$OFFSET, fieldValue);
    }

    private static final OfInt hint$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ppc_br_hint hint
     * }
     */
    public static final OfInt hint$layout() {
        return hint$LAYOUT;
    }

    private static final long hint$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ppc_br_hint hint
     * }
     */
    public static final long hint$offset() {
        return hint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ppc_br_hint hint
     * }
     */
    public static int hint(MemorySegment struct) {
        return struct.get(hint$LAYOUT, hint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ppc_br_hint hint
     * }
     */
    public static void hint(MemorySegment struct, int fieldValue) {
        struct.set(hint$LAYOUT, hint$OFFSET, fieldValue);
    }

    private static final OfInt pred_cr$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pred_cr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ppc_pred pred_cr
     * }
     */
    public static final OfInt pred_cr$layout() {
        return pred_cr$LAYOUT;
    }

    private static final long pred_cr$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ppc_pred pred_cr
     * }
     */
    public static final long pred_cr$offset() {
        return pred_cr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ppc_pred pred_cr
     * }
     */
    public static int pred_cr(MemorySegment struct) {
        return struct.get(pred_cr$LAYOUT, pred_cr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ppc_pred pred_cr
     * }
     */
    public static void pred_cr(MemorySegment struct, int fieldValue) {
        struct.set(pred_cr$LAYOUT, pred_cr$OFFSET, fieldValue);
    }

    private static final OfInt pred_ctr$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pred_ctr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ppc_pred pred_ctr
     * }
     */
    public static final OfInt pred_ctr$layout() {
        return pred_ctr$LAYOUT;
    }

    private static final long pred_ctr$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ppc_pred pred_ctr
     * }
     */
    public static final long pred_ctr$offset() {
        return pred_ctr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ppc_pred pred_ctr
     * }
     */
    public static int pred_ctr(MemorySegment struct) {
        return struct.get(pred_ctr$LAYOUT, pred_ctr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ppc_pred pred_ctr
     * }
     */
    public static void pred_ctr(MemorySegment struct, int fieldValue) {
        struct.set(pred_ctr$LAYOUT, pred_ctr$OFFSET, fieldValue);
    }

    private static final OfInt bh$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ppc_bh bh
     * }
     */
    public static final OfInt bh$layout() {
        return bh$LAYOUT;
    }

    private static final long bh$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ppc_bh bh
     * }
     */
    public static final long bh$offset() {
        return bh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ppc_bh bh
     * }
     */
    public static int bh(MemorySegment struct) {
        return struct.get(bh$LAYOUT, bh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ppc_bh bh
     * }
     */
    public static void bh(MemorySegment struct, int fieldValue) {
        struct.set(bh$LAYOUT, bh$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

