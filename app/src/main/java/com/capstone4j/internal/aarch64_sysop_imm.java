// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union {
 *     aarch64_dbnxs dbnxs;
 *     aarch64_exactfpimm exactfpimm;
 *     int raw_val;
 * }
 * }
 */
public class aarch64_sysop_imm {

    aarch64_sysop_imm() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        capstone_h.C_INT.withName("dbnxs"),
        capstone_h.C_INT.withName("exactfpimm"),
        capstone_h.C_INT.withName("raw_val")
    ).withName("$anon$1985:9");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dbnxs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dbnxs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_dbnxs dbnxs
     * }
     */
    public static final OfInt dbnxs$layout() {
        return dbnxs$LAYOUT;
    }

    private static final long dbnxs$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_dbnxs dbnxs
     * }
     */
    public static final long dbnxs$offset() {
        return dbnxs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_dbnxs dbnxs
     * }
     */
    public static int dbnxs(MemorySegment union) {
        return union.get(dbnxs$LAYOUT, dbnxs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_dbnxs dbnxs
     * }
     */
    public static void dbnxs(MemorySegment union, int fieldValue) {
        union.set(dbnxs$LAYOUT, dbnxs$OFFSET, fieldValue);
    }

    private static final OfInt exactfpimm$LAYOUT = (OfInt)$LAYOUT.select(groupElement("exactfpimm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_exactfpimm exactfpimm
     * }
     */
    public static final OfInt exactfpimm$layout() {
        return exactfpimm$LAYOUT;
    }

    private static final long exactfpimm$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_exactfpimm exactfpimm
     * }
     */
    public static final long exactfpimm$offset() {
        return exactfpimm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_exactfpimm exactfpimm
     * }
     */
    public static int exactfpimm(MemorySegment union) {
        return union.get(exactfpimm$LAYOUT, exactfpimm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_exactfpimm exactfpimm
     * }
     */
    public static void exactfpimm(MemorySegment union, int fieldValue) {
        union.set(exactfpimm$LAYOUT, exactfpimm$OFFSET, fieldValue);
    }

    private static final OfInt raw_val$LAYOUT = (OfInt)$LAYOUT.select(groupElement("raw_val"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int raw_val
     * }
     */
    public static final OfInt raw_val$layout() {
        return raw_val$LAYOUT;
    }

    private static final long raw_val$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int raw_val
     * }
     */
    public static final long raw_val$offset() {
        return raw_val$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int raw_val
     * }
     */
    public static int raw_val(MemorySegment union) {
        return union.get(raw_val$LAYOUT, raw_val$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int raw_val
     * }
     */
    public static void raw_val(MemorySegment union, int fieldValue) {
        union.set(raw_val$LAYOUT, raw_val$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

