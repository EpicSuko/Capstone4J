// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     aarch64_sme_op_type type;
 *     aarch64_reg tile;
 *     aarch64_reg slice_reg;
 *     union {
 *         uint16_t imm;
 *         aarch64_imm_range imm_range;
 *     } slice_offset;
 *     bool has_range_offset;
 *     bool is_vertical;
 * }
 * }
 */
public class aarch64_op_sme {

    aarch64_op_sme() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        capstone_h.C_INT.withName("type"),
        capstone_h.C_INT.withName("tile"),
        capstone_h.C_INT.withName("slice_reg"),
        aarch64_op_sme.slice_offset.layout().withName("slice_offset"),
        capstone_h.C_BOOL.withName("has_range_offset"),
        capstone_h.C_BOOL.withName("is_vertical")
    ).withName("$anon$2797:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_sme_op_type type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_sme_op_type type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_sme_op_type type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_sme_op_type type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt tile$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_reg tile
     * }
     */
    public static final OfInt tile$layout() {
        return tile$LAYOUT;
    }

    private static final long tile$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_reg tile
     * }
     */
    public static final long tile$offset() {
        return tile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_reg tile
     * }
     */
    public static int tile(MemorySegment struct) {
        return struct.get(tile$LAYOUT, tile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_reg tile
     * }
     */
    public static void tile(MemorySegment struct, int fieldValue) {
        struct.set(tile$LAYOUT, tile$OFFSET, fieldValue);
    }

    private static final OfInt slice_reg$LAYOUT = (OfInt)$LAYOUT.select(groupElement("slice_reg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_reg slice_reg
     * }
     */
    public static final OfInt slice_reg$layout() {
        return slice_reg$LAYOUT;
    }

    private static final long slice_reg$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_reg slice_reg
     * }
     */
    public static final long slice_reg$offset() {
        return slice_reg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_reg slice_reg
     * }
     */
    public static int slice_reg(MemorySegment struct) {
        return struct.get(slice_reg$LAYOUT, slice_reg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_reg slice_reg
     * }
     */
    public static void slice_reg(MemorySegment struct, int fieldValue) {
        struct.set(slice_reg$LAYOUT, slice_reg$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     uint16_t imm;
     *     aarch64_imm_range imm_range;
     * }
     * }
     */
    public static class slice_offset {

        slice_offset() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            capstone_h.C_SHORT.withName("imm"),
            aarch64_imm_range.layout().withName("imm_range")
        ).withName("$anon$2801:2");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfShort imm$LAYOUT = (OfShort)$LAYOUT.select(groupElement("imm"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint16_t imm
         * }
         */
        public static final OfShort imm$layout() {
            return imm$LAYOUT;
        }

        private static final long imm$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint16_t imm
         * }
         */
        public static final long imm$offset() {
            return imm$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint16_t imm
         * }
         */
        public static short imm(MemorySegment union) {
            return union.get(imm$LAYOUT, imm$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint16_t imm
         * }
         */
        public static void imm(MemorySegment union, short fieldValue) {
            union.set(imm$LAYOUT, imm$OFFSET, fieldValue);
        }

        private static final GroupLayout imm_range$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("imm_range"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * aarch64_imm_range imm_range
         * }
         */
        public static final GroupLayout imm_range$layout() {
            return imm_range$LAYOUT;
        }

        private static final long imm_range$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * aarch64_imm_range imm_range
         * }
         */
        public static final long imm_range$offset() {
            return imm_range$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * aarch64_imm_range imm_range
         * }
         */
        public static MemorySegment imm_range(MemorySegment union) {
            return union.asSlice(imm_range$OFFSET, imm_range$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * aarch64_imm_range imm_range
         * }
         */
        public static void imm_range(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, imm_range$OFFSET, imm_range$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout slice_offset$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("slice_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     uint16_t imm;
     *     aarch64_imm_range imm_range;
     * } slice_offset
     * }
     */
    public static final GroupLayout slice_offset$layout() {
        return slice_offset$LAYOUT;
    }

    private static final long slice_offset$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     uint16_t imm;
     *     aarch64_imm_range imm_range;
     * } slice_offset
     * }
     */
    public static final long slice_offset$offset() {
        return slice_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     uint16_t imm;
     *     aarch64_imm_range imm_range;
     * } slice_offset
     * }
     */
    public static MemorySegment slice_offset(MemorySegment struct) {
        return struct.asSlice(slice_offset$OFFSET, slice_offset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     uint16_t imm;
     *     aarch64_imm_range imm_range;
     * } slice_offset
     * }
     */
    public static void slice_offset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, slice_offset$OFFSET, slice_offset$LAYOUT.byteSize());
    }

    private static final OfBoolean has_range_offset$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("has_range_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool has_range_offset
     * }
     */
    public static final OfBoolean has_range_offset$layout() {
        return has_range_offset$LAYOUT;
    }

    private static final long has_range_offset$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool has_range_offset
     * }
     */
    public static final long has_range_offset$offset() {
        return has_range_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool has_range_offset
     * }
     */
    public static boolean has_range_offset(MemorySegment struct) {
        return struct.get(has_range_offset$LAYOUT, has_range_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool has_range_offset
     * }
     */
    public static void has_range_offset(MemorySegment struct, boolean fieldValue) {
        struct.set(has_range_offset$LAYOUT, has_range_offset$OFFSET, fieldValue);
    }

    private static final OfBoolean is_vertical$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_vertical"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_vertical
     * }
     */
    public static final OfBoolean is_vertical$layout() {
        return is_vertical$LAYOUT;
    }

    private static final long is_vertical$OFFSET = 15;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_vertical
     * }
     */
    public static final long is_vertical$offset() {
        return is_vertical$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_vertical
     * }
     */
    public static boolean is_vertical(MemorySegment struct) {
        return struct.get(is_vertical$LAYOUT, is_vertical$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_vertical
     * }
     */
    public static void is_vertical(MemorySegment struct, boolean fieldValue) {
        struct.set(is_vertical$LAYOUT, is_vertical$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

