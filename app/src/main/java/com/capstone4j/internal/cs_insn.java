// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cs_insn {
 *     unsigned int id;
 *     uint64_t alias_id;
 *     uint64_t address;
 *     uint16_t size;
 *     uint8_t bytes[24];
 *     char mnemonic[32];
 *     char op_str[160];
 *     bool is_alias;
 *     bool usesAliasDetails;
 *     cs_detail *detail;
 * }
 * }
 */
public class cs_insn {

    cs_insn() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        capstone_h.C_INT.withName("id"),
        MemoryLayout.paddingLayout(4),
        capstone_h.C_LONG_LONG.withName("alias_id"),
        capstone_h.C_LONG_LONG.withName("address"),
        capstone_h.C_SHORT.withName("size"),
        MemoryLayout.sequenceLayout(24, capstone_h.C_CHAR).withName("bytes"),
        MemoryLayout.sequenceLayout(32, capstone_h.C_CHAR).withName("mnemonic"),
        MemoryLayout.sequenceLayout(160, capstone_h.C_CHAR).withName("op_str"),
        capstone_h.C_BOOL.withName("is_alias"),
        capstone_h.C_BOOL.withName("usesAliasDetails"),
        MemoryLayout.paddingLayout(4),
        capstone_h.C_POINTER.withName("detail")
    ).withName("cs_insn");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int id
     * }
     */
    public static final OfInt id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int id
     * }
     */
    public static int id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int id
     * }
     */
    public static void id(MemorySegment struct, int fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final OfLong alias_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("alias_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t alias_id
     * }
     */
    public static final OfLong alias_id$layout() {
        return alias_id$LAYOUT;
    }

    private static final long alias_id$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t alias_id
     * }
     */
    public static final long alias_id$offset() {
        return alias_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t alias_id
     * }
     */
    public static long alias_id(MemorySegment struct) {
        return struct.get(alias_id$LAYOUT, alias_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t alias_id
     * }
     */
    public static void alias_id(MemorySegment struct, long fieldValue) {
        struct.set(alias_id$LAYOUT, alias_id$OFFSET, fieldValue);
    }

    private static final OfLong address$LAYOUT = (OfLong)$LAYOUT.select(groupElement("address"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t address
     * }
     */
    public static final OfLong address$layout() {
        return address$LAYOUT;
    }

    private static final long address$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t address
     * }
     */
    public static final long address$offset() {
        return address$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t address
     * }
     */
    public static long address(MemorySegment struct) {
        return struct.get(address$LAYOUT, address$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t address
     * }
     */
    public static void address(MemorySegment struct, long fieldValue) {
        struct.set(address$LAYOUT, address$OFFSET, fieldValue);
    }

    private static final OfShort size$LAYOUT = (OfShort)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t size
     * }
     */
    public static final OfShort size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t size
     * }
     */
    public static short size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t size
     * }
     */
    public static void size(MemorySegment struct, short fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final SequenceLayout bytes$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("bytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t bytes[24]
     * }
     */
    public static final SequenceLayout bytes$layout() {
        return bytes$LAYOUT;
    }

    private static final long bytes$OFFSET = 26;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t bytes[24]
     * }
     */
    public static final long bytes$offset() {
        return bytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t bytes[24]
     * }
     */
    public static MemorySegment bytes(MemorySegment struct) {
        return struct.asSlice(bytes$OFFSET, bytes$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t bytes[24]
     * }
     */
    public static void bytes(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bytes$OFFSET, bytes$LAYOUT.byteSize());
    }

    private static long[] bytes$DIMS = { 24 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t bytes[24]
     * }
     */
    public static long[] bytes$dimensions() {
        return bytes$DIMS;
    }
    private static final VarHandle bytes$ELEM_HANDLE = bytes$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t bytes[24]
     * }
     */
    public static byte bytes(MemorySegment struct, long index0) {
        return (byte)bytes$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t bytes[24]
     * }
     */
    public static void bytes(MemorySegment struct, long index0, byte fieldValue) {
        bytes$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout mnemonic$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("mnemonic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char mnemonic[32]
     * }
     */
    public static final SequenceLayout mnemonic$layout() {
        return mnemonic$LAYOUT;
    }

    private static final long mnemonic$OFFSET = 50;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char mnemonic[32]
     * }
     */
    public static final long mnemonic$offset() {
        return mnemonic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char mnemonic[32]
     * }
     */
    public static MemorySegment mnemonic(MemorySegment struct) {
        return struct.asSlice(mnemonic$OFFSET, mnemonic$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char mnemonic[32]
     * }
     */
    public static void mnemonic(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mnemonic$OFFSET, mnemonic$LAYOUT.byteSize());
    }

    private static long[] mnemonic$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char mnemonic[32]
     * }
     */
    public static long[] mnemonic$dimensions() {
        return mnemonic$DIMS;
    }
    private static final VarHandle mnemonic$ELEM_HANDLE = mnemonic$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char mnemonic[32]
     * }
     */
    public static byte mnemonic(MemorySegment struct, long index0) {
        return (byte)mnemonic$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char mnemonic[32]
     * }
     */
    public static void mnemonic(MemorySegment struct, long index0, byte fieldValue) {
        mnemonic$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout op_str$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("op_str"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char op_str[160]
     * }
     */
    public static final SequenceLayout op_str$layout() {
        return op_str$LAYOUT;
    }

    private static final long op_str$OFFSET = 82;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char op_str[160]
     * }
     */
    public static final long op_str$offset() {
        return op_str$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char op_str[160]
     * }
     */
    public static MemorySegment op_str(MemorySegment struct) {
        return struct.asSlice(op_str$OFFSET, op_str$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char op_str[160]
     * }
     */
    public static void op_str(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, op_str$OFFSET, op_str$LAYOUT.byteSize());
    }

    private static long[] op_str$DIMS = { 160 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char op_str[160]
     * }
     */
    public static long[] op_str$dimensions() {
        return op_str$DIMS;
    }
    private static final VarHandle op_str$ELEM_HANDLE = op_str$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char op_str[160]
     * }
     */
    public static byte op_str(MemorySegment struct, long index0) {
        return (byte)op_str$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char op_str[160]
     * }
     */
    public static void op_str(MemorySegment struct, long index0, byte fieldValue) {
        op_str$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfBoolean is_alias$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_alias"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_alias
     * }
     */
    public static final OfBoolean is_alias$layout() {
        return is_alias$LAYOUT;
    }

    private static final long is_alias$OFFSET = 242;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_alias
     * }
     */
    public static final long is_alias$offset() {
        return is_alias$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_alias
     * }
     */
    public static boolean is_alias(MemorySegment struct) {
        return struct.get(is_alias$LAYOUT, is_alias$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_alias
     * }
     */
    public static void is_alias(MemorySegment struct, boolean fieldValue) {
        struct.set(is_alias$LAYOUT, is_alias$OFFSET, fieldValue);
    }

    private static final OfBoolean usesAliasDetails$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("usesAliasDetails"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool usesAliasDetails
     * }
     */
    public static final OfBoolean usesAliasDetails$layout() {
        return usesAliasDetails$LAYOUT;
    }

    private static final long usesAliasDetails$OFFSET = 243;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool usesAliasDetails
     * }
     */
    public static final long usesAliasDetails$offset() {
        return usesAliasDetails$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool usesAliasDetails
     * }
     */
    public static boolean usesAliasDetails(MemorySegment struct) {
        return struct.get(usesAliasDetails$LAYOUT, usesAliasDetails$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool usesAliasDetails
     * }
     */
    public static void usesAliasDetails(MemorySegment struct, boolean fieldValue) {
        struct.set(usesAliasDetails$LAYOUT, usesAliasDetails$OFFSET, fieldValue);
    }

    private static final AddressLayout detail$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("detail"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_detail *detail
     * }
     */
    public static final AddressLayout detail$layout() {
        return detail$LAYOUT;
    }

    private static final long detail$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_detail *detail
     * }
     */
    public static final long detail$offset() {
        return detail$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_detail *detail
     * }
     */
    public static MemorySegment detail(MemorySegment struct) {
        return struct.get(detail$LAYOUT, detail$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_detail *detail
     * }
     */
    public static void detail(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(detail$LAYOUT, detail$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

