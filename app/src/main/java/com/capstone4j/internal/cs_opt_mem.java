// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cs_opt_mem {
 *     cs_malloc_t malloc;
 *     cs_calloc_t calloc;
 *     cs_realloc_t realloc;
 *     cs_free_t free;
 *     cs_vsnprintf_t vsnprintf;
 * }
 * }
 */
public class cs_opt_mem {

    cs_opt_mem() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        capstone_h.C_POINTER.withName("malloc"),
        capstone_h.C_POINTER.withName("calloc"),
        capstone_h.C_POINTER.withName("realloc"),
        capstone_h.C_POINTER.withName("free"),
        capstone_h.C_POINTER.withName("vsnprintf")
    ).withName("cs_opt_mem");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout malloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("malloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_malloc_t malloc
     * }
     */
    public static final AddressLayout malloc$layout() {
        return malloc$LAYOUT;
    }

    private static final long malloc$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_malloc_t malloc
     * }
     */
    public static final long malloc$offset() {
        return malloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_malloc_t malloc
     * }
     */
    public static MemorySegment malloc(MemorySegment struct) {
        return struct.get(malloc$LAYOUT, malloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_malloc_t malloc
     * }
     */
    public static void malloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(malloc$LAYOUT, malloc$OFFSET, fieldValue);
    }

    private static final AddressLayout calloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("calloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_calloc_t calloc
     * }
     */
    public static final AddressLayout calloc$layout() {
        return calloc$LAYOUT;
    }

    private static final long calloc$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_calloc_t calloc
     * }
     */
    public static final long calloc$offset() {
        return calloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_calloc_t calloc
     * }
     */
    public static MemorySegment calloc(MemorySegment struct) {
        return struct.get(calloc$LAYOUT, calloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_calloc_t calloc
     * }
     */
    public static void calloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(calloc$LAYOUT, calloc$OFFSET, fieldValue);
    }

    private static final AddressLayout realloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("realloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_realloc_t realloc
     * }
     */
    public static final AddressLayout realloc$layout() {
        return realloc$LAYOUT;
    }

    private static final long realloc$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_realloc_t realloc
     * }
     */
    public static final long realloc$offset() {
        return realloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_realloc_t realloc
     * }
     */
    public static MemorySegment realloc(MemorySegment struct) {
        return struct.get(realloc$LAYOUT, realloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_realloc_t realloc
     * }
     */
    public static void realloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(realloc$LAYOUT, realloc$OFFSET, fieldValue);
    }

    private static final AddressLayout free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_free_t free
     * }
     */
    public static final AddressLayout free$layout() {
        return free$LAYOUT;
    }

    private static final long free$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_free_t free
     * }
     */
    public static final long free$offset() {
        return free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_free_t free
     * }
     */
    public static MemorySegment free(MemorySegment struct) {
        return struct.get(free$LAYOUT, free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_free_t free
     * }
     */
    public static void free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(free$LAYOUT, free$OFFSET, fieldValue);
    }

    private static final AddressLayout vsnprintf$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vsnprintf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cs_vsnprintf_t vsnprintf
     * }
     */
    public static final AddressLayout vsnprintf$layout() {
        return vsnprintf$LAYOUT;
    }

    private static final long vsnprintf$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cs_vsnprintf_t vsnprintf
     * }
     */
    public static final long vsnprintf$offset() {
        return vsnprintf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cs_vsnprintf_t vsnprintf
     * }
     */
    public static MemorySegment vsnprintf(MemorySegment struct) {
        return struct.get(vsnprintf$LAYOUT, vsnprintf$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cs_vsnprintf_t vsnprintf
     * }
     */
    public static void vsnprintf(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vsnprintf$LAYOUT, vsnprintf$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

