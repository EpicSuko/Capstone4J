// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct hppa_ext {
 *     hppa_modifier modifiers[5];
 *     uint8_t mod_num;
 *     bool b_writeble;
 *     bool is_alternative;
 * }
 * }
 */
public class hppa_ext {

    hppa_ext() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(5, hppa_modifier.layout()).withName("modifiers"),
        capstone_h.C_CHAR.withName("mod_num"),
        capstone_h.C_BOOL.withName("b_writeble"),
        capstone_h.C_BOOL.withName("is_alternative"),
        MemoryLayout.paddingLayout(1)
    ).withName("hppa_ext");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout modifiers$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("modifiers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hppa_modifier modifiers[5]
     * }
     */
    public static final SequenceLayout modifiers$layout() {
        return modifiers$LAYOUT;
    }

    private static final long modifiers$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hppa_modifier modifiers[5]
     * }
     */
    public static final long modifiers$offset() {
        return modifiers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hppa_modifier modifiers[5]
     * }
     */
    public static MemorySegment modifiers(MemorySegment struct) {
        return struct.asSlice(modifiers$OFFSET, modifiers$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hppa_modifier modifiers[5]
     * }
     */
    public static void modifiers(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, modifiers$OFFSET, modifiers$LAYOUT.byteSize());
    }

    private static long[] modifiers$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * hppa_modifier modifiers[5]
     * }
     */
    public static long[] modifiers$dimensions() {
        return modifiers$DIMS;
    }
    private static final MethodHandle modifiers$ELEM_HANDLE = modifiers$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * hppa_modifier modifiers[5]
     * }
     */
    public static MemorySegment modifiers(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)modifiers$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * hppa_modifier modifiers[5]
     * }
     */
    public static void modifiers(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, modifiers(struct, index0), 0L, hppa_modifier.layout().byteSize());
    }

    private static final OfByte mod_num$LAYOUT = (OfByte)$LAYOUT.select(groupElement("mod_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t mod_num
     * }
     */
    public static final OfByte mod_num$layout() {
        return mod_num$LAYOUT;
    }

    private static final long mod_num$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t mod_num
     * }
     */
    public static final long mod_num$offset() {
        return mod_num$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t mod_num
     * }
     */
    public static byte mod_num(MemorySegment struct) {
        return struct.get(mod_num$LAYOUT, mod_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t mod_num
     * }
     */
    public static void mod_num(MemorySegment struct, byte fieldValue) {
        struct.set(mod_num$LAYOUT, mod_num$OFFSET, fieldValue);
    }

    private static final OfBoolean b_writeble$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("b_writeble"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool b_writeble
     * }
     */
    public static final OfBoolean b_writeble$layout() {
        return b_writeble$LAYOUT;
    }

    private static final long b_writeble$OFFSET = 61;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool b_writeble
     * }
     */
    public static final long b_writeble$offset() {
        return b_writeble$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool b_writeble
     * }
     */
    public static boolean b_writeble(MemorySegment struct) {
        return struct.get(b_writeble$LAYOUT, b_writeble$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool b_writeble
     * }
     */
    public static void b_writeble(MemorySegment struct, boolean fieldValue) {
        struct.set(b_writeble$LAYOUT, b_writeble$OFFSET, fieldValue);
    }

    private static final OfBoolean is_alternative$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_alternative"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_alternative
     * }
     */
    public static final OfBoolean is_alternative$layout() {
        return is_alternative$LAYOUT;
    }

    private static final long is_alternative$OFFSET = 62;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_alternative
     * }
     */
    public static final long is_alternative$offset() {
        return is_alternative$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_alternative
     * }
     */
    public static boolean is_alternative(MemorySegment struct) {
        return struct.get(is_alternative$LAYOUT, is_alternative$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_alternative
     * }
     */
    public static void is_alternative(MemorySegment struct, boolean fieldValue) {
        struct.set(is_alternative$LAYOUT, is_alternative$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

