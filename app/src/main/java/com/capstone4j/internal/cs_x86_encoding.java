// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cs_x86_encoding {
 *     uint8_t modrm_offset;
 *     uint8_t disp_offset;
 *     uint8_t disp_size;
 *     uint8_t imm_offset;
 *     uint8_t imm_size;
 * }
 * }
 */
public class cs_x86_encoding {

    cs_x86_encoding() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        capstone_h.C_CHAR.withName("modrm_offset"),
        capstone_h.C_CHAR.withName("disp_offset"),
        capstone_h.C_CHAR.withName("disp_size"),
        capstone_h.C_CHAR.withName("imm_offset"),
        capstone_h.C_CHAR.withName("imm_size")
    ).withName("cs_x86_encoding");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte modrm_offset$LAYOUT = (OfByte)$LAYOUT.select(groupElement("modrm_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t modrm_offset
     * }
     */
    public static final OfByte modrm_offset$layout() {
        return modrm_offset$LAYOUT;
    }

    private static final long modrm_offset$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t modrm_offset
     * }
     */
    public static final long modrm_offset$offset() {
        return modrm_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t modrm_offset
     * }
     */
    public static byte modrm_offset(MemorySegment struct) {
        return struct.get(modrm_offset$LAYOUT, modrm_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t modrm_offset
     * }
     */
    public static void modrm_offset(MemorySegment struct, byte fieldValue) {
        struct.set(modrm_offset$LAYOUT, modrm_offset$OFFSET, fieldValue);
    }

    private static final OfByte disp_offset$LAYOUT = (OfByte)$LAYOUT.select(groupElement("disp_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t disp_offset
     * }
     */
    public static final OfByte disp_offset$layout() {
        return disp_offset$LAYOUT;
    }

    private static final long disp_offset$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t disp_offset
     * }
     */
    public static final long disp_offset$offset() {
        return disp_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t disp_offset
     * }
     */
    public static byte disp_offset(MemorySegment struct) {
        return struct.get(disp_offset$LAYOUT, disp_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t disp_offset
     * }
     */
    public static void disp_offset(MemorySegment struct, byte fieldValue) {
        struct.set(disp_offset$LAYOUT, disp_offset$OFFSET, fieldValue);
    }

    private static final OfByte disp_size$LAYOUT = (OfByte)$LAYOUT.select(groupElement("disp_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t disp_size
     * }
     */
    public static final OfByte disp_size$layout() {
        return disp_size$LAYOUT;
    }

    private static final long disp_size$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t disp_size
     * }
     */
    public static final long disp_size$offset() {
        return disp_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t disp_size
     * }
     */
    public static byte disp_size(MemorySegment struct) {
        return struct.get(disp_size$LAYOUT, disp_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t disp_size
     * }
     */
    public static void disp_size(MemorySegment struct, byte fieldValue) {
        struct.set(disp_size$LAYOUT, disp_size$OFFSET, fieldValue);
    }

    private static final OfByte imm_offset$LAYOUT = (OfByte)$LAYOUT.select(groupElement("imm_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t imm_offset
     * }
     */
    public static final OfByte imm_offset$layout() {
        return imm_offset$LAYOUT;
    }

    private static final long imm_offset$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t imm_offset
     * }
     */
    public static final long imm_offset$offset() {
        return imm_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t imm_offset
     * }
     */
    public static byte imm_offset(MemorySegment struct) {
        return struct.get(imm_offset$LAYOUT, imm_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t imm_offset
     * }
     */
    public static void imm_offset(MemorySegment struct, byte fieldValue) {
        struct.set(imm_offset$LAYOUT, imm_offset$OFFSET, fieldValue);
    }

    private static final OfByte imm_size$LAYOUT = (OfByte)$LAYOUT.select(groupElement("imm_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t imm_size
     * }
     */
    public static final OfByte imm_size$layout() {
        return imm_size$LAYOUT;
    }

    private static final long imm_size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t imm_size
     * }
     */
    public static final long imm_size$offset() {
        return imm_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t imm_size
     * }
     */
    public static byte imm_size(MemorySegment struct) {
        return struct.get(imm_size$LAYOUT, imm_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t imm_size
     * }
     */
    public static void imm_size(MemorySegment struct, byte fieldValue) {
        struct.set(imm_size$LAYOUT, imm_size$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

