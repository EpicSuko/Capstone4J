// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     aarch64_sysop_reg reg;
 *     aarch64_sysop_imm imm;
 *     aarch64_sysop_alias alias;
 *     aarch64_op_type sub_type;
 * }
 * }
 */
public class aarch64_sysop {

    aarch64_sysop() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        aarch64_sysop_reg.layout().withName("reg"),
        aarch64_sysop_imm.layout().withName("imm"),
        aarch64_sysop_alias.layout().withName("alias"),
        capstone_h.C_INT.withName("sub_type")
    ).withName("$anon$2051:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout reg$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("reg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_sysop_reg reg
     * }
     */
    public static final GroupLayout reg$layout() {
        return reg$LAYOUT;
    }

    private static final long reg$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_sysop_reg reg
     * }
     */
    public static final long reg$offset() {
        return reg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_sysop_reg reg
     * }
     */
    public static MemorySegment reg(MemorySegment struct) {
        return struct.asSlice(reg$OFFSET, reg$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_sysop_reg reg
     * }
     */
    public static void reg(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reg$OFFSET, reg$LAYOUT.byteSize());
    }

    private static final GroupLayout imm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("imm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_sysop_imm imm
     * }
     */
    public static final GroupLayout imm$layout() {
        return imm$LAYOUT;
    }

    private static final long imm$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_sysop_imm imm
     * }
     */
    public static final long imm$offset() {
        return imm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_sysop_imm imm
     * }
     */
    public static MemorySegment imm(MemorySegment struct) {
        return struct.asSlice(imm$OFFSET, imm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_sysop_imm imm
     * }
     */
    public static void imm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, imm$OFFSET, imm$LAYOUT.byteSize());
    }

    private static final GroupLayout alias$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("alias"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_sysop_alias alias
     * }
     */
    public static final GroupLayout alias$layout() {
        return alias$LAYOUT;
    }

    private static final long alias$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_sysop_alias alias
     * }
     */
    public static final long alias$offset() {
        return alias$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_sysop_alias alias
     * }
     */
    public static MemorySegment alias(MemorySegment struct) {
        return struct.asSlice(alias$OFFSET, alias$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_sysop_alias alias
     * }
     */
    public static void alias(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, alias$OFFSET, alias$LAYOUT.byteSize());
    }

    private static final OfInt sub_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sub_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_op_type sub_type
     * }
     */
    public static final OfInt sub_type$layout() {
        return sub_type$LAYOUT;
    }

    private static final long sub_type$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_op_type sub_type
     * }
     */
    public static final long sub_type$offset() {
        return sub_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_op_type sub_type
     * }
     */
    public static int sub_type(MemorySegment struct) {
        return struct.get(sub_type$LAYOUT, sub_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_op_type sub_type
     * }
     */
    public static void sub_type(MemorySegment struct, int fieldValue) {
        struct.set(sub_type$LAYOUT, sub_type$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

