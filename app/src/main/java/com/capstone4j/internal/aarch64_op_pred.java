// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     aarch64_reg reg;
 *     aarch64_reg vec_select;
 *     int32_t imm_index;
 * }
 * }
 */
public class aarch64_op_pred {

    aarch64_op_pred() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        capstone_h.C_INT.withName("reg"),
        capstone_h.C_INT.withName("vec_select"),
        capstone_h.C_INT.withName("imm_index")
    ).withName("$anon$2810:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt reg$LAYOUT = (OfInt)$LAYOUT.select(groupElement("reg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_reg reg
     * }
     */
    public static final OfInt reg$layout() {
        return reg$LAYOUT;
    }

    private static final long reg$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_reg reg
     * }
     */
    public static final long reg$offset() {
        return reg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_reg reg
     * }
     */
    public static int reg(MemorySegment struct) {
        return struct.get(reg$LAYOUT, reg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_reg reg
     * }
     */
    public static void reg(MemorySegment struct, int fieldValue) {
        struct.set(reg$LAYOUT, reg$OFFSET, fieldValue);
    }

    private static final OfInt vec_select$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vec_select"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * aarch64_reg vec_select
     * }
     */
    public static final OfInt vec_select$layout() {
        return vec_select$LAYOUT;
    }

    private static final long vec_select$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * aarch64_reg vec_select
     * }
     */
    public static final long vec_select$offset() {
        return vec_select$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * aarch64_reg vec_select
     * }
     */
    public static int vec_select(MemorySegment struct) {
        return struct.get(vec_select$LAYOUT, vec_select$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * aarch64_reg vec_select
     * }
     */
    public static void vec_select(MemorySegment struct, int fieldValue) {
        struct.set(vec_select$LAYOUT, vec_select$OFFSET, fieldValue);
    }

    private static final OfInt imm_index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("imm_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t imm_index
     * }
     */
    public static final OfInt imm_index$layout() {
        return imm_index$LAYOUT;
    }

    private static final long imm_index$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t imm_index
     * }
     */
    public static final long imm_index$offset() {
        return imm_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t imm_index
     * }
     */
    public static int imm_index(MemorySegment struct) {
        return struct.get(imm_index$LAYOUT, imm_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t imm_index
     * }
     */
    public static void imm_index(MemorySegment struct, int fieldValue) {
        struct.set(imm_index$LAYOUT, imm_index$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

