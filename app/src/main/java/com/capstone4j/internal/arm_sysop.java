// Generated by jextract

package com.capstone4j.internal;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     arm_sysop_reg reg;
 *     arm_spsr_cspr_bits psr_bits;
 *     uint16_t sysm;
 *     uint8_t msr_mask;
 * }
 * }
 */
public class arm_sysop {

    arm_sysop() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        arm_sysop_reg.layout().withName("reg"),
        capstone_h.C_INT.withName("psr_bits"),
        capstone_h.C_SHORT.withName("sysm"),
        capstone_h.C_CHAR.withName("msr_mask"),
        MemoryLayout.paddingLayout(1)
    ).withName("$anon$856:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout reg$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("reg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * arm_sysop_reg reg
     * }
     */
    public static final GroupLayout reg$layout() {
        return reg$LAYOUT;
    }

    private static final long reg$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * arm_sysop_reg reg
     * }
     */
    public static final long reg$offset() {
        return reg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * arm_sysop_reg reg
     * }
     */
    public static MemorySegment reg(MemorySegment struct) {
        return struct.asSlice(reg$OFFSET, reg$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * arm_sysop_reg reg
     * }
     */
    public static void reg(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reg$OFFSET, reg$LAYOUT.byteSize());
    }

    private static final OfInt psr_bits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("psr_bits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * arm_spsr_cspr_bits psr_bits
     * }
     */
    public static final OfInt psr_bits$layout() {
        return psr_bits$LAYOUT;
    }

    private static final long psr_bits$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * arm_spsr_cspr_bits psr_bits
     * }
     */
    public static final long psr_bits$offset() {
        return psr_bits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * arm_spsr_cspr_bits psr_bits
     * }
     */
    public static int psr_bits(MemorySegment struct) {
        return struct.get(psr_bits$LAYOUT, psr_bits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * arm_spsr_cspr_bits psr_bits
     * }
     */
    public static void psr_bits(MemorySegment struct, int fieldValue) {
        struct.set(psr_bits$LAYOUT, psr_bits$OFFSET, fieldValue);
    }

    private static final OfShort sysm$LAYOUT = (OfShort)$LAYOUT.select(groupElement("sysm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t sysm
     * }
     */
    public static final OfShort sysm$layout() {
        return sysm$LAYOUT;
    }

    private static final long sysm$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t sysm
     * }
     */
    public static final long sysm$offset() {
        return sysm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t sysm
     * }
     */
    public static short sysm(MemorySegment struct) {
        return struct.get(sysm$LAYOUT, sysm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t sysm
     * }
     */
    public static void sysm(MemorySegment struct, short fieldValue) {
        struct.set(sysm$LAYOUT, sysm$OFFSET, fieldValue);
    }

    private static final OfByte msr_mask$LAYOUT = (OfByte)$LAYOUT.select(groupElement("msr_mask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t msr_mask
     * }
     */
    public static final OfByte msr_mask$layout() {
        return msr_mask$LAYOUT;
    }

    private static final long msr_mask$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t msr_mask
     * }
     */
    public static final long msr_mask$offset() {
        return msr_mask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t msr_mask
     * }
     */
    public static byte msr_mask(MemorySegment struct) {
        return struct.get(msr_mask$LAYOUT, msr_mask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t msr_mask
     * }
     */
    public static void msr_mask(MemorySegment struct, byte fieldValue) {
        struct.set(msr_mask$LAYOUT, msr_mask$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

